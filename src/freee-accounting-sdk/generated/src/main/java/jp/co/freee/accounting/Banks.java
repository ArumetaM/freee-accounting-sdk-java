/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.BanksIndexResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Banks.
 */
public interface Banks {
    /**
     * 連携サービス一覧の取得.
     * 連携しているサービス一覧を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BanksIndexResponse object if successful.
     */
    BanksIndexResponse list();

    /**
     * 連携サービス一覧の取得.
     * 連携しているサービス一覧を取得する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BanksIndexResponse> listAsync(final ServiceCallback<BanksIndexResponse> serviceCallback);

    /**
     * 連携サービス一覧の取得.
     * 連携しているサービス一覧を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BanksIndexResponse object
     */
    Observable<BanksIndexResponse> listAsync();

    /**
     * 連携サービス一覧の取得.
     * 連携しているサービス一覧を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BanksIndexResponse object
     */
    Observable<ServiceResponse<BanksIndexResponse>> listWithServiceResponseAsync();
    /**
     * 連携サービス一覧の取得.
     * 連携しているサービス一覧を取得する.
     *
     * @param offset 開始位置
     * @param limit 取得上限数,最大500件
     * @param type サービス種別. Possible values include: 'bank_account', 'credit_card', 'wallet'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BanksIndexResponse object if successful.
     */
    BanksIndexResponse list(Integer offset, Integer limit, String type);

    /**
     * 連携サービス一覧の取得.
     * 連携しているサービス一覧を取得する.
     *
     * @param offset 開始位置
     * @param limit 取得上限数,最大500件
     * @param type サービス種別. Possible values include: 'bank_account', 'credit_card', 'wallet'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BanksIndexResponse> listAsync(Integer offset, Integer limit, String type, final ServiceCallback<BanksIndexResponse> serviceCallback);

    /**
     * 連携サービス一覧の取得.
     * 連携しているサービス一覧を取得する.
     *
     * @param offset 開始位置
     * @param limit 取得上限数,最大500件
     * @param type サービス種別. Possible values include: 'bank_account', 'credit_card', 'wallet'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BanksIndexResponse object
     */
    Observable<BanksIndexResponse> listAsync(Integer offset, Integer limit, String type);

    /**
     * 連携サービス一覧の取得.
     * 連携しているサービス一覧を取得する.
     *
     * @param offset 開始位置
     * @param limit 取得上限数,最大500件
     * @param type サービス種別. Possible values include: 'bank_account', 'credit_card', 'wallet'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BanksIndexResponse object
     */
    Observable<ServiceResponse<BanksIndexResponse>> listWithServiceResponseAsync(Integer offset, Integer limit, String type);

}
