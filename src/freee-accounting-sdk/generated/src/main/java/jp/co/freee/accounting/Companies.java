/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.CompaniesShowResponse;
import jp.co.freee.accounting.models.CompaniesUpdateResponse;
import jp.co.freee.accounting.models.ListOKResponse;
import jp.co.freee.accounting.models.UpdateCompanyParams;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Companies.
 */
public interface Companies {
    /**
     * 事業所一覧の取得.
     * ユーザが所属する事業所の一覧を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListOKResponse object if successful.
     */
    ListOKResponse list();

    /**
     * 事業所一覧の取得.
     * ユーザが所属する事業所の一覧を取得する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ListOKResponse> listAsync(final ServiceCallback<ListOKResponse> serviceCallback);

    /**
     * 事業所一覧の取得.
     * ユーザが所属する事業所の一覧を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListOKResponse object
     */
    Observable<ListOKResponse> listAsync();

    /**
     * 事業所一覧の取得.
     * ユーザが所属する事業所の一覧を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListOKResponse object
     */
    Observable<ServiceResponse<ListOKResponse>> listWithServiceResponseAsync();

    /**
     * 事業所の詳細情報の取得.
     * ユーザが所属する事業所の詳細を取得する.
     *
     * @param id 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CompaniesShowResponse object if successful.
     */
    CompaniesShowResponse get(int id);

    /**
     * 事業所の詳細情報の取得.
     * ユーザが所属する事業所の詳細を取得する.
     *
     * @param id 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<CompaniesShowResponse> getAsync(int id, final ServiceCallback<CompaniesShowResponse> serviceCallback);

    /**
     * 事業所の詳細情報の取得.
     * ユーザが所属する事業所の詳細を取得する.
     *
     * @param id 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompaniesShowResponse object
     */
    Observable<CompaniesShowResponse> getAsync(int id);

    /**
     * 事業所の詳細情報の取得.
     * ユーザが所属する事業所の詳細を取得する.
     *
     * @param id 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompaniesShowResponse object
     */
    Observable<ServiceResponse<CompaniesShowResponse>> getWithServiceResponseAsync(int id);
    /**
     * 事業所の詳細情報の取得.
     * ユーザが所属する事業所の詳細を取得する.
     *
     * @param id 事業所ID
     * @param details 取得情報に勘定科目・税区分コード・税区分・品目・取引先・部門・メモタグ・口座の一覧を含める
     * @param accountItems 取得情報に勘定科目一覧を含める
     * @param taxes 取得情報に税区分コード・税区分一覧を含める
     * @param items 取得情報に品目一覧を含める
     * @param partners 取得情報に取引先一覧を含める
     * @param sections 取得情報に部門一覧を含める
     * @param tags 取得情報にメモタグ一覧を含める
     * @param walletables 取得情報に口座一覧を含める
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CompaniesShowResponse object if successful.
     */
    CompaniesShowResponse get(int id, Boolean details, Boolean accountItems, Boolean taxes, Boolean items, Boolean partners, Boolean sections, Boolean tags, Boolean walletables);

    /**
     * 事業所の詳細情報の取得.
     * ユーザが所属する事業所の詳細を取得する.
     *
     * @param id 事業所ID
     * @param details 取得情報に勘定科目・税区分コード・税区分・品目・取引先・部門・メモタグ・口座の一覧を含める
     * @param accountItems 取得情報に勘定科目一覧を含める
     * @param taxes 取得情報に税区分コード・税区分一覧を含める
     * @param items 取得情報に品目一覧を含める
     * @param partners 取得情報に取引先一覧を含める
     * @param sections 取得情報に部門一覧を含める
     * @param tags 取得情報にメモタグ一覧を含める
     * @param walletables 取得情報に口座一覧を含める
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<CompaniesShowResponse> getAsync(int id, Boolean details, Boolean accountItems, Boolean taxes, Boolean items, Boolean partners, Boolean sections, Boolean tags, Boolean walletables, final ServiceCallback<CompaniesShowResponse> serviceCallback);

    /**
     * 事業所の詳細情報の取得.
     * ユーザが所属する事業所の詳細を取得する.
     *
     * @param id 事業所ID
     * @param details 取得情報に勘定科目・税区分コード・税区分・品目・取引先・部門・メモタグ・口座の一覧を含める
     * @param accountItems 取得情報に勘定科目一覧を含める
     * @param taxes 取得情報に税区分コード・税区分一覧を含める
     * @param items 取得情報に品目一覧を含める
     * @param partners 取得情報に取引先一覧を含める
     * @param sections 取得情報に部門一覧を含める
     * @param tags 取得情報にメモタグ一覧を含める
     * @param walletables 取得情報に口座一覧を含める
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompaniesShowResponse object
     */
    Observable<CompaniesShowResponse> getAsync(int id, Boolean details, Boolean accountItems, Boolean taxes, Boolean items, Boolean partners, Boolean sections, Boolean tags, Boolean walletables);

    /**
     * 事業所の詳細情報の取得.
     * ユーザが所属する事業所の詳細を取得する.
     *
     * @param id 事業所ID
     * @param details 取得情報に勘定科目・税区分コード・税区分・品目・取引先・部門・メモタグ・口座の一覧を含める
     * @param accountItems 取得情報に勘定科目一覧を含める
     * @param taxes 取得情報に税区分コード・税区分一覧を含める
     * @param items 取得情報に品目一覧を含める
     * @param partners 取得情報に取引先一覧を含める
     * @param sections 取得情報に部門一覧を含める
     * @param tags 取得情報にメモタグ一覧を含める
     * @param walletables 取得情報に口座一覧を含める
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompaniesShowResponse object
     */
    Observable<ServiceResponse<CompaniesShowResponse>> getWithServiceResponseAsync(int id, Boolean details, Boolean accountItems, Boolean taxes, Boolean items, Boolean partners, Boolean sections, Boolean tags, Boolean walletables);

    /**
     * 事業所情報の更新.
     * ユーザが所属する事業所の情報を更新する.
     *
     * @param id 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CompaniesUpdateResponse object if successful.
     */
    CompaniesUpdateResponse update(int id);

    /**
     * 事業所情報の更新.
     * ユーザが所属する事業所の情報を更新する.
     *
     * @param id 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<CompaniesUpdateResponse> updateAsync(int id, final ServiceCallback<CompaniesUpdateResponse> serviceCallback);

    /**
     * 事業所情報の更新.
     * ユーザが所属する事業所の情報を更新する.
     *
     * @param id 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompaniesUpdateResponse object
     */
    Observable<CompaniesUpdateResponse> updateAsync(int id);

    /**
     * 事業所情報の更新.
     * ユーザが所属する事業所の情報を更新する.
     *
     * @param id 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompaniesUpdateResponse object
     */
    Observable<ServiceResponse<CompaniesUpdateResponse>> updateWithServiceResponseAsync(int id);
    /**
     * 事業所情報の更新.
     * ユーザが所属する事業所の情報を更新する.
     *
     * @param id 事業所ID
     * @param parameters the UpdateCompanyParams value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CompaniesUpdateResponse object if successful.
     */
    CompaniesUpdateResponse update(int id, UpdateCompanyParams parameters);

    /**
     * 事業所情報の更新.
     * ユーザが所属する事業所の情報を更新する.
     *
     * @param id 事業所ID
     * @param parameters the UpdateCompanyParams value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<CompaniesUpdateResponse> updateAsync(int id, UpdateCompanyParams parameters, final ServiceCallback<CompaniesUpdateResponse> serviceCallback);

    /**
     * 事業所情報の更新.
     * ユーザが所属する事業所の情報を更新する.
     *
     * @param id 事業所ID
     * @param parameters the UpdateCompanyParams value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompaniesUpdateResponse object
     */
    Observable<CompaniesUpdateResponse> updateAsync(int id, UpdateCompanyParams parameters);

    /**
     * 事業所情報の更新.
     * ユーザが所属する事業所の情報を更新する.
     *
     * @param id 事業所ID
     * @param parameters the UpdateCompanyParams value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompaniesUpdateResponse object
     */
    Observable<ServiceResponse<CompaniesUpdateResponse>> updateWithServiceResponseAsync(int id, UpdateCompanyParams parameters);

}
