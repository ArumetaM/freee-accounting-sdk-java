/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.CreateDealParams;
import jp.co.freee.accounting.models.DealsCreateResponse;
import jp.co.freee.accounting.models.DealsIndexResponse;
import jp.co.freee.accounting.models.DealsResponse;
import jp.co.freee.accounting.models.UpdateDealParams;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Deals.
 */
public interface Deals {
    /**
     * 取引（収入／支出）一覧の取得.
     * 指定した事業所の取引一覧（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsIndexResponse object if successful.
     */
    DealsIndexResponse list(int companyId);

    /**
     * 取引（収入／支出）一覧の取得.
     * 指定した事業所の取引一覧（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DealsIndexResponse> listAsync(int companyId, final ServiceCallback<DealsIndexResponse> serviceCallback);

    /**
     * 取引（収入／支出）一覧の取得.
     * 指定した事業所の取引一覧（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsIndexResponse object
     */
    Observable<DealsIndexResponse> listAsync(int companyId);

    /**
     * 取引（収入／支出）一覧の取得.
     * 指定した事業所の取引一覧（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsIndexResponse object
     */
    Observable<ServiceResponse<DealsIndexResponse>> listWithServiceResponseAsync(int companyId);
    /**
     * 取引（収入／支出）一覧の取得.
     * 指定した事業所の取引一覧（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param partnerId 取引先IDで絞込
     * @param accountItemId 勘定科目IDで絞込
     * @param partnerCode 取引先コードで絞込
     * @param status 決済状況で絞込 (未決済: unsettled, 完了: settled). Possible values include: 'unsettled', 'settled'
     * @param type 収支区分 (収入: income, 支出: expense). Possible values include: 'income', 'expense'
     * @param startIssueDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endIssueDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param startDueDate 支払期日で絞込：開始日(yyyy-mm-dd)
     * @param endDueDate 支払期日で絞込：終了日(yyyy-mm-dd)
     * @param startRenewDate +更新日で絞込：開始日(yyyy-mm-dd)
     * @param endRenewDate +更新日で絞込：終了日(yyyy-mm-dd)
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @param registeredFrom 取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ）. Possible values include: 'me'
     * @param accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include: 'without', 'with'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsIndexResponse object if successful.
     */
    DealsIndexResponse list(int companyId, Integer partnerId, Integer accountItemId, String partnerCode, String status, String type, String startIssueDate, String endIssueDate, String startDueDate, String endDueDate, String startRenewDate, String endRenewDate, Integer offset, Integer limit, String registeredFrom, String accruals);

    /**
     * 取引（収入／支出）一覧の取得.
     * 指定した事業所の取引一覧（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param partnerId 取引先IDで絞込
     * @param accountItemId 勘定科目IDで絞込
     * @param partnerCode 取引先コードで絞込
     * @param status 決済状況で絞込 (未決済: unsettled, 完了: settled). Possible values include: 'unsettled', 'settled'
     * @param type 収支区分 (収入: income, 支出: expense). Possible values include: 'income', 'expense'
     * @param startIssueDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endIssueDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param startDueDate 支払期日で絞込：開始日(yyyy-mm-dd)
     * @param endDueDate 支払期日で絞込：終了日(yyyy-mm-dd)
     * @param startRenewDate +更新日で絞込：開始日(yyyy-mm-dd)
     * @param endRenewDate +更新日で絞込：終了日(yyyy-mm-dd)
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @param registeredFrom 取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ）. Possible values include: 'me'
     * @param accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include: 'without', 'with'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DealsIndexResponse> listAsync(int companyId, Integer partnerId, Integer accountItemId, String partnerCode, String status, String type, String startIssueDate, String endIssueDate, String startDueDate, String endDueDate, String startRenewDate, String endRenewDate, Integer offset, Integer limit, String registeredFrom, String accruals, final ServiceCallback<DealsIndexResponse> serviceCallback);

    /**
     * 取引（収入／支出）一覧の取得.
     * 指定した事業所の取引一覧（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param partnerId 取引先IDで絞込
     * @param accountItemId 勘定科目IDで絞込
     * @param partnerCode 取引先コードで絞込
     * @param status 決済状況で絞込 (未決済: unsettled, 完了: settled). Possible values include: 'unsettled', 'settled'
     * @param type 収支区分 (収入: income, 支出: expense). Possible values include: 'income', 'expense'
     * @param startIssueDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endIssueDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param startDueDate 支払期日で絞込：開始日(yyyy-mm-dd)
     * @param endDueDate 支払期日で絞込：終了日(yyyy-mm-dd)
     * @param startRenewDate +更新日で絞込：開始日(yyyy-mm-dd)
     * @param endRenewDate +更新日で絞込：終了日(yyyy-mm-dd)
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @param registeredFrom 取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ）. Possible values include: 'me'
     * @param accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include: 'without', 'with'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsIndexResponse object
     */
    Observable<DealsIndexResponse> listAsync(int companyId, Integer partnerId, Integer accountItemId, String partnerCode, String status, String type, String startIssueDate, String endIssueDate, String startDueDate, String endDueDate, String startRenewDate, String endRenewDate, Integer offset, Integer limit, String registeredFrom, String accruals);

    /**
     * 取引（収入／支出）一覧の取得.
     * 指定した事業所の取引一覧（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param partnerId 取引先IDで絞込
     * @param accountItemId 勘定科目IDで絞込
     * @param partnerCode 取引先コードで絞込
     * @param status 決済状況で絞込 (未決済: unsettled, 完了: settled). Possible values include: 'unsettled', 'settled'
     * @param type 収支区分 (収入: income, 支出: expense). Possible values include: 'income', 'expense'
     * @param startIssueDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endIssueDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param startDueDate 支払期日で絞込：開始日(yyyy-mm-dd)
     * @param endDueDate 支払期日で絞込：終了日(yyyy-mm-dd)
     * @param startRenewDate +更新日で絞込：開始日(yyyy-mm-dd)
     * @param endRenewDate +更新日で絞込：終了日(yyyy-mm-dd)
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @param registeredFrom 取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ）. Possible values include: 'me'
     * @param accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include: 'without', 'with'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsIndexResponse object
     */
    Observable<ServiceResponse<DealsIndexResponse>> listWithServiceResponseAsync(int companyId, Integer partnerId, Integer accountItemId, String partnerCode, String status, String type, String startIssueDate, String endIssueDate, String startDueDate, String endDueDate, String startRenewDate, String endRenewDate, Integer offset, Integer limit, String registeredFrom, String accruals);

    /**
     * 取引（収入／支出）の作成.
     * 指定した事業所の取引（収入／支出）を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsCreateResponse object if successful.
     */
    DealsCreateResponse create();

    /**
     * 取引（収入／支出）の作成.
     * 指定した事業所の取引（収入／支出）を作成する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DealsCreateResponse> createAsync(final ServiceCallback<DealsCreateResponse> serviceCallback);

    /**
     * 取引（収入／支出）の作成.
     * 指定した事業所の取引（収入／支出）を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsCreateResponse object
     */
    Observable<DealsCreateResponse> createAsync();

    /**
     * 取引（収入／支出）の作成.
     * 指定した事業所の取引（収入／支出）を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsCreateResponse object
     */
    Observable<ServiceResponse<DealsCreateResponse>> createWithServiceResponseAsync();
    /**
     * 取引（収入／支出）の作成.
     * 指定した事業所の取引（収入／支出）を作成する.
     *
     * @param parameters 取引（収入／支出）の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsCreateResponse object if successful.
     */
    DealsCreateResponse create(CreateDealParams parameters);

    /**
     * 取引（収入／支出）の作成.
     * 指定した事業所の取引（収入／支出）を作成する.
     *
     * @param parameters 取引（収入／支出）の作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DealsCreateResponse> createAsync(CreateDealParams parameters, final ServiceCallback<DealsCreateResponse> serviceCallback);

    /**
     * 取引（収入／支出）の作成.
     * 指定した事業所の取引（収入／支出）を作成する.
     *
     * @param parameters 取引（収入／支出）の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsCreateResponse object
     */
    Observable<DealsCreateResponse> createAsync(CreateDealParams parameters);

    /**
     * 取引（収入／支出）の作成.
     * 指定した事業所の取引（収入／支出）を作成する.
     *
     * @param parameters 取引（収入／支出）の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsCreateResponse object
     */
    Observable<ServiceResponse<DealsCreateResponse>> createWithServiceResponseAsync(CreateDealParams parameters);

    /**
     * 取引（収入／支出）の取得.
     * 指定した事業所の取引（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsResponse object if successful.
     */
    DealsResponse get(int companyId, int id);

    /**
     * 取引（収入／支出）の取得.
     * 指定した事業所の取引（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DealsResponse> getAsync(int companyId, int id, final ServiceCallback<DealsResponse> serviceCallback);

    /**
     * 取引（収入／支出）の取得.
     * 指定した事業所の取引（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    Observable<DealsResponse> getAsync(int companyId, int id);

    /**
     * 取引（収入／支出）の取得.
     * 指定した事業所の取引（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    Observable<ServiceResponse<DealsResponse>> getWithServiceResponseAsync(int companyId, int id);
    /**
     * 取引（収入／支出）の取得.
     * 指定した事業所の取引（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @param accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include: 'without', 'with'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsResponse object if successful.
     */
    DealsResponse get(int companyId, int id, String accruals);

    /**
     * 取引（収入／支出）の取得.
     * 指定した事業所の取引（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @param accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include: 'without', 'with'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DealsResponse> getAsync(int companyId, int id, String accruals, final ServiceCallback<DealsResponse> serviceCallback);

    /**
     * 取引（収入／支出）の取得.
     * 指定した事業所の取引（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @param accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include: 'without', 'with'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    Observable<DealsResponse> getAsync(int companyId, int id, String accruals);

    /**
     * 取引（収入／支出）の取得.
     * 指定した事業所の取引（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @param accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include: 'without', 'with'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    Observable<ServiceResponse<DealsResponse>> getWithServiceResponseAsync(int companyId, int id, String accruals);

    /**
     * 取引（収入／支出）の更新.
     * 指定した事業所の取引（収入／支出）を更新する.
     *
     * @param id 取引ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsResponse object if successful.
     */
    DealsResponse update(int id);

    /**
     * 取引（収入／支出）の更新.
     * 指定した事業所の取引（収入／支出）を更新する.
     *
     * @param id 取引ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DealsResponse> updateAsync(int id, final ServiceCallback<DealsResponse> serviceCallback);

    /**
     * 取引（収入／支出）の更新.
     * 指定した事業所の取引（収入／支出）を更新する.
     *
     * @param id 取引ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    Observable<DealsResponse> updateAsync(int id);

    /**
     * 取引（収入／支出）の更新.
     * 指定した事業所の取引（収入／支出）を更新する.
     *
     * @param id 取引ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    Observable<ServiceResponse<DealsResponse>> updateWithServiceResponseAsync(int id);
    /**
     * 取引（収入／支出）の更新.
     * 指定した事業所の取引（収入／支出）を更新する.
     *
     * @param id 取引ID
     * @param parameters 取引（収入／支出）の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsResponse object if successful.
     */
    DealsResponse update(int id, UpdateDealParams parameters);

    /**
     * 取引（収入／支出）の更新.
     * 指定した事業所の取引（収入／支出）を更新する.
     *
     * @param id 取引ID
     * @param parameters 取引（収入／支出）の更新
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DealsResponse> updateAsync(int id, UpdateDealParams parameters, final ServiceCallback<DealsResponse> serviceCallback);

    /**
     * 取引（収入／支出）の更新.
     * 指定した事業所の取引（収入／支出）を更新する.
     *
     * @param id 取引ID
     * @param parameters 取引（収入／支出）の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    Observable<DealsResponse> updateAsync(int id, UpdateDealParams parameters);

    /**
     * 取引（収入／支出）の更新.
     * 指定した事業所の取引（収入／支出）を更新する.
     *
     * @param id 取引ID
     * @param parameters 取引（収入／支出）の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    Observable<ServiceResponse<DealsResponse>> updateWithServiceResponseAsync(int id, UpdateDealParams parameters);

}
