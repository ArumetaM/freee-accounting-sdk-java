/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.CreateExpenseApplicationParams;
import jp.co.freee.accounting.models.ExpenseApplicationsResponse;
import jp.co.freee.accounting.models.UpdateExpenseApplicationParams;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ExpenseApplications.
 */
public interface ExpenseApplications {
    /**
     * 経費申請の作成.
     * 指定した事業所の経費申請を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExpenseApplicationsResponse object if successful.
     */
    ExpenseApplicationsResponse create();

    /**
     * 経費申請の作成.
     * 指定した事業所の経費申請を作成する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ExpenseApplicationsResponse> createAsync(final ServiceCallback<ExpenseApplicationsResponse> serviceCallback);

    /**
     * 経費申請の作成.
     * 指定した事業所の経費申請を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExpenseApplicationsResponse object
     */
    Observable<ExpenseApplicationsResponse> createAsync();

    /**
     * 経費申請の作成.
     * 指定した事業所の経費申請を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExpenseApplicationsResponse object
     */
    Observable<ServiceResponse<ExpenseApplicationsResponse>> createWithServiceResponseAsync();
    /**
     * 経費申請の作成.
     * 指定した事業所の経費申請を作成する.
     *
     * @param parameters 経費申請の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExpenseApplicationsResponse object if successful.
     */
    ExpenseApplicationsResponse create(CreateExpenseApplicationParams parameters);

    /**
     * 経費申請の作成.
     * 指定した事業所の経費申請を作成する.
     *
     * @param parameters 経費申請の作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ExpenseApplicationsResponse> createAsync(CreateExpenseApplicationParams parameters, final ServiceCallback<ExpenseApplicationsResponse> serviceCallback);

    /**
     * 経費申請の作成.
     * 指定した事業所の経費申請を作成する.
     *
     * @param parameters 経費申請の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExpenseApplicationsResponse object
     */
    Observable<ExpenseApplicationsResponse> createAsync(CreateExpenseApplicationParams parameters);

    /**
     * 経費申請の作成.
     * 指定した事業所の経費申請を作成する.
     *
     * @param parameters 経費申請の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExpenseApplicationsResponse object
     */
    Observable<ServiceResponse<ExpenseApplicationsResponse>> createWithServiceResponseAsync(CreateExpenseApplicationParams parameters);

    /**
     * 経費申請の更新.
     * 指定した事業所の経費申請を更新する.
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExpenseApplicationsResponse object if successful.
     */
    ExpenseApplicationsResponse update(int id);

    /**
     * 経費申請の更新.
     * 指定した事業所の経費申請を更新する.
     *
     * @param id the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ExpenseApplicationsResponse> updateAsync(int id, final ServiceCallback<ExpenseApplicationsResponse> serviceCallback);

    /**
     * 経費申請の更新.
     * 指定した事業所の経費申請を更新する.
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExpenseApplicationsResponse object
     */
    Observable<ExpenseApplicationsResponse> updateAsync(int id);

    /**
     * 経費申請の更新.
     * 指定した事業所の経費申請を更新する.
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExpenseApplicationsResponse object
     */
    Observable<ServiceResponse<ExpenseApplicationsResponse>> updateWithServiceResponseAsync(int id);
    /**
     * 経費申請の更新.
     * 指定した事業所の経費申請を更新する.
     *
     * @param id the int value
     * @param parameters 経費申請の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExpenseApplicationsResponse object if successful.
     */
    ExpenseApplicationsResponse update(int id, UpdateExpenseApplicationParams parameters);

    /**
     * 経費申請の更新.
     * 指定した事業所の経費申請を更新する.
     *
     * @param id the int value
     * @param parameters 経費申請の更新
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ExpenseApplicationsResponse> updateAsync(int id, UpdateExpenseApplicationParams parameters, final ServiceCallback<ExpenseApplicationsResponse> serviceCallback);

    /**
     * 経費申請の更新.
     * 指定した事業所の経費申請を更新する.
     *
     * @param id the int value
     * @param parameters 経費申請の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExpenseApplicationsResponse object
     */
    Observable<ExpenseApplicationsResponse> updateAsync(int id, UpdateExpenseApplicationParams parameters);

    /**
     * 経費申請の更新.
     * 指定した事業所の経費申請を更新する.
     *
     * @param id the int value
     * @param parameters 経費申請の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExpenseApplicationsResponse object
     */
    Observable<ServiceResponse<ExpenseApplicationsResponse>> updateWithServiceResponseAsync(int id, UpdateExpenseApplicationParams parameters);

    /**
     * 経費申請の削除.
     * 指定した事業所の経費申請を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void destroy(int id, int companyId);

    /**
     * 経費申請の削除.
     * 指定した事業所の経費申請を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> destroyAsync(int id, int companyId, final ServiceCallback<Void> serviceCallback);

    /**
     * 経費申請の削除.
     * 指定した事業所の経費申請を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> destroyAsync(int id, int companyId);

    /**
     * 経費申請の削除.
     * 指定した事業所の経費申請を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> destroyWithServiceResponseAsync(int id, int companyId);

}
