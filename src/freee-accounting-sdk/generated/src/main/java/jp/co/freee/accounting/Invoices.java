/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.InvoicesCreateParams;
import jp.co.freee.accounting.models.InvoicesIndexResponse;
import jp.co.freee.accounting.models.InvoicesResponse;
import jp.co.freee.accounting.models.InvoicesUpdateParams;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Invoices.
 */
public interface Invoices {
    /**
     * 請求書一覧の取得.
     * 指定した事業所の請求書一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InvoicesIndexResponse object if successful.
     */
    InvoicesIndexResponse list(int companyId);

    /**
     * 請求書一覧の取得.
     * 指定した事業所の請求書一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InvoicesIndexResponse> listAsync(int companyId, final ServiceCallback<InvoicesIndexResponse> serviceCallback);

    /**
     * 請求書一覧の取得.
     * 指定した事業所の請求書一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoicesIndexResponse object
     */
    Observable<InvoicesIndexResponse> listAsync(int companyId);

    /**
     * 請求書一覧の取得.
     * 指定した事業所の請求書一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoicesIndexResponse object
     */
    Observable<ServiceResponse<InvoicesIndexResponse>> listWithServiceResponseAsync(int companyId);
    /**
     * 請求書一覧の取得.
     * 指定した事業所の請求書一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param partnerId 取引先IDで絞込
     * @param partnerCode 取引先コードで絞込
     * @param issueDateStart 請求日の開始日(yyyy-mm-dd)
     * @param issueDateEnd 請求日の終了日(yyyy-mm-dd)
     * @param dueDateStart 期日の開始日(yyyy-mm-dd)
     * @param dueDateEnd 期日の終了日(yyyy-mm-dd)
     * @param invoiceNumber 請求書番号
     * @param description 概要
     * @param invoiceStatus 請求書ステータス  (draft: 下書き, applying: 申請中, remanded: 差し戻し, rejected: 却下, approved: 承認済み, issued: 発行済み). Possible values include: 'draft', 'applying', 'remanded', 'rejected', 'approved', 'issued'
     * @param paymentStatus 入金ステータス  (unsettled: 入金待ち, settled: 入金済み). Possible values include: 'unsettled', 'settled'
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InvoicesIndexResponse object if successful.
     */
    InvoicesIndexResponse list(int companyId, Integer partnerId, String partnerCode, String issueDateStart, String issueDateEnd, String dueDateStart, String dueDateEnd, String invoiceNumber, String description, String invoiceStatus, String paymentStatus, Integer offset, Integer limit);

    /**
     * 請求書一覧の取得.
     * 指定した事業所の請求書一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param partnerId 取引先IDで絞込
     * @param partnerCode 取引先コードで絞込
     * @param issueDateStart 請求日の開始日(yyyy-mm-dd)
     * @param issueDateEnd 請求日の終了日(yyyy-mm-dd)
     * @param dueDateStart 期日の開始日(yyyy-mm-dd)
     * @param dueDateEnd 期日の終了日(yyyy-mm-dd)
     * @param invoiceNumber 請求書番号
     * @param description 概要
     * @param invoiceStatus 請求書ステータス  (draft: 下書き, applying: 申請中, remanded: 差し戻し, rejected: 却下, approved: 承認済み, issued: 発行済み). Possible values include: 'draft', 'applying', 'remanded', 'rejected', 'approved', 'issued'
     * @param paymentStatus 入金ステータス  (unsettled: 入金待ち, settled: 入金済み). Possible values include: 'unsettled', 'settled'
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InvoicesIndexResponse> listAsync(int companyId, Integer partnerId, String partnerCode, String issueDateStart, String issueDateEnd, String dueDateStart, String dueDateEnd, String invoiceNumber, String description, String invoiceStatus, String paymentStatus, Integer offset, Integer limit, final ServiceCallback<InvoicesIndexResponse> serviceCallback);

    /**
     * 請求書一覧の取得.
     * 指定した事業所の請求書一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param partnerId 取引先IDで絞込
     * @param partnerCode 取引先コードで絞込
     * @param issueDateStart 請求日の開始日(yyyy-mm-dd)
     * @param issueDateEnd 請求日の終了日(yyyy-mm-dd)
     * @param dueDateStart 期日の開始日(yyyy-mm-dd)
     * @param dueDateEnd 期日の終了日(yyyy-mm-dd)
     * @param invoiceNumber 請求書番号
     * @param description 概要
     * @param invoiceStatus 請求書ステータス  (draft: 下書き, applying: 申請中, remanded: 差し戻し, rejected: 却下, approved: 承認済み, issued: 発行済み). Possible values include: 'draft', 'applying', 'remanded', 'rejected', 'approved', 'issued'
     * @param paymentStatus 入金ステータス  (unsettled: 入金待ち, settled: 入金済み). Possible values include: 'unsettled', 'settled'
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoicesIndexResponse object
     */
    Observable<InvoicesIndexResponse> listAsync(int companyId, Integer partnerId, String partnerCode, String issueDateStart, String issueDateEnd, String dueDateStart, String dueDateEnd, String invoiceNumber, String description, String invoiceStatus, String paymentStatus, Integer offset, Integer limit);

    /**
     * 請求書一覧の取得.
     * 指定した事業所の請求書一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param partnerId 取引先IDで絞込
     * @param partnerCode 取引先コードで絞込
     * @param issueDateStart 請求日の開始日(yyyy-mm-dd)
     * @param issueDateEnd 請求日の終了日(yyyy-mm-dd)
     * @param dueDateStart 期日の開始日(yyyy-mm-dd)
     * @param dueDateEnd 期日の終了日(yyyy-mm-dd)
     * @param invoiceNumber 請求書番号
     * @param description 概要
     * @param invoiceStatus 請求書ステータス  (draft: 下書き, applying: 申請中, remanded: 差し戻し, rejected: 却下, approved: 承認済み, issued: 発行済み). Possible values include: 'draft', 'applying', 'remanded', 'rejected', 'approved', 'issued'
     * @param paymentStatus 入金ステータス  (unsettled: 入金待ち, settled: 入金済み). Possible values include: 'unsettled', 'settled'
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoicesIndexResponse object
     */
    Observable<ServiceResponse<InvoicesIndexResponse>> listWithServiceResponseAsync(int companyId, Integer partnerId, String partnerCode, String issueDateStart, String issueDateEnd, String dueDateStart, String dueDateEnd, String invoiceNumber, String description, String invoiceStatus, String paymentStatus, Integer offset, Integer limit);

    /**
     * 請求書の作成.
     * 指定した事業所の請求書を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InvoicesResponse object if successful.
     */
    InvoicesResponse create();

    /**
     * 請求書の作成.
     * 指定した事業所の請求書を作成する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InvoicesResponse> createAsync(final ServiceCallback<InvoicesResponse> serviceCallback);

    /**
     * 請求書の作成.
     * 指定した事業所の請求書を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoicesResponse object
     */
    Observable<InvoicesResponse> createAsync();

    /**
     * 請求書の作成.
     * 指定した事業所の請求書を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoicesResponse object
     */
    Observable<ServiceResponse<InvoicesResponse>> createWithServiceResponseAsync();
    /**
     * 請求書の作成.
     * 指定した事業所の請求書を作成する.
     *
     * @param parameters 請求書の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InvoicesResponse object if successful.
     */
    InvoicesResponse create(InvoicesCreateParams parameters);

    /**
     * 請求書の作成.
     * 指定した事業所の請求書を作成する.
     *
     * @param parameters 請求書の作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InvoicesResponse> createAsync(InvoicesCreateParams parameters, final ServiceCallback<InvoicesResponse> serviceCallback);

    /**
     * 請求書の作成.
     * 指定した事業所の請求書を作成する.
     *
     * @param parameters 請求書の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoicesResponse object
     */
    Observable<InvoicesResponse> createAsync(InvoicesCreateParams parameters);

    /**
     * 請求書の作成.
     * 指定した事業所の請求書を作成する.
     *
     * @param parameters 請求書の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoicesResponse object
     */
    Observable<ServiceResponse<InvoicesResponse>> createWithServiceResponseAsync(InvoicesCreateParams parameters);

    /**
     * 請求書の更新.
     * 指定した事業所の請求書を更新する.
     *
     * @param id 請求書ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InvoicesResponse object if successful.
     */
    InvoicesResponse update(int id);

    /**
     * 請求書の更新.
     * 指定した事業所の請求書を更新する.
     *
     * @param id 請求書ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InvoicesResponse> updateAsync(int id, final ServiceCallback<InvoicesResponse> serviceCallback);

    /**
     * 請求書の更新.
     * 指定した事業所の請求書を更新する.
     *
     * @param id 請求書ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoicesResponse object
     */
    Observable<InvoicesResponse> updateAsync(int id);

    /**
     * 請求書の更新.
     * 指定した事業所の請求書を更新する.
     *
     * @param id 請求書ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoicesResponse object
     */
    Observable<ServiceResponse<InvoicesResponse>> updateWithServiceResponseAsync(int id);
    /**
     * 請求書の更新.
     * 指定した事業所の請求書を更新する.
     *
     * @param id 請求書ID
     * @param parameters 請求書の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InvoicesResponse object if successful.
     */
    InvoicesResponse update(int id, InvoicesUpdateParams parameters);

    /**
     * 請求書の更新.
     * 指定した事業所の請求書を更新する.
     *
     * @param id 請求書ID
     * @param parameters 請求書の更新
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<InvoicesResponse> updateAsync(int id, InvoicesUpdateParams parameters, final ServiceCallback<InvoicesResponse> serviceCallback);

    /**
     * 請求書の更新.
     * 指定した事業所の請求書を更新する.
     *
     * @param id 請求書ID
     * @param parameters 請求書の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoicesResponse object
     */
    Observable<InvoicesResponse> updateAsync(int id, InvoicesUpdateParams parameters);

    /**
     * 請求書の更新.
     * 指定した事業所の請求書を更新する.
     *
     * @param id 請求書ID
     * @param parameters 請求書の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InvoicesResponse object
     */
    Observable<ServiceResponse<InvoicesResponse>> updateWithServiceResponseAsync(int id, InvoicesUpdateParams parameters);

    /**
     * 請求書の削除.
     * 指定した事業所の請求書を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void destroy(int id, int companyId);

    /**
     * 請求書の削除.
     * 指定した事業所の請求書を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> destroyAsync(int id, int companyId, final ServiceCallback<Void> serviceCallback);

    /**
     * 請求書の削除.
     * 指定した事業所の請求書を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> destroyAsync(int id, int companyId);

    /**
     * 請求書の削除.
     * 指定した事業所の請求書を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> destroyWithServiceResponseAsync(int id, int companyId);

}
