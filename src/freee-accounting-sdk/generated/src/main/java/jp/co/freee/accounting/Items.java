/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.CreateItemParams;
import jp.co.freee.accounting.models.ItemsCreateResponse;
import jp.co.freee.accounting.models.ItemsIndexResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Items.
 */
public interface Items {
    /**
     * 品目一覧の取得.
     * 指定した事業所の品目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ItemsIndexResponse object if successful.
     */
    ItemsIndexResponse list(int companyId);

    /**
     * 品目一覧の取得.
     * 指定した事業所の品目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ItemsIndexResponse> listAsync(int companyId, final ServiceCallback<ItemsIndexResponse> serviceCallback);

    /**
     * 品目一覧の取得.
     * 指定した事業所の品目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ItemsIndexResponse object
     */
    Observable<ItemsIndexResponse> listAsync(int companyId);

    /**
     * 品目一覧の取得.
     * 指定した事業所の品目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ItemsIndexResponse object
     */
    Observable<ServiceResponse<ItemsIndexResponse>> listWithServiceResponseAsync(int companyId);

    /**
     * 品目の作成.
     * 指定した事業所の品目を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ItemsCreateResponse object if successful.
     */
    ItemsCreateResponse create();

    /**
     * 品目の作成.
     * 指定した事業所の品目を作成する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ItemsCreateResponse> createAsync(final ServiceCallback<ItemsCreateResponse> serviceCallback);

    /**
     * 品目の作成.
     * 指定した事業所の品目を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ItemsCreateResponse object
     */
    Observable<ItemsCreateResponse> createAsync();

    /**
     * 品目の作成.
     * 指定した事業所の品目を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ItemsCreateResponse object
     */
    Observable<ServiceResponse<ItemsCreateResponse>> createWithServiceResponseAsync();
    /**
     * 品目の作成.
     * 指定した事業所の品目を作成する.
     *
     * @param parameters 品目の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ItemsCreateResponse object if successful.
     */
    ItemsCreateResponse create(CreateItemParams parameters);

    /**
     * 品目の作成.
     * 指定した事業所の品目を作成する.
     *
     * @param parameters 品目の作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ItemsCreateResponse> createAsync(CreateItemParams parameters, final ServiceCallback<ItemsCreateResponse> serviceCallback);

    /**
     * 品目の作成.
     * 指定した事業所の品目を作成する.
     *
     * @param parameters 品目の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ItemsCreateResponse object
     */
    Observable<ItemsCreateResponse> createAsync(CreateItemParams parameters);

    /**
     * 品目の作成.
     * 指定した事業所の品目を作成する.
     *
     * @param parameters 品目の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ItemsCreateResponse object
     */
    Observable<ServiceResponse<ItemsCreateResponse>> createWithServiceResponseAsync(CreateItemParams parameters);

}
