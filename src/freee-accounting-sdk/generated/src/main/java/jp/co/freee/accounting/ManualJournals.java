/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.ManualJournalsCreateParams;
import jp.co.freee.accounting.models.ManualJournalsCreateResponse;
import jp.co.freee.accounting.models.ManualJournalsIndexResponse;
import jp.co.freee.accounting.models.ManualJournalsShowResponse;
import jp.co.freee.accounting.models.ManualJournalsUpdateParams;
import jp.co.freee.accounting.models.ManualJournalsUpdateResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ManualJournals.
 */
public interface ManualJournals {
    /**
     * 振替伝票一覧の取得.
     * 指定した事業所の振替伝票一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManualJournalsIndexResponse object if successful.
     */
    ManualJournalsIndexResponse list(int companyId);

    /**
     * 振替伝票一覧の取得.
     * 指定した事業所の振替伝票一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ManualJournalsIndexResponse> listAsync(int companyId, final ServiceCallback<ManualJournalsIndexResponse> serviceCallback);

    /**
     * 振替伝票一覧の取得.
     * 指定した事業所の振替伝票一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManualJournalsIndexResponse object
     */
    Observable<ManualJournalsIndexResponse> listAsync(int companyId);

    /**
     * 振替伝票一覧の取得.
     * 指定した事業所の振替伝票一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManualJournalsIndexResponse object
     */
    Observable<ServiceResponse<ManualJournalsIndexResponse>> listWithServiceResponseAsync(int companyId);
    /**
     * 振替伝票一覧の取得.
     * 指定した事業所の振替伝票一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param startIssueDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endIssueDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param entrySide 貸借で絞込 (貸方: credit, 借方: debit). Possible values include: 'credit', 'debit'
     * @param accountItemId 勘定科目IDで絞込
     * @param minAmount 金額で絞込：下限
     * @param maxAmount 金額で絞込：上限
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択の貸借行を絞り込めます）
     * @param partnerCode 取引先コードで絞込
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択の貸借行を絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択の貸借行を絞り込めます）
     * @param segment1TagId セグメント１IDで絞り込み（0を指定すると、セグメント１が未選択の貸借行を絞り込めます）
     * @param segment2TagId セグメント２IDで絞り込み（0を指定すると、セグメント２が未選択の貸借行を絞り込めます）
     * @param segment3TagId セグメント３IDで絞り込み（0を指定すると、セグメント３が未選択の貸借行を絞り込めます）
     * @param commentStatus コメント状態で絞込（自分宛のコメント: posted_with_mention, 自分宛のコメント-未解決: raised_with_mention, 自分宛のコメント-解決済: resolved_with_mention, コメントあり: posted, 未解決: raised, 解決済: resolved, コメントなし: none）. Possible values include: 'posted_with_mention', 'raised_with_mention', 'resolved_with_mention', 'posted', 'raised', 'resolved', 'none'
     * @param commentImportant 重要コメント付きの振替伝票を絞込
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param txnNumber 仕訳番号で絞込（事業所の仕訳番号形式が有効な場合のみ）
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 500)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManualJournalsIndexResponse object if successful.
     */
    ManualJournalsIndexResponse list(int companyId, String startIssueDate, String endIssueDate, String entrySide, Integer accountItemId, Integer minAmount, Integer maxAmount, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, Integer segment1TagId, Integer segment2TagId, Integer segment3TagId, String commentStatus, Boolean commentImportant, String adjustment, String txnNumber, Integer offset, Integer limit);

    /**
     * 振替伝票一覧の取得.
     * 指定した事業所の振替伝票一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param startIssueDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endIssueDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param entrySide 貸借で絞込 (貸方: credit, 借方: debit). Possible values include: 'credit', 'debit'
     * @param accountItemId 勘定科目IDで絞込
     * @param minAmount 金額で絞込：下限
     * @param maxAmount 金額で絞込：上限
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択の貸借行を絞り込めます）
     * @param partnerCode 取引先コードで絞込
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択の貸借行を絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択の貸借行を絞り込めます）
     * @param segment1TagId セグメント１IDで絞り込み（0を指定すると、セグメント１が未選択の貸借行を絞り込めます）
     * @param segment2TagId セグメント２IDで絞り込み（0を指定すると、セグメント２が未選択の貸借行を絞り込めます）
     * @param segment3TagId セグメント３IDで絞り込み（0を指定すると、セグメント３が未選択の貸借行を絞り込めます）
     * @param commentStatus コメント状態で絞込（自分宛のコメント: posted_with_mention, 自分宛のコメント-未解決: raised_with_mention, 自分宛のコメント-解決済: resolved_with_mention, コメントあり: posted, 未解決: raised, 解決済: resolved, コメントなし: none）. Possible values include: 'posted_with_mention', 'raised_with_mention', 'resolved_with_mention', 'posted', 'raised', 'resolved', 'none'
     * @param commentImportant 重要コメント付きの振替伝票を絞込
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param txnNumber 仕訳番号で絞込（事業所の仕訳番号形式が有効な場合のみ）
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 500)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ManualJournalsIndexResponse> listAsync(int companyId, String startIssueDate, String endIssueDate, String entrySide, Integer accountItemId, Integer minAmount, Integer maxAmount, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, Integer segment1TagId, Integer segment2TagId, Integer segment3TagId, String commentStatus, Boolean commentImportant, String adjustment, String txnNumber, Integer offset, Integer limit, final ServiceCallback<ManualJournalsIndexResponse> serviceCallback);

    /**
     * 振替伝票一覧の取得.
     * 指定した事業所の振替伝票一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param startIssueDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endIssueDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param entrySide 貸借で絞込 (貸方: credit, 借方: debit). Possible values include: 'credit', 'debit'
     * @param accountItemId 勘定科目IDで絞込
     * @param minAmount 金額で絞込：下限
     * @param maxAmount 金額で絞込：上限
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択の貸借行を絞り込めます）
     * @param partnerCode 取引先コードで絞込
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択の貸借行を絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択の貸借行を絞り込めます）
     * @param segment1TagId セグメント１IDで絞り込み（0を指定すると、セグメント１が未選択の貸借行を絞り込めます）
     * @param segment2TagId セグメント２IDで絞り込み（0を指定すると、セグメント２が未選択の貸借行を絞り込めます）
     * @param segment3TagId セグメント３IDで絞り込み（0を指定すると、セグメント３が未選択の貸借行を絞り込めます）
     * @param commentStatus コメント状態で絞込（自分宛のコメント: posted_with_mention, 自分宛のコメント-未解決: raised_with_mention, 自分宛のコメント-解決済: resolved_with_mention, コメントあり: posted, 未解決: raised, 解決済: resolved, コメントなし: none）. Possible values include: 'posted_with_mention', 'raised_with_mention', 'resolved_with_mention', 'posted', 'raised', 'resolved', 'none'
     * @param commentImportant 重要コメント付きの振替伝票を絞込
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param txnNumber 仕訳番号で絞込（事業所の仕訳番号形式が有効な場合のみ）
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 500)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManualJournalsIndexResponse object
     */
    Observable<ManualJournalsIndexResponse> listAsync(int companyId, String startIssueDate, String endIssueDate, String entrySide, Integer accountItemId, Integer minAmount, Integer maxAmount, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, Integer segment1TagId, Integer segment2TagId, Integer segment3TagId, String commentStatus, Boolean commentImportant, String adjustment, String txnNumber, Integer offset, Integer limit);

    /**
     * 振替伝票一覧の取得.
     * 指定した事業所の振替伝票一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param startIssueDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endIssueDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param entrySide 貸借で絞込 (貸方: credit, 借方: debit). Possible values include: 'credit', 'debit'
     * @param accountItemId 勘定科目IDで絞込
     * @param minAmount 金額で絞込：下限
     * @param maxAmount 金額で絞込：上限
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択の貸借行を絞り込めます）
     * @param partnerCode 取引先コードで絞込
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択の貸借行を絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択の貸借行を絞り込めます）
     * @param segment1TagId セグメント１IDで絞り込み（0を指定すると、セグメント１が未選択の貸借行を絞り込めます）
     * @param segment2TagId セグメント２IDで絞り込み（0を指定すると、セグメント２が未選択の貸借行を絞り込めます）
     * @param segment3TagId セグメント３IDで絞り込み（0を指定すると、セグメント３が未選択の貸借行を絞り込めます）
     * @param commentStatus コメント状態で絞込（自分宛のコメント: posted_with_mention, 自分宛のコメント-未解決: raised_with_mention, 自分宛のコメント-解決済: resolved_with_mention, コメントあり: posted, 未解決: raised, 解決済: resolved, コメントなし: none）. Possible values include: 'posted_with_mention', 'raised_with_mention', 'resolved_with_mention', 'posted', 'raised', 'resolved', 'none'
     * @param commentImportant 重要コメント付きの振替伝票を絞込
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param txnNumber 仕訳番号で絞込（事業所の仕訳番号形式が有効な場合のみ）
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 500)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManualJournalsIndexResponse object
     */
    Observable<ServiceResponse<ManualJournalsIndexResponse>> listWithServiceResponseAsync(int companyId, String startIssueDate, String endIssueDate, String entrySide, Integer accountItemId, Integer minAmount, Integer maxAmount, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, Integer segment1TagId, Integer segment2TagId, Integer segment3TagId, String commentStatus, Boolean commentImportant, String adjustment, String txnNumber, Integer offset, Integer limit);

    /**
     * 振替伝票の作成.
     * 指定した事業所の振替伝票を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManualJournalsCreateResponse object if successful.
     */
    ManualJournalsCreateResponse create();

    /**
     * 振替伝票の作成.
     * 指定した事業所の振替伝票を作成する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ManualJournalsCreateResponse> createAsync(final ServiceCallback<ManualJournalsCreateResponse> serviceCallback);

    /**
     * 振替伝票の作成.
     * 指定した事業所の振替伝票を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManualJournalsCreateResponse object
     */
    Observable<ManualJournalsCreateResponse> createAsync();

    /**
     * 振替伝票の作成.
     * 指定した事業所の振替伝票を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManualJournalsCreateResponse object
     */
    Observable<ServiceResponse<ManualJournalsCreateResponse>> createWithServiceResponseAsync();
    /**
     * 振替伝票の作成.
     * 指定した事業所の振替伝票を作成する.
     *
     * @param parameters 振替伝票の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManualJournalsCreateResponse object if successful.
     */
    ManualJournalsCreateResponse create(ManualJournalsCreateParams parameters);

    /**
     * 振替伝票の作成.
     * 指定した事業所の振替伝票を作成する.
     *
     * @param parameters 振替伝票の作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ManualJournalsCreateResponse> createAsync(ManualJournalsCreateParams parameters, final ServiceCallback<ManualJournalsCreateResponse> serviceCallback);

    /**
     * 振替伝票の作成.
     * 指定した事業所の振替伝票を作成する.
     *
     * @param parameters 振替伝票の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManualJournalsCreateResponse object
     */
    Observable<ManualJournalsCreateResponse> createAsync(ManualJournalsCreateParams parameters);

    /**
     * 振替伝票の作成.
     * 指定した事業所の振替伝票を作成する.
     *
     * @param parameters 振替伝票の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManualJournalsCreateResponse object
     */
    Observable<ServiceResponse<ManualJournalsCreateResponse>> createWithServiceResponseAsync(ManualJournalsCreateParams parameters);

    /**
     * 振替伝票の取得.
     * 指定した事業所の振替伝票を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManualJournalsShowResponse object if successful.
     */
    ManualJournalsShowResponse get(int companyId, int id);

    /**
     * 振替伝票の取得.
     * 指定した事業所の振替伝票を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ManualJournalsShowResponse> getAsync(int companyId, int id, final ServiceCallback<ManualJournalsShowResponse> serviceCallback);

    /**
     * 振替伝票の取得.
     * 指定した事業所の振替伝票を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManualJournalsShowResponse object
     */
    Observable<ManualJournalsShowResponse> getAsync(int companyId, int id);

    /**
     * 振替伝票の取得.
     * 指定した事業所の振替伝票を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManualJournalsShowResponse object
     */
    Observable<ServiceResponse<ManualJournalsShowResponse>> getWithServiceResponseAsync(int companyId, int id);

    /**
     * 振替伝票の更新.
     * 指定した事業所の振替伝票を更新する.
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManualJournalsUpdateResponse object if successful.
     */
    ManualJournalsUpdateResponse update(int id);

    /**
     * 振替伝票の更新.
     * 指定した事業所の振替伝票を更新する.
     *
     * @param id the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ManualJournalsUpdateResponse> updateAsync(int id, final ServiceCallback<ManualJournalsUpdateResponse> serviceCallback);

    /**
     * 振替伝票の更新.
     * 指定した事業所の振替伝票を更新する.
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManualJournalsUpdateResponse object
     */
    Observable<ManualJournalsUpdateResponse> updateAsync(int id);

    /**
     * 振替伝票の更新.
     * 指定した事業所の振替伝票を更新する.
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManualJournalsUpdateResponse object
     */
    Observable<ServiceResponse<ManualJournalsUpdateResponse>> updateWithServiceResponseAsync(int id);
    /**
     * 振替伝票の更新.
     * 指定した事業所の振替伝票を更新する.
     *
     * @param id the int value
     * @param parameters 振替伝票の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ManualJournalsUpdateResponse object if successful.
     */
    ManualJournalsUpdateResponse update(int id, ManualJournalsUpdateParams parameters);

    /**
     * 振替伝票の更新.
     * 指定した事業所の振替伝票を更新する.
     *
     * @param id the int value
     * @param parameters 振替伝票の更新
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ManualJournalsUpdateResponse> updateAsync(int id, ManualJournalsUpdateParams parameters, final ServiceCallback<ManualJournalsUpdateResponse> serviceCallback);

    /**
     * 振替伝票の更新.
     * 指定した事業所の振替伝票を更新する.
     *
     * @param id the int value
     * @param parameters 振替伝票の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManualJournalsUpdateResponse object
     */
    Observable<ManualJournalsUpdateResponse> updateAsync(int id, ManualJournalsUpdateParams parameters);

    /**
     * 振替伝票の更新.
     * 指定した事業所の振替伝票を更新する.
     *
     * @param id the int value
     * @param parameters 振替伝票の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ManualJournalsUpdateResponse object
     */
    Observable<ServiceResponse<ManualJournalsUpdateResponse>> updateWithServiceResponseAsync(int id, ManualJournalsUpdateParams parameters);

    /**
     * 振替伝票の削除.
     * 指定した事業所の振替伝票を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void destroy(int id, int companyId);

    /**
     * 振替伝票の削除.
     * 指定した事業所の振替伝票を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> destroyAsync(int id, int companyId, final ServiceCallback<Void> serviceCallback);

    /**
     * 振替伝票の削除.
     * 指定した事業所の振替伝票を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> destroyAsync(int id, int companyId);

    /**
     * 振替伝票の削除.
     * 指定した事業所の振替伝票を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> destroyWithServiceResponseAsync(int id, int companyId);

}
