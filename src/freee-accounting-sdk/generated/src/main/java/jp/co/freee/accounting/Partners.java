/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.PartnerCodeParams;
import jp.co.freee.accounting.models.PartnerCreateParams;
import jp.co.freee.accounting.models.PartnersIndexResponse;
import jp.co.freee.accounting.models.PartnersResponse;
import jp.co.freee.accounting.models.PartnerUpdateParams;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Partners.
 */
public interface Partners {
    /**
     * 取引先一覧の取得.
     * 指定した事業所の取引先一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnersIndexResponse object if successful.
     */
    PartnersIndexResponse list(int companyId);

    /**
     * 取引先一覧の取得.
     * 指定した事業所の取引先一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PartnersIndexResponse> listAsync(int companyId, final ServiceCallback<PartnersIndexResponse> serviceCallback);

    /**
     * 取引先一覧の取得.
     * 指定した事業所の取引先一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnersIndexResponse object
     */
    Observable<PartnersIndexResponse> listAsync(int companyId);

    /**
     * 取引先一覧の取得.
     * 指定した事業所の取引先一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnersIndexResponse object
     */
    Observable<ServiceResponse<PartnersIndexResponse>> listWithServiceResponseAsync(int companyId);
    /**
     * 取引先一覧の取得.
     * 指定した事業所の取引先一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 50, 最大: 3000)
     * @param keyword 検索キーワード：取引先名・正式名称・カナ名称に対するあいまい検索で一致、またはショートカットキー1・2のいずれかに完全一致
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnersIndexResponse object if successful.
     */
    PartnersIndexResponse list(int companyId, Integer offset, Integer limit, String keyword);

    /**
     * 取引先一覧の取得.
     * 指定した事業所の取引先一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 50, 最大: 3000)
     * @param keyword 検索キーワード：取引先名・正式名称・カナ名称に対するあいまい検索で一致、またはショートカットキー1・2のいずれかに完全一致
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PartnersIndexResponse> listAsync(int companyId, Integer offset, Integer limit, String keyword, final ServiceCallback<PartnersIndexResponse> serviceCallback);

    /**
     * 取引先一覧の取得.
     * 指定した事業所の取引先一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 50, 最大: 3000)
     * @param keyword 検索キーワード：取引先名・正式名称・カナ名称に対するあいまい検索で一致、またはショートカットキー1・2のいずれかに完全一致
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnersIndexResponse object
     */
    Observable<PartnersIndexResponse> listAsync(int companyId, Integer offset, Integer limit, String keyword);

    /**
     * 取引先一覧の取得.
     * 指定した事業所の取引先一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 50, 最大: 3000)
     * @param keyword 検索キーワード：取引先名・正式名称・カナ名称に対するあいまい検索で一致、またはショートカットキー1・2のいずれかに完全一致
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnersIndexResponse object
     */
    Observable<ServiceResponse<PartnersIndexResponse>> listWithServiceResponseAsync(int companyId, Integer offset, Integer limit, String keyword);

    /**
     * 取引先の作成.
     * 指定した事業所の取引先を作成する.
     *
     * @param parameters 取引先の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnersResponse object if successful.
     */
    PartnersResponse create(PartnerCreateParams parameters);

    /**
     * 取引先の作成.
     * 指定した事業所の取引先を作成する.
     *
     * @param parameters 取引先の作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PartnersResponse> createAsync(PartnerCreateParams parameters, final ServiceCallback<PartnersResponse> serviceCallback);

    /**
     * 取引先の作成.
     * 指定した事業所の取引先を作成する.
     *
     * @param parameters 取引先の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnersResponse object
     */
    Observable<PartnersResponse> createAsync(PartnerCreateParams parameters);

    /**
     * 取引先の作成.
     * 指定した事業所の取引先を作成する.
     *
     * @param parameters 取引先の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnersResponse object
     */
    Observable<ServiceResponse<PartnersResponse>> createWithServiceResponseAsync(PartnerCreateParams parameters);

    /**
     * 取引先の更新.
     * 指定した取引先の情報を更新する.
     *
     * @param id 取引先ID
     * @param parameters 取引先の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnersResponse object if successful.
     */
    PartnersResponse update(int id, PartnerUpdateParams parameters);

    /**
     * 取引先の更新.
     * 指定した取引先の情報を更新する.
     *
     * @param id 取引先ID
     * @param parameters 取引先の更新
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PartnersResponse> updateAsync(int id, PartnerUpdateParams parameters, final ServiceCallback<PartnersResponse> serviceCallback);

    /**
     * 取引先の更新.
     * 指定した取引先の情報を更新する.
     *
     * @param id 取引先ID
     * @param parameters 取引先の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnersResponse object
     */
    Observable<PartnersResponse> updateAsync(int id, PartnerUpdateParams parameters);

    /**
     * 取引先の更新.
     * 指定した取引先の情報を更新する.
     *
     * @param id 取引先ID
     * @param parameters 取引先の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnersResponse object
     */
    Observable<ServiceResponse<PartnersResponse>> updateWithServiceResponseAsync(int id, PartnerUpdateParams parameters);

    /**
     * 取引先の更新.
     * 取引先コードをキーに、指定した取引先の情報を更新する.
     *
     * @param code 取引先コード
     * @param parameters 取引先の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnersResponse object if successful.
     */
    PartnersResponse updateByCode(String code, PartnerCodeParams parameters);

    /**
     * 取引先の更新.
     * 取引先コードをキーに、指定した取引先の情報を更新する.
     *
     * @param code 取引先コード
     * @param parameters 取引先の更新
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PartnersResponse> updateByCodeAsync(String code, PartnerCodeParams parameters, final ServiceCallback<PartnersResponse> serviceCallback);

    /**
     * 取引先の更新.
     * 取引先コードをキーに、指定した取引先の情報を更新する.
     *
     * @param code 取引先コード
     * @param parameters 取引先の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnersResponse object
     */
    Observable<PartnersResponse> updateByCodeAsync(String code, PartnerCodeParams parameters);

    /**
     * 取引先の更新.
     * 取引先コードをキーに、指定した取引先の情報を更新する.
     *
     * @param code 取引先コード
     * @param parameters 取引先の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnersResponse object
     */
    Observable<ServiceResponse<PartnersResponse>> updateByCodeWithServiceResponseAsync(String code, PartnerCodeParams parameters);

}
