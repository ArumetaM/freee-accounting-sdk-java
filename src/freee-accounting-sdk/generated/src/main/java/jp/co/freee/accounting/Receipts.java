/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.ReceiptCreateResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Receipts.
 */
public interface Receipts {
    /**
     * ファイルボックス 証憑ファイルアップロード.
     * ファイルボックスに証憑ファイルをアップロードする.
     *
     * @param companyId 事業所ID
     * @param receipt 証憑ファイル
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReceiptCreateResponse object if successful.
     */
    ReceiptCreateResponse create(int companyId, byte[] receipt);

    /**
     * ファイルボックス 証憑ファイルアップロード.
     * ファイルボックスに証憑ファイルをアップロードする.
     *
     * @param companyId 事業所ID
     * @param receipt 証憑ファイル
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ReceiptCreateResponse> createAsync(int companyId, byte[] receipt, final ServiceCallback<ReceiptCreateResponse> serviceCallback);

    /**
     * ファイルボックス 証憑ファイルアップロード.
     * ファイルボックスに証憑ファイルをアップロードする.
     *
     * @param companyId 事業所ID
     * @param receipt 証憑ファイル
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReceiptCreateResponse object
     */
    Observable<ReceiptCreateResponse> createAsync(int companyId, byte[] receipt);

    /**
     * ファイルボックス 証憑ファイルアップロード.
     * ファイルボックスに証憑ファイルをアップロードする.
     *
     * @param companyId 事業所ID
     * @param receipt 証憑ファイル
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReceiptCreateResponse object
     */
    Observable<ServiceResponse<ReceiptCreateResponse>> createWithServiceResponseAsync(int companyId, byte[] receipt);
    /**
     * ファイルボックス 証憑ファイルアップロード.
     * ファイルボックスに証憑ファイルをアップロードする.
     *
     * @param companyId 事業所ID
     * @param receipt 証憑ファイル
     * @param description メモ (255文字以内)
     * @param issueDate 取引日 (yyyy-mm-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReceiptCreateResponse object if successful.
     */
    ReceiptCreateResponse create(int companyId, byte[] receipt, String description, String issueDate);

    /**
     * ファイルボックス 証憑ファイルアップロード.
     * ファイルボックスに証憑ファイルをアップロードする.
     *
     * @param companyId 事業所ID
     * @param receipt 証憑ファイル
     * @param description メモ (255文字以内)
     * @param issueDate 取引日 (yyyy-mm-dd)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ReceiptCreateResponse> createAsync(int companyId, byte[] receipt, String description, String issueDate, final ServiceCallback<ReceiptCreateResponse> serviceCallback);

    /**
     * ファイルボックス 証憑ファイルアップロード.
     * ファイルボックスに証憑ファイルをアップロードする.
     *
     * @param companyId 事業所ID
     * @param receipt 証憑ファイル
     * @param description メモ (255文字以内)
     * @param issueDate 取引日 (yyyy-mm-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReceiptCreateResponse object
     */
    Observable<ReceiptCreateResponse> createAsync(int companyId, byte[] receipt, String description, String issueDate);

    /**
     * ファイルボックス 証憑ファイルアップロード.
     * ファイルボックスに証憑ファイルをアップロードする.
     *
     * @param companyId 事業所ID
     * @param receipt 証憑ファイル
     * @param description メモ (255文字以内)
     * @param issueDate 取引日 (yyyy-mm-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReceiptCreateResponse object
     */
    Observable<ServiceResponse<ReceiptCreateResponse>> createWithServiceResponseAsync(int companyId, byte[] receipt, String description, String issueDate);

}
