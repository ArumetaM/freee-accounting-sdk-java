/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.RenewsCreateParams;
import jp.co.freee.accounting.models.RenewsResponse;
import jp.co.freee.accounting.models.RenewsUpdateParams;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Renews.
 */
public interface Renews {
    /**
     * 取引（収入／支出）に対する+更新の作成.
     * 指定した事業所の取引（収入／支出）の+更新を作成する.
     *
     * @param id 取引ID
     * @param parameters 取引（収入／支出）に対する+更新の情報
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RenewsResponse object if successful.
     */
    RenewsResponse createDeal(int id, RenewsCreateParams parameters);

    /**
     * 取引（収入／支出）に対する+更新の作成.
     * 指定した事業所の取引（収入／支出）の+更新を作成する.
     *
     * @param id 取引ID
     * @param parameters 取引（収入／支出）に対する+更新の情報
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<RenewsResponse> createDealAsync(int id, RenewsCreateParams parameters, final ServiceCallback<RenewsResponse> serviceCallback);

    /**
     * 取引（収入／支出）に対する+更新の作成.
     * 指定した事業所の取引（収入／支出）の+更新を作成する.
     *
     * @param id 取引ID
     * @param parameters 取引（収入／支出）に対する+更新の情報
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RenewsResponse object
     */
    Observable<RenewsResponse> createDealAsync(int id, RenewsCreateParams parameters);

    /**
     * 取引（収入／支出）に対する+更新の作成.
     * 指定した事業所の取引（収入／支出）の+更新を作成する.
     *
     * @param id 取引ID
     * @param parameters 取引（収入／支出）に対する+更新の情報
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RenewsResponse object
     */
    Observable<ServiceResponse<RenewsResponse>> createDealWithServiceResponseAsync(int id, RenewsCreateParams parameters);

    /**
     * 取引（収入／支出）の+更新の更新.
     * 指定した事業所の取引（収入／支出）の+更新を更新する.
     *
     * @param id 取引ID
     * @param renewId +更新ID
     * @param parameters +更新の更新情報
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RenewsResponse object if successful.
     */
    RenewsResponse updateDeal(int id, int renewId, RenewsUpdateParams parameters);

    /**
     * 取引（収入／支出）の+更新の更新.
     * 指定した事業所の取引（収入／支出）の+更新を更新する.
     *
     * @param id 取引ID
     * @param renewId +更新ID
     * @param parameters +更新の更新情報
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<RenewsResponse> updateDealAsync(int id, int renewId, RenewsUpdateParams parameters, final ServiceCallback<RenewsResponse> serviceCallback);

    /**
     * 取引（収入／支出）の+更新の更新.
     * 指定した事業所の取引（収入／支出）の+更新を更新する.
     *
     * @param id 取引ID
     * @param renewId +更新ID
     * @param parameters +更新の更新情報
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RenewsResponse object
     */
    Observable<RenewsResponse> updateDealAsync(int id, int renewId, RenewsUpdateParams parameters);

    /**
     * 取引（収入／支出）の+更新の更新.
     * 指定した事業所の取引（収入／支出）の+更新を更新する.
     *
     * @param id 取引ID
     * @param renewId +更新ID
     * @param parameters +更新の更新情報
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RenewsResponse object
     */
    Observable<ServiceResponse<RenewsResponse>> updateDealWithServiceResponseAsync(int id, int renewId, RenewsUpdateParams parameters);

    /**
     * 取引（収入／支出）の+更新の削除.
     * 指定した事業所の取引（収入／支出）の+更新を削除する.
     *
     * @param id 取引ID
     * @param renewId +更新ID
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RenewsResponse object if successful.
     */
    RenewsResponse deleteDeal(int id, int renewId, int companyId);

    /**
     * 取引（収入／支出）の+更新の削除.
     * 指定した事業所の取引（収入／支出）の+更新を削除する.
     *
     * @param id 取引ID
     * @param renewId +更新ID
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<RenewsResponse> deleteDealAsync(int id, int renewId, int companyId, final ServiceCallback<RenewsResponse> serviceCallback);

    /**
     * 取引（収入／支出）の+更新の削除.
     * 指定した事業所の取引（収入／支出）の+更新を削除する.
     *
     * @param id 取引ID
     * @param renewId +更新ID
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RenewsResponse object
     */
    Observable<RenewsResponse> deleteDealAsync(int id, int renewId, int companyId);

    /**
     * 取引（収入／支出）の+更新の削除.
     * 指定した事業所の取引（収入／支出）の+更新を削除する.
     *
     * @param id 取引ID
     * @param renewId +更新ID
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RenewsResponse object
     */
    Observable<ServiceResponse<RenewsResponse>> deleteDealWithServiceResponseAsync(int id, int renewId, int companyId);

}
