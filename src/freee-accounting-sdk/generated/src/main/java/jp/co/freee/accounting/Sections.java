/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.SectionParams;
import jp.co.freee.accounting.models.SectionsCreateResponse;
import jp.co.freee.accounting.models.SectionsIndexResponse;
import jp.co.freee.accounting.models.SectionsUpdateResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Sections.
 */
public interface Sections {
    /**
     * 部門一覧の取得.
     * 指定した事業所の部門一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SectionsIndexResponse object if successful.
     */
    SectionsIndexResponse list(int companyId);

    /**
     * 部門一覧の取得.
     * 指定した事業所の部門一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SectionsIndexResponse> listAsync(int companyId, final ServiceCallback<SectionsIndexResponse> serviceCallback);

    /**
     * 部門一覧の取得.
     * 指定した事業所の部門一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsIndexResponse object
     */
    Observable<SectionsIndexResponse> listAsync(int companyId);

    /**
     * 部門一覧の取得.
     * 指定した事業所の部門一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsIndexResponse object
     */
    Observable<ServiceResponse<SectionsIndexResponse>> listWithServiceResponseAsync(int companyId);

    /**
     * 部門の作成.
     * 指定した事業所の部門を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SectionsCreateResponse object if successful.
     */
    SectionsCreateResponse create();

    /**
     * 部門の作成.
     * 指定した事業所の部門を作成する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SectionsCreateResponse> createAsync(final ServiceCallback<SectionsCreateResponse> serviceCallback);

    /**
     * 部門の作成.
     * 指定した事業所の部門を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsCreateResponse object
     */
    Observable<SectionsCreateResponse> createAsync();

    /**
     * 部門の作成.
     * 指定した事業所の部門を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsCreateResponse object
     */
    Observable<ServiceResponse<SectionsCreateResponse>> createWithServiceResponseAsync();
    /**
     * 部門の作成.
     * 指定した事業所の部門を作成する.
     *
     * @param parameters 部門の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SectionsCreateResponse object if successful.
     */
    SectionsCreateResponse create(SectionParams parameters);

    /**
     * 部門の作成.
     * 指定した事業所の部門を作成する.
     *
     * @param parameters 部門の作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SectionsCreateResponse> createAsync(SectionParams parameters, final ServiceCallback<SectionsCreateResponse> serviceCallback);

    /**
     * 部門の作成.
     * 指定した事業所の部門を作成する.
     *
     * @param parameters 部門の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsCreateResponse object
     */
    Observable<SectionsCreateResponse> createAsync(SectionParams parameters);

    /**
     * 部門の作成.
     * 指定した事業所の部門を作成する.
     *
     * @param parameters 部門の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsCreateResponse object
     */
    Observable<ServiceResponse<SectionsCreateResponse>> createWithServiceResponseAsync(SectionParams parameters);

    /**
     * 部門の更新.
     * 指定した事業所の部門を更新する.
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SectionsUpdateResponse object if successful.
     */
    SectionsUpdateResponse update(int id);

    /**
     * 部門の更新.
     * 指定した事業所の部門を更新する.
     *
     * @param id the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SectionsUpdateResponse> updateAsync(int id, final ServiceCallback<SectionsUpdateResponse> serviceCallback);

    /**
     * 部門の更新.
     * 指定した事業所の部門を更新する.
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsUpdateResponse object
     */
    Observable<SectionsUpdateResponse> updateAsync(int id);

    /**
     * 部門の更新.
     * 指定した事業所の部門を更新する.
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsUpdateResponse object
     */
    Observable<ServiceResponse<SectionsUpdateResponse>> updateWithServiceResponseAsync(int id);
    /**
     * 部門の更新.
     * 指定した事業所の部門を更新する.
     *
     * @param id the int value
     * @param parameters 部門の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SectionsUpdateResponse object if successful.
     */
    SectionsUpdateResponse update(int id, SectionParams parameters);

    /**
     * 部門の更新.
     * 指定した事業所の部門を更新する.
     *
     * @param id the int value
     * @param parameters 部門の更新
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SectionsUpdateResponse> updateAsync(int id, SectionParams parameters, final ServiceCallback<SectionsUpdateResponse> serviceCallback);

    /**
     * 部門の更新.
     * 指定した事業所の部門を更新する.
     *
     * @param id the int value
     * @param parameters 部門の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsUpdateResponse object
     */
    Observable<SectionsUpdateResponse> updateAsync(int id, SectionParams parameters);

    /**
     * 部門の更新.
     * 指定した事業所の部門を更新する.
     *
     * @param id the int value
     * @param parameters 部門の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsUpdateResponse object
     */
    Observable<ServiceResponse<SectionsUpdateResponse>> updateWithServiceResponseAsync(int id, SectionParams parameters);

    /**
     * 部門の削除.
     * 指定した事業所の部門を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void destroy(int id, int companyId);

    /**
     * 部門の削除.
     * 指定した事業所の部門を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> destroyAsync(int id, int companyId, final ServiceCallback<Void> serviceCallback);

    /**
     * 部門の削除.
     * 指定した事業所の部門を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> destroyAsync(int id, int companyId);

    /**
     * 部門の削除.
     * 指定した事業所の部門を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> destroyWithServiceResponseAsync(int id, int companyId);

}
