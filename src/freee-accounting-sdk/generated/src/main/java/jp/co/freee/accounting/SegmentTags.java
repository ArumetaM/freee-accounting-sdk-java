/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.SegmentTagParams;
import jp.co.freee.accounting.models.SegmentTagsIndexResponse;
import jp.co.freee.accounting.models.SegmentTagsResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in SegmentTags.
 */
public interface SegmentTags {
    /**
     * セグメントタグ一覧の取得.
     * 指定した事業所のセグメントタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param segmentId セグメントID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SegmentTagsIndexResponse object if successful.
     */
    SegmentTagsIndexResponse list(int companyId, int segmentId);

    /**
     * セグメントタグ一覧の取得.
     * 指定した事業所のセグメントタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param segmentId セグメントID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SegmentTagsIndexResponse> listAsync(int companyId, int segmentId, final ServiceCallback<SegmentTagsIndexResponse> serviceCallback);

    /**
     * セグメントタグ一覧の取得.
     * 指定した事業所のセグメントタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param segmentId セグメントID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SegmentTagsIndexResponse object
     */
    Observable<SegmentTagsIndexResponse> listAsync(int companyId, int segmentId);

    /**
     * セグメントタグ一覧の取得.
     * 指定した事業所のセグメントタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param segmentId セグメントID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SegmentTagsIndexResponse object
     */
    Observable<ServiceResponse<SegmentTagsIndexResponse>> listWithServiceResponseAsync(int companyId, int segmentId);
    /**
     * セグメントタグ一覧の取得.
     * 指定した事業所のセグメントタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param segmentId セグメントID
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 500)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SegmentTagsIndexResponse object if successful.
     */
    SegmentTagsIndexResponse list(int companyId, int segmentId, Integer offset, Integer limit);

    /**
     * セグメントタグ一覧の取得.
     * 指定した事業所のセグメントタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param segmentId セグメントID
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 500)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SegmentTagsIndexResponse> listAsync(int companyId, int segmentId, Integer offset, Integer limit, final ServiceCallback<SegmentTagsIndexResponse> serviceCallback);

    /**
     * セグメントタグ一覧の取得.
     * 指定した事業所のセグメントタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param segmentId セグメントID
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 500)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SegmentTagsIndexResponse object
     */
    Observable<SegmentTagsIndexResponse> listAsync(int companyId, int segmentId, Integer offset, Integer limit);

    /**
     * セグメントタグ一覧の取得.
     * 指定した事業所のセグメントタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param segmentId セグメントID
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 500)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SegmentTagsIndexResponse object
     */
    Observable<ServiceResponse<SegmentTagsIndexResponse>> listWithServiceResponseAsync(int companyId, int segmentId, Integer offset, Integer limit);

    /**
     * セグメントの作成.
     * 指定した事業所のセグメントタグを作成する.
     *
     * @param parameters セグメントタグの作成
     * @param segmentId セグメントID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SegmentTagsResponse object if successful.
     */
    SegmentTagsResponse create(SegmentTagParams parameters, int segmentId);

    /**
     * セグメントの作成.
     * 指定した事業所のセグメントタグを作成する.
     *
     * @param parameters セグメントタグの作成
     * @param segmentId セグメントID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SegmentTagsResponse> createAsync(SegmentTagParams parameters, int segmentId, final ServiceCallback<SegmentTagsResponse> serviceCallback);

    /**
     * セグメントの作成.
     * 指定した事業所のセグメントタグを作成する.
     *
     * @param parameters セグメントタグの作成
     * @param segmentId セグメントID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SegmentTagsResponse object
     */
    Observable<SegmentTagsResponse> createAsync(SegmentTagParams parameters, int segmentId);

    /**
     * セグメントの作成.
     * 指定した事業所のセグメントタグを作成する.
     *
     * @param parameters セグメントタグの作成
     * @param segmentId セグメントID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SegmentTagsResponse object
     */
    Observable<ServiceResponse<SegmentTagsResponse>> createWithServiceResponseAsync(SegmentTagParams parameters, int segmentId);

    /**
     * セグメントタグの更新.
     * 指定した事業所のセグメントタグを更新する.
     *
     * @param parameters セグメントタグの作成
     * @param segmentId セグメントID
     * @param id セグメントタグID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SegmentTagsResponse object if successful.
     */
    SegmentTagsResponse update(SegmentTagParams parameters, int segmentId, int id);

    /**
     * セグメントタグの更新.
     * 指定した事業所のセグメントタグを更新する.
     *
     * @param parameters セグメントタグの作成
     * @param segmentId セグメントID
     * @param id セグメントタグID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SegmentTagsResponse> updateAsync(SegmentTagParams parameters, int segmentId, int id, final ServiceCallback<SegmentTagsResponse> serviceCallback);

    /**
     * セグメントタグの更新.
     * 指定した事業所のセグメントタグを更新する.
     *
     * @param parameters セグメントタグの作成
     * @param segmentId セグメントID
     * @param id セグメントタグID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SegmentTagsResponse object
     */
    Observable<SegmentTagsResponse> updateAsync(SegmentTagParams parameters, int segmentId, int id);

    /**
     * セグメントタグの更新.
     * 指定した事業所のセグメントタグを更新する.
     *
     * @param parameters セグメントタグの作成
     * @param segmentId セグメントID
     * @param id セグメントタグID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SegmentTagsResponse object
     */
    Observable<ServiceResponse<SegmentTagsResponse>> updateWithServiceResponseAsync(SegmentTagParams parameters, int segmentId, int id);

    /**
     * セグメントタグの削除.
     * 指定した事業所のセグメントタグを削除する.
     *
     * @param segmentId セグメントID
     * @param id セグメントタグID
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void destroySegmentsTag(int segmentId, int id, int companyId);

    /**
     * セグメントタグの削除.
     * 指定した事業所のセグメントタグを削除する.
     *
     * @param segmentId セグメントID
     * @param id セグメントタグID
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> destroySegmentsTagAsync(int segmentId, int id, int companyId, final ServiceCallback<Void> serviceCallback);

    /**
     * セグメントタグの削除.
     * 指定した事業所のセグメントタグを削除する.
     *
     * @param segmentId セグメントID
     * @param id セグメントタグID
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> destroySegmentsTagAsync(int segmentId, int id, int companyId);

    /**
     * セグメントタグの削除.
     * 指定した事業所のセグメントタグを削除する.
     *
     * @param segmentId セグメントID
     * @param id セグメントタグID
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> destroySegmentsTagWithServiceResponseAsync(int segmentId, int id, int companyId);

}
