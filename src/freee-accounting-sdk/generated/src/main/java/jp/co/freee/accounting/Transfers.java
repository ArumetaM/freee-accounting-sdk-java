/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.Parameter;
import jp.co.freee.accounting.models.TransfersCreateResponse;
import jp.co.freee.accounting.models.TransfersIndexResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Transfers.
 */
public interface Transfers {
    /**
     * 取引（振替）一覧の取得.
     * 指定した事業所の取引（振替）一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransfersIndexResponse object if successful.
     */
    TransfersIndexResponse list(int companyId);

    /**
     * 取引（振替）一覧の取得.
     * 指定した事業所の取引（振替）一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransfersIndexResponse> listAsync(int companyId, final ServiceCallback<TransfersIndexResponse> serviceCallback);

    /**
     * 取引（振替）一覧の取得.
     * 指定した事業所の取引（振替）一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransfersIndexResponse object
     */
    Observable<TransfersIndexResponse> listAsync(int companyId);

    /**
     * 取引（振替）一覧の取得.
     * 指定した事業所の取引（振替）一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransfersIndexResponse object
     */
    Observable<ServiceResponse<TransfersIndexResponse>> listWithServiceResponseAsync(int companyId);
    /**
     * 取引（振替）一覧の取得.
     * 指定した事業所の取引（振替）一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param startDate 振替日で絞込：開始日 (yyyy-mm-dd)
     * @param endDate 振替日で絞込：終了日 (yyyy-mm-dd)
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransfersIndexResponse object if successful.
     */
    TransfersIndexResponse list(int companyId, String startDate, String endDate, Integer offset, Integer limit);

    /**
     * 取引（振替）一覧の取得.
     * 指定した事業所の取引（振替）一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param startDate 振替日で絞込：開始日 (yyyy-mm-dd)
     * @param endDate 振替日で絞込：終了日 (yyyy-mm-dd)
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransfersIndexResponse> listAsync(int companyId, String startDate, String endDate, Integer offset, Integer limit, final ServiceCallback<TransfersIndexResponse> serviceCallback);

    /**
     * 取引（振替）一覧の取得.
     * 指定した事業所の取引（振替）一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param startDate 振替日で絞込：開始日 (yyyy-mm-dd)
     * @param endDate 振替日で絞込：終了日 (yyyy-mm-dd)
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransfersIndexResponse object
     */
    Observable<TransfersIndexResponse> listAsync(int companyId, String startDate, String endDate, Integer offset, Integer limit);

    /**
     * 取引（振替）一覧の取得.
     * 指定した事業所の取引（振替）一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param startDate 振替日で絞込：開始日 (yyyy-mm-dd)
     * @param endDate 振替日で絞込：終了日 (yyyy-mm-dd)
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransfersIndexResponse object
     */
    Observable<ServiceResponse<TransfersIndexResponse>> listWithServiceResponseAsync(int companyId, String startDate, String endDate, Integer offset, Integer limit);

    /**
     * 取引（振替）の作成.
     * 指定した事業所の取引（振替）を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransfersCreateResponse object if successful.
     */
    TransfersCreateResponse create();

    /**
     * 取引（振替）の作成.
     * 指定した事業所の取引（振替）を作成する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransfersCreateResponse> createAsync(final ServiceCallback<TransfersCreateResponse> serviceCallback);

    /**
     * 取引（振替）の作成.
     * 指定した事業所の取引（振替）を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransfersCreateResponse object
     */
    Observable<TransfersCreateResponse> createAsync();

    /**
     * 取引（振替）の作成.
     * 指定した事業所の取引（振替）を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransfersCreateResponse object
     */
    Observable<ServiceResponse<TransfersCreateResponse>> createWithServiceResponseAsync();
    /**
     * 取引（振替）の作成.
     * 指定した事業所の取引（振替）を作成する.
     *
     * @param parameter 取引（振替）の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransfersCreateResponse object if successful.
     */
    TransfersCreateResponse create(Parameter parameter);

    /**
     * 取引（振替）の作成.
     * 指定した事業所の取引（振替）を作成する.
     *
     * @param parameter 取引（振替）の作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransfersCreateResponse> createAsync(Parameter parameter, final ServiceCallback<TransfersCreateResponse> serviceCallback);

    /**
     * 取引（振替）の作成.
     * 指定した事業所の取引（振替）を作成する.
     *
     * @param parameter 取引（振替）の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransfersCreateResponse object
     */
    Observable<TransfersCreateResponse> createAsync(Parameter parameter);

    /**
     * 取引（振替）の作成.
     * 指定した事業所の取引（振替）を作成する.
     *
     * @param parameter 取引（振替）の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransfersCreateResponse object
     */
    Observable<ServiceResponse<TransfersCreateResponse>> createWithServiceResponseAsync(Parameter parameter);

}
