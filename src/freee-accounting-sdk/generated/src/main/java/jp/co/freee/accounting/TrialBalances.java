/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.TrialBsResponse;
import jp.co.freee.accounting.models.TrialBsThreeYearsResponse;
import jp.co.freee.accounting.models.TrialBsTwoYearsResponse;
import jp.co.freee.accounting.models.TrialPlResponse;
import jp.co.freee.accounting.models.TrialPlSectionsResponse;
import jp.co.freee.accounting.models.TrialPlThreeYearsResponse;
import jp.co.freee.accounting.models.TrialPlTwoYearsResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in TrialBalances.
 */
public interface TrialBalances {
    /**
     * 貸借対照表の取得.
     * 指定した事業所の貸借対照表を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialBsResponse object if successful.
     */
    TrialBsResponse getTrialBs(int companyId);

    /**
     * 貸借対照表の取得.
     * 指定した事業所の貸借対照表を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrialBsResponse> getTrialBsAsync(int companyId, final ServiceCallback<TrialBsResponse> serviceCallback);

    /**
     * 貸借対照表の取得.
     * 指定した事業所の貸借対照表を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsResponse object
     */
    Observable<TrialBsResponse> getTrialBsAsync(int companyId);

    /**
     * 貸借対照表の取得.
     * 指定した事業所の貸借対照表を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsResponse object
     */
    Observable<ServiceResponse<TrialBsResponse>> getTrialBsWithServiceResponseAsync(int companyId);
    /**
     * 貸借対照表の取得.
     * 指定した事業所の貸借対照表を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialBsResponse object if successful.
     */
    TrialBsResponse getTrialBs(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment);

    /**
     * 貸借対照表の取得.
     * 指定した事業所の貸借対照表を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrialBsResponse> getTrialBsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment, final ServiceCallback<TrialBsResponse> serviceCallback);

    /**
     * 貸借対照表の取得.
     * 指定した事業所の貸借対照表を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsResponse object
     */
    Observable<TrialBsResponse> getTrialBsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment);

    /**
     * 貸借対照表の取得.
     * 指定した事業所の貸借対照表を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsResponse object
     */
    Observable<ServiceResponse<TrialBsResponse>> getTrialBsWithServiceResponseAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment);

    /**
     * 貸借対照表(前年比較)の取得.
     * 指定した事業所の貸借対照表(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialBsTwoYearsResponse object if successful.
     */
    TrialBsTwoYearsResponse getTrialBsTwoYears(int companyId);

    /**
     * 貸借対照表(前年比較)の取得.
     * 指定した事業所の貸借対照表(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrialBsTwoYearsResponse> getTrialBsTwoYearsAsync(int companyId, final ServiceCallback<TrialBsTwoYearsResponse> serviceCallback);

    /**
     * 貸借対照表(前年比較)の取得.
     * 指定した事業所の貸借対照表(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsTwoYearsResponse object
     */
    Observable<TrialBsTwoYearsResponse> getTrialBsTwoYearsAsync(int companyId);

    /**
     * 貸借対照表(前年比較)の取得.
     * 指定した事業所の貸借対照表(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsTwoYearsResponse object
     */
    Observable<ServiceResponse<TrialBsTwoYearsResponse>> getTrialBsTwoYearsWithServiceResponseAsync(int companyId);
    /**
     * 貸借対照表(前年比較)の取得.
     * 指定した事業所の貸借対照表(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialBsTwoYearsResponse object if successful.
     */
    TrialBsTwoYearsResponse getTrialBsTwoYears(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment);

    /**
     * 貸借対照表(前年比較)の取得.
     * 指定した事業所の貸借対照表(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrialBsTwoYearsResponse> getTrialBsTwoYearsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment, final ServiceCallback<TrialBsTwoYearsResponse> serviceCallback);

    /**
     * 貸借対照表(前年比較)の取得.
     * 指定した事業所の貸借対照表(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsTwoYearsResponse object
     */
    Observable<TrialBsTwoYearsResponse> getTrialBsTwoYearsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment);

    /**
     * 貸借対照表(前年比較)の取得.
     * 指定した事業所の貸借対照表(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsTwoYearsResponse object
     */
    Observable<ServiceResponse<TrialBsTwoYearsResponse>> getTrialBsTwoYearsWithServiceResponseAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment);

    /**
     * 貸借対照表(３期間比較)の取得.
     * 指定した事業所の貸借対照表(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialBsThreeYearsResponse object if successful.
     */
    TrialBsThreeYearsResponse getTrialBsThreeYears(int companyId);

    /**
     * 貸借対照表(３期間比較)の取得.
     * 指定した事業所の貸借対照表(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrialBsThreeYearsResponse> getTrialBsThreeYearsAsync(int companyId, final ServiceCallback<TrialBsThreeYearsResponse> serviceCallback);

    /**
     * 貸借対照表(３期間比較)の取得.
     * 指定した事業所の貸借対照表(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsThreeYearsResponse object
     */
    Observable<TrialBsThreeYearsResponse> getTrialBsThreeYearsAsync(int companyId);

    /**
     * 貸借対照表(３期間比較)の取得.
     * 指定した事業所の貸借対照表(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsThreeYearsResponse object
     */
    Observable<ServiceResponse<TrialBsThreeYearsResponse>> getTrialBsThreeYearsWithServiceResponseAsync(int companyId);
    /**
     * 貸借対照表(３期間比較)の取得.
     * 指定した事業所の貸借対照表(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialBsThreeYearsResponse object if successful.
     */
    TrialBsThreeYearsResponse getTrialBsThreeYears(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment);

    /**
     * 貸借対照表(３期間比較)の取得.
     * 指定した事業所の貸借対照表(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrialBsThreeYearsResponse> getTrialBsThreeYearsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment, final ServiceCallback<TrialBsThreeYearsResponse> serviceCallback);

    /**
     * 貸借対照表(３期間比較)の取得.
     * 指定した事業所の貸借対照表(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsThreeYearsResponse object
     */
    Observable<TrialBsThreeYearsResponse> getTrialBsThreeYearsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment);

    /**
     * 貸借対照表(３期間比較)の取得.
     * 指定した事業所の貸借対照表(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsThreeYearsResponse object
     */
    Observable<ServiceResponse<TrialBsThreeYearsResponse>> getTrialBsThreeYearsWithServiceResponseAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment);

    /**
     * 損益計算書の取得.
     * 指定した事業所の損益計算書を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialPlResponse object if successful.
     */
    TrialPlResponse getTrialPl(int companyId);

    /**
     * 損益計算書の取得.
     * 指定した事業所の損益計算書を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrialPlResponse> getTrialPlAsync(int companyId, final ServiceCallback<TrialPlResponse> serviceCallback);

    /**
     * 損益計算書の取得.
     * 指定した事業所の損益計算書を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlResponse object
     */
    Observable<TrialPlResponse> getTrialPlAsync(int companyId);

    /**
     * 損益計算書の取得.
     * 指定した事業所の損益計算書を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlResponse object
     */
    Observable<ServiceResponse<TrialPlResponse>> getTrialPlWithServiceResponseAsync(int companyId);
    /**
     * 損益計算書の取得.
     * 指定した事業所の損益計算書を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialPlResponse object if successful.
     */
    TrialPlResponse getTrialPl(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation);

    /**
     * 損益計算書の取得.
     * 指定した事業所の損益計算書を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrialPlResponse> getTrialPlAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation, final ServiceCallback<TrialPlResponse> serviceCallback);

    /**
     * 損益計算書の取得.
     * 指定した事業所の損益計算書を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlResponse object
     */
    Observable<TrialPlResponse> getTrialPlAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation);

    /**
     * 損益計算書の取得.
     * 指定した事業所の損益計算書を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlResponse object
     */
    Observable<ServiceResponse<TrialPlResponse>> getTrialPlWithServiceResponseAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation);

    /**
     * 損益計算書(前年比較)の取得.
     * 指定した事業所の損益計算書(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialPlTwoYearsResponse object if successful.
     */
    TrialPlTwoYearsResponse getTrialPlTwoYears(int companyId);

    /**
     * 損益計算書(前年比較)の取得.
     * 指定した事業所の損益計算書(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrialPlTwoYearsResponse> getTrialPlTwoYearsAsync(int companyId, final ServiceCallback<TrialPlTwoYearsResponse> serviceCallback);

    /**
     * 損益計算書(前年比較)の取得.
     * 指定した事業所の損益計算書(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlTwoYearsResponse object
     */
    Observable<TrialPlTwoYearsResponse> getTrialPlTwoYearsAsync(int companyId);

    /**
     * 損益計算書(前年比較)の取得.
     * 指定した事業所の損益計算書(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlTwoYearsResponse object
     */
    Observable<ServiceResponse<TrialPlTwoYearsResponse>> getTrialPlTwoYearsWithServiceResponseAsync(int companyId);
    /**
     * 損益計算書(前年比較)の取得.
     * 指定した事業所の損益計算書(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialPlTwoYearsResponse object if successful.
     */
    TrialPlTwoYearsResponse getTrialPlTwoYears(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation);

    /**
     * 損益計算書(前年比較)の取得.
     * 指定した事業所の損益計算書(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrialPlTwoYearsResponse> getTrialPlTwoYearsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation, final ServiceCallback<TrialPlTwoYearsResponse> serviceCallback);

    /**
     * 損益計算書(前年比較)の取得.
     * 指定した事業所の損益計算書(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlTwoYearsResponse object
     */
    Observable<TrialPlTwoYearsResponse> getTrialPlTwoYearsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation);

    /**
     * 損益計算書(前年比較)の取得.
     * 指定した事業所の損益計算書(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlTwoYearsResponse object
     */
    Observable<ServiceResponse<TrialPlTwoYearsResponse>> getTrialPlTwoYearsWithServiceResponseAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation);

    /**
     * 損益計算書(３期間比較)の取得.
     * 指定した事業所の損益計算書(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialPlThreeYearsResponse object if successful.
     */
    TrialPlThreeYearsResponse getTrialPlThreeYears(int companyId);

    /**
     * 損益計算書(３期間比較)の取得.
     * 指定した事業所の損益計算書(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrialPlThreeYearsResponse> getTrialPlThreeYearsAsync(int companyId, final ServiceCallback<TrialPlThreeYearsResponse> serviceCallback);

    /**
     * 損益計算書(３期間比較)の取得.
     * 指定した事業所の損益計算書(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlThreeYearsResponse object
     */
    Observable<TrialPlThreeYearsResponse> getTrialPlThreeYearsAsync(int companyId);

    /**
     * 損益計算書(３期間比較)の取得.
     * 指定した事業所の損益計算書(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlThreeYearsResponse object
     */
    Observable<ServiceResponse<TrialPlThreeYearsResponse>> getTrialPlThreeYearsWithServiceResponseAsync(int companyId);
    /**
     * 損益計算書(３期間比較)の取得.
     * 指定した事業所の損益計算書(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialPlThreeYearsResponse object if successful.
     */
    TrialPlThreeYearsResponse getTrialPlThreeYears(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation);

    /**
     * 損益計算書(３期間比較)の取得.
     * 指定した事業所の損益計算書(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrialPlThreeYearsResponse> getTrialPlThreeYearsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation, final ServiceCallback<TrialPlThreeYearsResponse> serviceCallback);

    /**
     * 損益計算書(３期間比較)の取得.
     * 指定した事業所の損益計算書(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlThreeYearsResponse object
     */
    Observable<TrialPlThreeYearsResponse> getTrialPlThreeYearsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation);

    /**
     * 損益計算書(３期間比較)の取得.
     * 指定した事業所の損益計算書(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlThreeYearsResponse object
     */
    Observable<ServiceResponse<TrialPlThreeYearsResponse>> getTrialPlThreeYearsWithServiceResponseAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation);

    /**
     * 損益計算書(部門比較)の取得.
     * 指定した事業所の損益計算書(部門比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialPlSectionsResponse object if successful.
     */
    TrialPlSectionsResponse getTrialPlSections(int companyId, String sectionIds);

    /**
     * 損益計算書(部門比較)の取得.
     * 指定した事業所の損益計算書(部門比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrialPlSectionsResponse> getTrialPlSectionsAsync(int companyId, String sectionIds, final ServiceCallback<TrialPlSectionsResponse> serviceCallback);

    /**
     * 損益計算書(部門比較)の取得.
     * 指定した事業所の損益計算書(部門比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlSectionsResponse object
     */
    Observable<TrialPlSectionsResponse> getTrialPlSectionsAsync(int companyId, String sectionIds);

    /**
     * 損益計算書(部門比較)の取得.
     * 指定した事業所の損益計算書(部門比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlSectionsResponse object
     */
    Observable<ServiceResponse<TrialPlSectionsResponse>> getTrialPlSectionsWithServiceResponseAsync(int companyId, String sectionIds);
    /**
     * 損益計算書(部門比較)の取得.
     * 指定した事業所の損益計算書(部門比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialPlSectionsResponse object if successful.
     */
    TrialPlSectionsResponse getTrialPlSections(int companyId, String sectionIds, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment, String costAllocation);

    /**
     * 損益計算書(部門比較)の取得.
     * 指定した事業所の損益計算書(部門比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrialPlSectionsResponse> getTrialPlSectionsAsync(int companyId, String sectionIds, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment, String costAllocation, final ServiceCallback<TrialPlSectionsResponse> serviceCallback);

    /**
     * 損益計算書(部門比較)の取得.
     * 指定した事業所の損益計算書(部門比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlSectionsResponse object
     */
    Observable<TrialPlSectionsResponse> getTrialPlSectionsAsync(int companyId, String sectionIds, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment, String costAllocation);

    /**
     * 損益計算書(部門比較)の取得.
     * 指定した事業所の損益計算書(部門比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlSectionsResponse object
     */
    Observable<ServiceResponse<TrialPlSectionsResponse>> getTrialPlSectionsWithServiceResponseAsync(int companyId, String sectionIds, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment, String costAllocation);

}
