/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.UsersCapabilitiesResponse;
import jp.co.freee.accounting.models.UsersMeResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Users.
 */
public interface Users {
    /**
     * ログインユーザ情報の取得.
     * ユーザの情報を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UsersMeResponse object if successful.
     */
    UsersMeResponse getMe();

    /**
     * ログインユーザ情報の取得.
     * ユーザの情報を取得する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<UsersMeResponse> getMeAsync(final ServiceCallback<UsersMeResponse> serviceCallback);

    /**
     * ログインユーザ情報の取得.
     * ユーザの情報を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UsersMeResponse object
     */
    Observable<UsersMeResponse> getMeAsync();

    /**
     * ログインユーザ情報の取得.
     * ユーザの情報を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UsersMeResponse object
     */
    Observable<ServiceResponse<UsersMeResponse>> getMeWithServiceResponseAsync();
    /**
     * ログインユーザ情報の取得.
     * ユーザの情報を取得する.
     *
     * @param companies 取得情報にユーザが所属する事業所一覧を含める
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UsersMeResponse object if successful.
     */
    UsersMeResponse getMe(Boolean companies);

    /**
     * ログインユーザ情報の取得.
     * ユーザの情報を取得する.
     *
     * @param companies 取得情報にユーザが所属する事業所一覧を含める
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<UsersMeResponse> getMeAsync(Boolean companies, final ServiceCallback<UsersMeResponse> serviceCallback);

    /**
     * ログインユーザ情報の取得.
     * ユーザの情報を取得する.
     *
     * @param companies 取得情報にユーザが所属する事業所一覧を含める
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UsersMeResponse object
     */
    Observable<UsersMeResponse> getMeAsync(Boolean companies);

    /**
     * ログインユーザ情報の取得.
     * ユーザの情報を取得する.
     *
     * @param companies 取得情報にユーザが所属する事業所一覧を含める
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UsersMeResponse object
     */
    Observable<ServiceResponse<UsersMeResponse>> getMeWithServiceResponseAsync(Boolean companies);

    /**
     * ログインユーザの権限の取得.
     * ユーザの権限情報を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UsersCapabilitiesResponse object if successful.
     */
    UsersCapabilitiesResponse getCapabilities(int companyId);

    /**
     * ログインユーザの権限の取得.
     * ユーザの権限情報を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<UsersCapabilitiesResponse> getCapabilitiesAsync(int companyId, final ServiceCallback<UsersCapabilitiesResponse> serviceCallback);

    /**
     * ログインユーザの権限の取得.
     * ユーザの権限情報を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UsersCapabilitiesResponse object
     */
    Observable<UsersCapabilitiesResponse> getCapabilitiesAsync(int companyId);

    /**
     * ログインユーザの権限の取得.
     * ユーザの権限情報を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UsersCapabilitiesResponse object
     */
    Observable<ServiceResponse<UsersCapabilitiesResponse>> getCapabilitiesWithServiceResponseAsync(int companyId);

}
