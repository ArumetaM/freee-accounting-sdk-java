/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.CreateWalletTxnParams;
import jp.co.freee.accounting.models.WalletTxnsCreateResponse;
import jp.co.freee.accounting.models.WalletTxnsIndexResponse;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in WalletTxns.
 */
public interface WalletTxns {
    /**
     * 明細一覧の取得.
     * 指定した事業所の明細一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WalletTxnsIndexResponse object if successful.
     */
    WalletTxnsIndexResponse list(int companyId);

    /**
     * 明細一覧の取得.
     * 指定した事業所の明細一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WalletTxnsIndexResponse> listAsync(int companyId, final ServiceCallback<WalletTxnsIndexResponse> serviceCallback);

    /**
     * 明細一覧の取得.
     * 指定した事業所の明細一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletTxnsIndexResponse object
     */
    Observable<WalletTxnsIndexResponse> listAsync(int companyId);

    /**
     * 明細一覧の取得.
     * 指定した事業所の明細一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletTxnsIndexResponse object
     */
    Observable<ServiceResponse<WalletTxnsIndexResponse>> listWithServiceResponseAsync(int companyId);
    /**
     * 明細一覧の取得.
     * 指定した事業所の明細一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param walletableType 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet). Possible values include: 'bank_account', 'credit_card', 'wallet'
     * @param walletableId 口座ID
     * @param startDate 取引日で絞込：開始日 (yyyy-mm-dd)
     * @param endDate 取引日で絞込：終了日 (yyyy-mm-dd)
     * @param entrySide 入金／出金 (入金: income, 出金: expense). Possible values include: 'income', 'expense'
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WalletTxnsIndexResponse object if successful.
     */
    WalletTxnsIndexResponse list(int companyId, String walletableType, Integer walletableId, String startDate, String endDate, String entrySide, Integer offset, Integer limit);

    /**
     * 明細一覧の取得.
     * 指定した事業所の明細一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param walletableType 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet). Possible values include: 'bank_account', 'credit_card', 'wallet'
     * @param walletableId 口座ID
     * @param startDate 取引日で絞込：開始日 (yyyy-mm-dd)
     * @param endDate 取引日で絞込：終了日 (yyyy-mm-dd)
     * @param entrySide 入金／出金 (入金: income, 出金: expense). Possible values include: 'income', 'expense'
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WalletTxnsIndexResponse> listAsync(int companyId, String walletableType, Integer walletableId, String startDate, String endDate, String entrySide, Integer offset, Integer limit, final ServiceCallback<WalletTxnsIndexResponse> serviceCallback);

    /**
     * 明細一覧の取得.
     * 指定した事業所の明細一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param walletableType 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet). Possible values include: 'bank_account', 'credit_card', 'wallet'
     * @param walletableId 口座ID
     * @param startDate 取引日で絞込：開始日 (yyyy-mm-dd)
     * @param endDate 取引日で絞込：終了日 (yyyy-mm-dd)
     * @param entrySide 入金／出金 (入金: income, 出金: expense). Possible values include: 'income', 'expense'
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletTxnsIndexResponse object
     */
    Observable<WalletTxnsIndexResponse> listAsync(int companyId, String walletableType, Integer walletableId, String startDate, String endDate, String entrySide, Integer offset, Integer limit);

    /**
     * 明細一覧の取得.
     * 指定した事業所の明細一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param walletableType 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet). Possible values include: 'bank_account', 'credit_card', 'wallet'
     * @param walletableId 口座ID
     * @param startDate 取引日で絞込：開始日 (yyyy-mm-dd)
     * @param endDate 取引日で絞込：終了日 (yyyy-mm-dd)
     * @param entrySide 入金／出金 (入金: income, 出金: expense). Possible values include: 'income', 'expense'
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletTxnsIndexResponse object
     */
    Observable<ServiceResponse<WalletTxnsIndexResponse>> listWithServiceResponseAsync(int companyId, String walletableType, Integer walletableId, String startDate, String endDate, String entrySide, Integer offset, Integer limit);

    /**
     * 明細の作成.
     * 指定した事業所の明細を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WalletTxnsCreateResponse object if successful.
     */
    WalletTxnsCreateResponse create();

    /**
     * 明細の作成.
     * 指定した事業所の明細を作成する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WalletTxnsCreateResponse> createAsync(final ServiceCallback<WalletTxnsCreateResponse> serviceCallback);

    /**
     * 明細の作成.
     * 指定した事業所の明細を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletTxnsCreateResponse object
     */
    Observable<WalletTxnsCreateResponse> createAsync();

    /**
     * 明細の作成.
     * 指定した事業所の明細を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletTxnsCreateResponse object
     */
    Observable<ServiceResponse<WalletTxnsCreateResponse>> createWithServiceResponseAsync();
    /**
     * 明細の作成.
     * 指定した事業所の明細を作成する.
     *
     * @param parameters 明細の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WalletTxnsCreateResponse object if successful.
     */
    WalletTxnsCreateResponse create(CreateWalletTxnParams parameters);

    /**
     * 明細の作成.
     * 指定した事業所の明細を作成する.
     *
     * @param parameters 明細の作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WalletTxnsCreateResponse> createAsync(CreateWalletTxnParams parameters, final ServiceCallback<WalletTxnsCreateResponse> serviceCallback);

    /**
     * 明細の作成.
     * 指定した事業所の明細を作成する.
     *
     * @param parameters 明細の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletTxnsCreateResponse object
     */
    Observable<WalletTxnsCreateResponse> createAsync(CreateWalletTxnParams parameters);

    /**
     * 明細の作成.
     * 指定した事業所の明細を作成する.
     *
     * @param parameters 明細の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletTxnsCreateResponse object
     */
    Observable<ServiceResponse<WalletTxnsCreateResponse>> createWithServiceResponseAsync(CreateWalletTxnParams parameters);

}
