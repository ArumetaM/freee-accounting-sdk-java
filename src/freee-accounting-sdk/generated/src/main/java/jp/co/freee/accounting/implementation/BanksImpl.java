/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.implementation;

import retrofit2.Retrofit;
import jp.co.freee.accounting.Banks;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.BanksIndexResponse;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Banks.
 */
public class BanksImpl implements Banks {
    /** The Retrofit service to perform REST calls. */
    private BanksService service;
    /** The service client containing this operation class. */
    private AccountingClientImpl client;

    /**
     * Initializes an instance of Banks.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BanksImpl(Retrofit retrofit, AccountingClientImpl client) {
        this.service = retrofit.create(BanksService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Banks to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BanksService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Banks list" })
        @GET("banks")
        Observable<Response<ResponseBody>> list(@Query("offset") Integer offset, @Query("limit") Integer limit, @Query("type") String type);

    }

    /**
     * 連携サービス一覧の取得.
     * 連携しているサービス一覧を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BanksIndexResponse object if successful.
     */
    public BanksIndexResponse list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * 連携サービス一覧の取得.
     * 連携しているサービス一覧を取得する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BanksIndexResponse> listAsync(final ServiceCallback<BanksIndexResponse> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * 連携サービス一覧の取得.
     * 連携しているサービス一覧を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BanksIndexResponse object
     */
    public Observable<BanksIndexResponse> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<BanksIndexResponse>, BanksIndexResponse>() {
            @Override
            public BanksIndexResponse call(ServiceResponse<BanksIndexResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 連携サービス一覧の取得.
     * 連携しているサービス一覧を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BanksIndexResponse object
     */
    public Observable<ServiceResponse<BanksIndexResponse>> listWithServiceResponseAsync() {
        final Integer offset = null;
        final Integer limit = null;
        final String type = null;
        return service.list(offset, limit, type)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BanksIndexResponse>>>() {
                @Override
                public Observable<ServiceResponse<BanksIndexResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BanksIndexResponse> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 連携サービス一覧の取得.
     * 連携しているサービス一覧を取得する.
     *
     * @param offset 開始位置
     * @param limit 取得上限数,最大500件
     * @param type サービス種別. Possible values include: 'bank_account', 'credit_card', 'wallet'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BanksIndexResponse object if successful.
     */
    public BanksIndexResponse list(Integer offset, Integer limit, String type) {
        return listWithServiceResponseAsync(offset, limit, type).toBlocking().single().body();
    }

    /**
     * 連携サービス一覧の取得.
     * 連携しているサービス一覧を取得する.
     *
     * @param offset 開始位置
     * @param limit 取得上限数,最大500件
     * @param type サービス種別. Possible values include: 'bank_account', 'credit_card', 'wallet'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BanksIndexResponse> listAsync(Integer offset, Integer limit, String type, final ServiceCallback<BanksIndexResponse> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(offset, limit, type), serviceCallback);
    }

    /**
     * 連携サービス一覧の取得.
     * 連携しているサービス一覧を取得する.
     *
     * @param offset 開始位置
     * @param limit 取得上限数,最大500件
     * @param type サービス種別. Possible values include: 'bank_account', 'credit_card', 'wallet'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BanksIndexResponse object
     */
    public Observable<BanksIndexResponse> listAsync(Integer offset, Integer limit, String type) {
        return listWithServiceResponseAsync(offset, limit, type).map(new Func1<ServiceResponse<BanksIndexResponse>, BanksIndexResponse>() {
            @Override
            public BanksIndexResponse call(ServiceResponse<BanksIndexResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 連携サービス一覧の取得.
     * 連携しているサービス一覧を取得する.
     *
     * @param offset 開始位置
     * @param limit 取得上限数,最大500件
     * @param type サービス種別. Possible values include: 'bank_account', 'credit_card', 'wallet'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BanksIndexResponse object
     */
    public Observable<ServiceResponse<BanksIndexResponse>> listWithServiceResponseAsync(Integer offset, Integer limit, String type) {
        return service.list(offset, limit, type)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BanksIndexResponse>>>() {
                @Override
                public Observable<ServiceResponse<BanksIndexResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BanksIndexResponse> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BanksIndexResponse> listDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<BanksIndexResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BanksIndexResponse>() { }.getType())
                .build(response);
    }

}
