/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.implementation;

import retrofit2.Retrofit;
import jp.co.freee.accounting.Companies;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import jp.co.freee.accounting.models.CompaniesShowResponse;
import jp.co.freee.accounting.models.CompaniesUpdateResponse;
import jp.co.freee.accounting.models.ListOKResponse;
import jp.co.freee.accounting.models.UpdateCompanyParams;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Companies.
 */
public class CompaniesImpl implements Companies {
    /** The Retrofit service to perform REST calls. */
    private CompaniesService service;
    /** The service client containing this operation class. */
    private AccountingClientImpl client;

    /**
     * Initializes an instance of Companies.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CompaniesImpl(Retrofit retrofit, AccountingClientImpl client) {
        this.service = retrofit.create(CompaniesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Companies to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CompaniesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Companies list" })
        @GET("companies")
        Observable<Response<ResponseBody>> list();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Companies get" })
        @GET("companies/{id}")
        Observable<Response<ResponseBody>> get(@Path("id") int id, @Query("details") Boolean details, @Query("account_items") Boolean accountItems, @Query("taxes") Boolean taxes, @Query("items") Boolean items, @Query("partners") Boolean partners, @Query("sections") Boolean sections, @Query("tags") Boolean tags, @Query("walletables") Boolean walletables);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Companies update" })
        @PUT("companies/{id}")
        Observable<Response<ResponseBody>> update(@Path("id") int id, @Body UpdateCompanyParams parameters);

    }

    /**
     * 事業所一覧の取得.
     * ユーザが所属する事業所の一覧を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListOKResponse object if successful.
     */
    public ListOKResponse list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * 事業所一覧の取得.
     * ユーザが所属する事業所の一覧を取得する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ListOKResponse> listAsync(final ServiceCallback<ListOKResponse> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * 事業所一覧の取得.
     * ユーザが所属する事業所の一覧を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListOKResponse object
     */
    public Observable<ListOKResponse> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<ListOKResponse>, ListOKResponse>() {
            @Override
            public ListOKResponse call(ServiceResponse<ListOKResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 事業所一覧の取得.
     * ユーザが所属する事業所の一覧を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListOKResponse object
     */
    public Observable<ServiceResponse<ListOKResponse>> listWithServiceResponseAsync() {
        return service.list()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ListOKResponse>>>() {
                @Override
                public Observable<ServiceResponse<ListOKResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ListOKResponse> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ListOKResponse> listDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<ListOKResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ListOKResponse>() { }.getType())
                .build(response);
    }

    /**
     * 事業所の詳細情報の取得.
     * ユーザが所属する事業所の詳細を取得する.
     *
     * @param id 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CompaniesShowResponse object if successful.
     */
    public CompaniesShowResponse get(int id) {
        return getWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * 事業所の詳細情報の取得.
     * ユーザが所属する事業所の詳細を取得する.
     *
     * @param id 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CompaniesShowResponse> getAsync(int id, final ServiceCallback<CompaniesShowResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * 事業所の詳細情報の取得.
     * ユーザが所属する事業所の詳細を取得する.
     *
     * @param id 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompaniesShowResponse object
     */
    public Observable<CompaniesShowResponse> getAsync(int id) {
        return getWithServiceResponseAsync(id).map(new Func1<ServiceResponse<CompaniesShowResponse>, CompaniesShowResponse>() {
            @Override
            public CompaniesShowResponse call(ServiceResponse<CompaniesShowResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 事業所の詳細情報の取得.
     * ユーザが所属する事業所の詳細を取得する.
     *
     * @param id 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompaniesShowResponse object
     */
    public Observable<ServiceResponse<CompaniesShowResponse>> getWithServiceResponseAsync(int id) {
        final Boolean details = null;
        final Boolean accountItems = null;
        final Boolean taxes = null;
        final Boolean items = null;
        final Boolean partners = null;
        final Boolean sections = null;
        final Boolean tags = null;
        final Boolean walletables = null;
        return service.get(id, details, accountItems, taxes, items, partners, sections, tags, walletables)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CompaniesShowResponse>>>() {
                @Override
                public Observable<ServiceResponse<CompaniesShowResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CompaniesShowResponse> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 事業所の詳細情報の取得.
     * ユーザが所属する事業所の詳細を取得する.
     *
     * @param id 事業所ID
     * @param details 取得情報に勘定科目・税区分コード・税区分・品目・取引先・部門・メモタグ・口座の一覧を含める
     * @param accountItems 取得情報に勘定科目一覧を含める
     * @param taxes 取得情報に税区分コード・税区分一覧を含める
     * @param items 取得情報に品目一覧を含める
     * @param partners 取得情報に取引先一覧を含める
     * @param sections 取得情報に部門一覧を含める
     * @param tags 取得情報にメモタグ一覧を含める
     * @param walletables 取得情報に口座一覧を含める
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CompaniesShowResponse object if successful.
     */
    public CompaniesShowResponse get(int id, Boolean details, Boolean accountItems, Boolean taxes, Boolean items, Boolean partners, Boolean sections, Boolean tags, Boolean walletables) {
        return getWithServiceResponseAsync(id, details, accountItems, taxes, items, partners, sections, tags, walletables).toBlocking().single().body();
    }

    /**
     * 事業所の詳細情報の取得.
     * ユーザが所属する事業所の詳細を取得する.
     *
     * @param id 事業所ID
     * @param details 取得情報に勘定科目・税区分コード・税区分・品目・取引先・部門・メモタグ・口座の一覧を含める
     * @param accountItems 取得情報に勘定科目一覧を含める
     * @param taxes 取得情報に税区分コード・税区分一覧を含める
     * @param items 取得情報に品目一覧を含める
     * @param partners 取得情報に取引先一覧を含める
     * @param sections 取得情報に部門一覧を含める
     * @param tags 取得情報にメモタグ一覧を含める
     * @param walletables 取得情報に口座一覧を含める
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CompaniesShowResponse> getAsync(int id, Boolean details, Boolean accountItems, Boolean taxes, Boolean items, Boolean partners, Boolean sections, Boolean tags, Boolean walletables, final ServiceCallback<CompaniesShowResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(id, details, accountItems, taxes, items, partners, sections, tags, walletables), serviceCallback);
    }

    /**
     * 事業所の詳細情報の取得.
     * ユーザが所属する事業所の詳細を取得する.
     *
     * @param id 事業所ID
     * @param details 取得情報に勘定科目・税区分コード・税区分・品目・取引先・部門・メモタグ・口座の一覧を含める
     * @param accountItems 取得情報に勘定科目一覧を含める
     * @param taxes 取得情報に税区分コード・税区分一覧を含める
     * @param items 取得情報に品目一覧を含める
     * @param partners 取得情報に取引先一覧を含める
     * @param sections 取得情報に部門一覧を含める
     * @param tags 取得情報にメモタグ一覧を含める
     * @param walletables 取得情報に口座一覧を含める
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompaniesShowResponse object
     */
    public Observable<CompaniesShowResponse> getAsync(int id, Boolean details, Boolean accountItems, Boolean taxes, Boolean items, Boolean partners, Boolean sections, Boolean tags, Boolean walletables) {
        return getWithServiceResponseAsync(id, details, accountItems, taxes, items, partners, sections, tags, walletables).map(new Func1<ServiceResponse<CompaniesShowResponse>, CompaniesShowResponse>() {
            @Override
            public CompaniesShowResponse call(ServiceResponse<CompaniesShowResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 事業所の詳細情報の取得.
     * ユーザが所属する事業所の詳細を取得する.
     *
     * @param id 事業所ID
     * @param details 取得情報に勘定科目・税区分コード・税区分・品目・取引先・部門・メモタグ・口座の一覧を含める
     * @param accountItems 取得情報に勘定科目一覧を含める
     * @param taxes 取得情報に税区分コード・税区分一覧を含める
     * @param items 取得情報に品目一覧を含める
     * @param partners 取得情報に取引先一覧を含める
     * @param sections 取得情報に部門一覧を含める
     * @param tags 取得情報にメモタグ一覧を含める
     * @param walletables 取得情報に口座一覧を含める
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompaniesShowResponse object
     */
    public Observable<ServiceResponse<CompaniesShowResponse>> getWithServiceResponseAsync(int id, Boolean details, Boolean accountItems, Boolean taxes, Boolean items, Boolean partners, Boolean sections, Boolean tags, Boolean walletables) {
        return service.get(id, details, accountItems, taxes, items, partners, sections, tags, walletables)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CompaniesShowResponse>>>() {
                @Override
                public Observable<ServiceResponse<CompaniesShowResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CompaniesShowResponse> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CompaniesShowResponse> getDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<CompaniesShowResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CompaniesShowResponse>() { }.getType())
                .build(response);
    }

    /**
     * 事業所情報の更新.
     * ユーザが所属する事業所の情報を更新する.
     *
     * @param id 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CompaniesUpdateResponse object if successful.
     */
    public CompaniesUpdateResponse update(int id) {
        return updateWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * 事業所情報の更新.
     * ユーザが所属する事業所の情報を更新する.
     *
     * @param id 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CompaniesUpdateResponse> updateAsync(int id, final ServiceCallback<CompaniesUpdateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * 事業所情報の更新.
     * ユーザが所属する事業所の情報を更新する.
     *
     * @param id 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompaniesUpdateResponse object
     */
    public Observable<CompaniesUpdateResponse> updateAsync(int id) {
        return updateWithServiceResponseAsync(id).map(new Func1<ServiceResponse<CompaniesUpdateResponse>, CompaniesUpdateResponse>() {
            @Override
            public CompaniesUpdateResponse call(ServiceResponse<CompaniesUpdateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 事業所情報の更新.
     * ユーザが所属する事業所の情報を更新する.
     *
     * @param id 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompaniesUpdateResponse object
     */
    public Observable<ServiceResponse<CompaniesUpdateResponse>> updateWithServiceResponseAsync(int id) {
        final UpdateCompanyParams parameters = null;
        return service.update(id, parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CompaniesUpdateResponse>>>() {
                @Override
                public Observable<ServiceResponse<CompaniesUpdateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CompaniesUpdateResponse> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 事業所情報の更新.
     * ユーザが所属する事業所の情報を更新する.
     *
     * @param id 事業所ID
     * @param parameters the UpdateCompanyParams value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CompaniesUpdateResponse object if successful.
     */
    public CompaniesUpdateResponse update(int id, UpdateCompanyParams parameters) {
        return updateWithServiceResponseAsync(id, parameters).toBlocking().single().body();
    }

    /**
     * 事業所情報の更新.
     * ユーザが所属する事業所の情報を更新する.
     *
     * @param id 事業所ID
     * @param parameters the UpdateCompanyParams value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CompaniesUpdateResponse> updateAsync(int id, UpdateCompanyParams parameters, final ServiceCallback<CompaniesUpdateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(id, parameters), serviceCallback);
    }

    /**
     * 事業所情報の更新.
     * ユーザが所属する事業所の情報を更新する.
     *
     * @param id 事業所ID
     * @param parameters the UpdateCompanyParams value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompaniesUpdateResponse object
     */
    public Observable<CompaniesUpdateResponse> updateAsync(int id, UpdateCompanyParams parameters) {
        return updateWithServiceResponseAsync(id, parameters).map(new Func1<ServiceResponse<CompaniesUpdateResponse>, CompaniesUpdateResponse>() {
            @Override
            public CompaniesUpdateResponse call(ServiceResponse<CompaniesUpdateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 事業所情報の更新.
     * ユーザが所属する事業所の情報を更新する.
     *
     * @param id 事業所ID
     * @param parameters the UpdateCompanyParams value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompaniesUpdateResponse object
     */
    public Observable<ServiceResponse<CompaniesUpdateResponse>> updateWithServiceResponseAsync(int id, UpdateCompanyParams parameters) {
        Validator.validate(parameters);
        return service.update(id, parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CompaniesUpdateResponse>>>() {
                @Override
                public Observable<ServiceResponse<CompaniesUpdateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CompaniesUpdateResponse> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CompaniesUpdateResponse> updateDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<CompaniesUpdateResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CompaniesUpdateResponse>() { }.getType())
                .build(response);
    }

}
