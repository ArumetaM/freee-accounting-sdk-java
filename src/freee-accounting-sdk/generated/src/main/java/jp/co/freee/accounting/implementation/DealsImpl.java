/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.implementation;

import retrofit2.Retrofit;
import jp.co.freee.accounting.Deals;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import jp.co.freee.accounting.models.CreateDealParams;
import jp.co.freee.accounting.models.DealsCreateResponse;
import jp.co.freee.accounting.models.DealsIndexResponse;
import jp.co.freee.accounting.models.DealsResponse;
import jp.co.freee.accounting.models.UpdateDealParams;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Deals.
 */
public class DealsImpl implements Deals {
    /** The Retrofit service to perform REST calls. */
    private DealsService service;
    /** The service client containing this operation class. */
    private AccountingClientImpl client;

    /**
     * Initializes an instance of Deals.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DealsImpl(Retrofit retrofit, AccountingClientImpl client) {
        this.service = retrofit.create(DealsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Deals to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DealsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Deals list" })
        @GET("deals")
        Observable<Response<ResponseBody>> list(@Query("company_id") int companyId, @Query("partner_id") Integer partnerId, @Query("account_item_id") Integer accountItemId, @Query("partner_code") String partnerCode, @Query("status") String status, @Query("type") String type, @Query("start_issue_date") String startIssueDate, @Query("end_issue_date") String endIssueDate, @Query("start_due_date") String startDueDate, @Query("end_due_date") String endDueDate, @Query("start_renew_date") String startRenewDate, @Query("end_renew_date") String endRenewDate, @Query("offset") Integer offset, @Query("limit") Integer limit, @Query("registered_from") String registeredFrom, @Query("accruals") String accruals);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Deals create" })
        @POST("deals")
        Observable<Response<ResponseBody>> create(@Body CreateDealParams parameters);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Deals get" })
        @GET("deals/{id}")
        Observable<Response<ResponseBody>> get(@Path("id") int id, @Query("company_id") int companyId, @Query("accruals") String accruals);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Deals update" })
        @PUT("deals/{id}")
        Observable<Response<ResponseBody>> update(@Path("id") int id, @Body UpdateDealParams parameters);

    }

    /**
     * 取引（収入／支出）一覧の取得.
     * 指定した事業所の取引一覧（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsIndexResponse object if successful.
     */
    public DealsIndexResponse list(int companyId) {
        return listWithServiceResponseAsync(companyId).toBlocking().single().body();
    }

    /**
     * 取引（収入／支出）一覧の取得.
     * 指定した事業所の取引一覧（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DealsIndexResponse> listAsync(int companyId, final ServiceCallback<DealsIndexResponse> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(companyId), serviceCallback);
    }

    /**
     * 取引（収入／支出）一覧の取得.
     * 指定した事業所の取引一覧（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsIndexResponse object
     */
    public Observable<DealsIndexResponse> listAsync(int companyId) {
        return listWithServiceResponseAsync(companyId).map(new Func1<ServiceResponse<DealsIndexResponse>, DealsIndexResponse>() {
            @Override
            public DealsIndexResponse call(ServiceResponse<DealsIndexResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 取引（収入／支出）一覧の取得.
     * 指定した事業所の取引一覧（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsIndexResponse object
     */
    public Observable<ServiceResponse<DealsIndexResponse>> listWithServiceResponseAsync(int companyId) {
        final Integer partnerId = null;
        final Integer accountItemId = null;
        final String partnerCode = null;
        final String status = null;
        final String type = null;
        final String startIssueDate = null;
        final String endIssueDate = null;
        final String startDueDate = null;
        final String endDueDate = null;
        final String startRenewDate = null;
        final String endRenewDate = null;
        final Integer offset = null;
        final Integer limit = null;
        final String registeredFrom = null;
        final String accruals = null;
        return service.list(companyId, partnerId, accountItemId, partnerCode, status, type, startIssueDate, endIssueDate, startDueDate, endDueDate, startRenewDate, endRenewDate, offset, limit, registeredFrom, accruals)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DealsIndexResponse>>>() {
                @Override
                public Observable<ServiceResponse<DealsIndexResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DealsIndexResponse> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 取引（収入／支出）一覧の取得.
     * 指定した事業所の取引一覧（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param partnerId 取引先IDで絞込
     * @param accountItemId 勘定科目IDで絞込
     * @param partnerCode 取引先コードで絞込
     * @param status 決済状況で絞込 (未決済: unsettled, 完了: settled). Possible values include: 'unsettled', 'settled'
     * @param type 収支区分 (収入: income, 支出: expense). Possible values include: 'income', 'expense'
     * @param startIssueDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endIssueDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param startDueDate 支払期日で絞込：開始日(yyyy-mm-dd)
     * @param endDueDate 支払期日で絞込：終了日(yyyy-mm-dd)
     * @param startRenewDate +更新日で絞込：開始日(yyyy-mm-dd)
     * @param endRenewDate +更新日で絞込：終了日(yyyy-mm-dd)
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @param registeredFrom 取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ）. Possible values include: 'me'
     * @param accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include: 'without', 'with'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsIndexResponse object if successful.
     */
    public DealsIndexResponse list(int companyId, Integer partnerId, Integer accountItemId, String partnerCode, String status, String type, String startIssueDate, String endIssueDate, String startDueDate, String endDueDate, String startRenewDate, String endRenewDate, Integer offset, Integer limit, String registeredFrom, String accruals) {
        return listWithServiceResponseAsync(companyId, partnerId, accountItemId, partnerCode, status, type, startIssueDate, endIssueDate, startDueDate, endDueDate, startRenewDate, endRenewDate, offset, limit, registeredFrom, accruals).toBlocking().single().body();
    }

    /**
     * 取引（収入／支出）一覧の取得.
     * 指定した事業所の取引一覧（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param partnerId 取引先IDで絞込
     * @param accountItemId 勘定科目IDで絞込
     * @param partnerCode 取引先コードで絞込
     * @param status 決済状況で絞込 (未決済: unsettled, 完了: settled). Possible values include: 'unsettled', 'settled'
     * @param type 収支区分 (収入: income, 支出: expense). Possible values include: 'income', 'expense'
     * @param startIssueDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endIssueDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param startDueDate 支払期日で絞込：開始日(yyyy-mm-dd)
     * @param endDueDate 支払期日で絞込：終了日(yyyy-mm-dd)
     * @param startRenewDate +更新日で絞込：開始日(yyyy-mm-dd)
     * @param endRenewDate +更新日で絞込：終了日(yyyy-mm-dd)
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @param registeredFrom 取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ）. Possible values include: 'me'
     * @param accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include: 'without', 'with'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DealsIndexResponse> listAsync(int companyId, Integer partnerId, Integer accountItemId, String partnerCode, String status, String type, String startIssueDate, String endIssueDate, String startDueDate, String endDueDate, String startRenewDate, String endRenewDate, Integer offset, Integer limit, String registeredFrom, String accruals, final ServiceCallback<DealsIndexResponse> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(companyId, partnerId, accountItemId, partnerCode, status, type, startIssueDate, endIssueDate, startDueDate, endDueDate, startRenewDate, endRenewDate, offset, limit, registeredFrom, accruals), serviceCallback);
    }

    /**
     * 取引（収入／支出）一覧の取得.
     * 指定した事業所の取引一覧（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param partnerId 取引先IDで絞込
     * @param accountItemId 勘定科目IDで絞込
     * @param partnerCode 取引先コードで絞込
     * @param status 決済状況で絞込 (未決済: unsettled, 完了: settled). Possible values include: 'unsettled', 'settled'
     * @param type 収支区分 (収入: income, 支出: expense). Possible values include: 'income', 'expense'
     * @param startIssueDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endIssueDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param startDueDate 支払期日で絞込：開始日(yyyy-mm-dd)
     * @param endDueDate 支払期日で絞込：終了日(yyyy-mm-dd)
     * @param startRenewDate +更新日で絞込：開始日(yyyy-mm-dd)
     * @param endRenewDate +更新日で絞込：終了日(yyyy-mm-dd)
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @param registeredFrom 取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ）. Possible values include: 'me'
     * @param accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include: 'without', 'with'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsIndexResponse object
     */
    public Observable<DealsIndexResponse> listAsync(int companyId, Integer partnerId, Integer accountItemId, String partnerCode, String status, String type, String startIssueDate, String endIssueDate, String startDueDate, String endDueDate, String startRenewDate, String endRenewDate, Integer offset, Integer limit, String registeredFrom, String accruals) {
        return listWithServiceResponseAsync(companyId, partnerId, accountItemId, partnerCode, status, type, startIssueDate, endIssueDate, startDueDate, endDueDate, startRenewDate, endRenewDate, offset, limit, registeredFrom, accruals).map(new Func1<ServiceResponse<DealsIndexResponse>, DealsIndexResponse>() {
            @Override
            public DealsIndexResponse call(ServiceResponse<DealsIndexResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 取引（収入／支出）一覧の取得.
     * 指定した事業所の取引一覧（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param partnerId 取引先IDで絞込
     * @param accountItemId 勘定科目IDで絞込
     * @param partnerCode 取引先コードで絞込
     * @param status 決済状況で絞込 (未決済: unsettled, 完了: settled). Possible values include: 'unsettled', 'settled'
     * @param type 収支区分 (収入: income, 支出: expense). Possible values include: 'income', 'expense'
     * @param startIssueDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endIssueDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param startDueDate 支払期日で絞込：開始日(yyyy-mm-dd)
     * @param endDueDate 支払期日で絞込：終了日(yyyy-mm-dd)
     * @param startRenewDate +更新日で絞込：開始日(yyyy-mm-dd)
     * @param endRenewDate +更新日で絞込：終了日(yyyy-mm-dd)
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 100)
     * @param registeredFrom 取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ）. Possible values include: 'me'
     * @param accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include: 'without', 'with'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsIndexResponse object
     */
    public Observable<ServiceResponse<DealsIndexResponse>> listWithServiceResponseAsync(int companyId, Integer partnerId, Integer accountItemId, String partnerCode, String status, String type, String startIssueDate, String endIssueDate, String startDueDate, String endDueDate, String startRenewDate, String endRenewDate, Integer offset, Integer limit, String registeredFrom, String accruals) {
        return service.list(companyId, partnerId, accountItemId, partnerCode, status, type, startIssueDate, endIssueDate, startDueDate, endDueDate, startRenewDate, endRenewDate, offset, limit, registeredFrom, accruals)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DealsIndexResponse>>>() {
                @Override
                public Observable<ServiceResponse<DealsIndexResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DealsIndexResponse> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DealsIndexResponse> listDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<DealsIndexResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DealsIndexResponse>() { }.getType())
                .build(response);
    }

    /**
     * 取引（収入／支出）の作成.
     * 指定した事業所の取引（収入／支出）を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsCreateResponse object if successful.
     */
    public DealsCreateResponse create() {
        return createWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * 取引（収入／支出）の作成.
     * 指定した事業所の取引（収入／支出）を作成する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DealsCreateResponse> createAsync(final ServiceCallback<DealsCreateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * 取引（収入／支出）の作成.
     * 指定した事業所の取引（収入／支出）を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsCreateResponse object
     */
    public Observable<DealsCreateResponse> createAsync() {
        return createWithServiceResponseAsync().map(new Func1<ServiceResponse<DealsCreateResponse>, DealsCreateResponse>() {
            @Override
            public DealsCreateResponse call(ServiceResponse<DealsCreateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 取引（収入／支出）の作成.
     * 指定した事業所の取引（収入／支出）を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsCreateResponse object
     */
    public Observable<ServiceResponse<DealsCreateResponse>> createWithServiceResponseAsync() {
        final CreateDealParams parameters = null;
        return service.create(parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DealsCreateResponse>>>() {
                @Override
                public Observable<ServiceResponse<DealsCreateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DealsCreateResponse> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 取引（収入／支出）の作成.
     * 指定した事業所の取引（収入／支出）を作成する.
     *
     * @param parameters 取引（収入／支出）の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsCreateResponse object if successful.
     */
    public DealsCreateResponse create(CreateDealParams parameters) {
        return createWithServiceResponseAsync(parameters).toBlocking().single().body();
    }

    /**
     * 取引（収入／支出）の作成.
     * 指定した事業所の取引（収入／支出）を作成する.
     *
     * @param parameters 取引（収入／支出）の作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DealsCreateResponse> createAsync(CreateDealParams parameters, final ServiceCallback<DealsCreateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(parameters), serviceCallback);
    }

    /**
     * 取引（収入／支出）の作成.
     * 指定した事業所の取引（収入／支出）を作成する.
     *
     * @param parameters 取引（収入／支出）の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsCreateResponse object
     */
    public Observable<DealsCreateResponse> createAsync(CreateDealParams parameters) {
        return createWithServiceResponseAsync(parameters).map(new Func1<ServiceResponse<DealsCreateResponse>, DealsCreateResponse>() {
            @Override
            public DealsCreateResponse call(ServiceResponse<DealsCreateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 取引（収入／支出）の作成.
     * 指定した事業所の取引（収入／支出）を作成する.
     *
     * @param parameters 取引（収入／支出）の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsCreateResponse object
     */
    public Observable<ServiceResponse<DealsCreateResponse>> createWithServiceResponseAsync(CreateDealParams parameters) {
        Validator.validate(parameters);
        return service.create(parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DealsCreateResponse>>>() {
                @Override
                public Observable<ServiceResponse<DealsCreateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DealsCreateResponse> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DealsCreateResponse> createDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<DealsCreateResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<DealsCreateResponse>() { }.getType())
                .build(response);
    }

    /**
     * 取引（収入／支出）の取得.
     * 指定した事業所の取引（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsResponse object if successful.
     */
    public DealsResponse get(int companyId, int id) {
        return getWithServiceResponseAsync(companyId, id).toBlocking().single().body();
    }

    /**
     * 取引（収入／支出）の取得.
     * 指定した事業所の取引（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DealsResponse> getAsync(int companyId, int id, final ServiceCallback<DealsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(companyId, id), serviceCallback);
    }

    /**
     * 取引（収入／支出）の取得.
     * 指定した事業所の取引（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    public Observable<DealsResponse> getAsync(int companyId, int id) {
        return getWithServiceResponseAsync(companyId, id).map(new Func1<ServiceResponse<DealsResponse>, DealsResponse>() {
            @Override
            public DealsResponse call(ServiceResponse<DealsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 取引（収入／支出）の取得.
     * 指定した事業所の取引（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    public Observable<ServiceResponse<DealsResponse>> getWithServiceResponseAsync(int companyId, int id) {
        final String accruals = null;
        return service.get(id, companyId, accruals)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DealsResponse>>>() {
                @Override
                public Observable<ServiceResponse<DealsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DealsResponse> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 取引（収入／支出）の取得.
     * 指定した事業所の取引（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @param accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include: 'without', 'with'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsResponse object if successful.
     */
    public DealsResponse get(int companyId, int id, String accruals) {
        return getWithServiceResponseAsync(companyId, id, accruals).toBlocking().single().body();
    }

    /**
     * 取引（収入／支出）の取得.
     * 指定した事業所の取引（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @param accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include: 'without', 'with'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DealsResponse> getAsync(int companyId, int id, String accruals, final ServiceCallback<DealsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(companyId, id, accruals), serviceCallback);
    }

    /**
     * 取引（収入／支出）の取得.
     * 指定した事業所の取引（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @param accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include: 'without', 'with'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    public Observable<DealsResponse> getAsync(int companyId, int id, String accruals) {
        return getWithServiceResponseAsync(companyId, id, accruals).map(new Func1<ServiceResponse<DealsResponse>, DealsResponse>() {
            @Override
            public DealsResponse call(ServiceResponse<DealsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 取引（収入／支出）の取得.
     * 指定した事業所の取引（収入／支出）を取得する.
     *
     * @param companyId 事業所ID
     * @param id the int value
     * @param accruals 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する）. Possible values include: 'without', 'with'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    public Observable<ServiceResponse<DealsResponse>> getWithServiceResponseAsync(int companyId, int id, String accruals) {
        return service.get(id, companyId, accruals)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DealsResponse>>>() {
                @Override
                public Observable<ServiceResponse<DealsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DealsResponse> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DealsResponse> getDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<DealsResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DealsResponse>() { }.getType())
                .build(response);
    }

    /**
     * 取引（収入／支出）の更新.
     * 指定した事業所の取引（収入／支出）を更新する.
     *
     * @param id 取引ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsResponse object if successful.
     */
    public DealsResponse update(int id) {
        return updateWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * 取引（収入／支出）の更新.
     * 指定した事業所の取引（収入／支出）を更新する.
     *
     * @param id 取引ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DealsResponse> updateAsync(int id, final ServiceCallback<DealsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * 取引（収入／支出）の更新.
     * 指定した事業所の取引（収入／支出）を更新する.
     *
     * @param id 取引ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    public Observable<DealsResponse> updateAsync(int id) {
        return updateWithServiceResponseAsync(id).map(new Func1<ServiceResponse<DealsResponse>, DealsResponse>() {
            @Override
            public DealsResponse call(ServiceResponse<DealsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 取引（収入／支出）の更新.
     * 指定した事業所の取引（収入／支出）を更新する.
     *
     * @param id 取引ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    public Observable<ServiceResponse<DealsResponse>> updateWithServiceResponseAsync(int id) {
        final UpdateDealParams parameters = null;
        return service.update(id, parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DealsResponse>>>() {
                @Override
                public Observable<ServiceResponse<DealsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DealsResponse> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 取引（収入／支出）の更新.
     * 指定した事業所の取引（収入／支出）を更新する.
     *
     * @param id 取引ID
     * @param parameters 取引（収入／支出）の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsResponse object if successful.
     */
    public DealsResponse update(int id, UpdateDealParams parameters) {
        return updateWithServiceResponseAsync(id, parameters).toBlocking().single().body();
    }

    /**
     * 取引（収入／支出）の更新.
     * 指定した事業所の取引（収入／支出）を更新する.
     *
     * @param id 取引ID
     * @param parameters 取引（収入／支出）の更新
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DealsResponse> updateAsync(int id, UpdateDealParams parameters, final ServiceCallback<DealsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(id, parameters), serviceCallback);
    }

    /**
     * 取引（収入／支出）の更新.
     * 指定した事業所の取引（収入／支出）を更新する.
     *
     * @param id 取引ID
     * @param parameters 取引（収入／支出）の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    public Observable<DealsResponse> updateAsync(int id, UpdateDealParams parameters) {
        return updateWithServiceResponseAsync(id, parameters).map(new Func1<ServiceResponse<DealsResponse>, DealsResponse>() {
            @Override
            public DealsResponse call(ServiceResponse<DealsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 取引（収入／支出）の更新.
     * 指定した事業所の取引（収入／支出）を更新する.
     *
     * @param id 取引ID
     * @param parameters 取引（収入／支出）の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    public Observable<ServiceResponse<DealsResponse>> updateWithServiceResponseAsync(int id, UpdateDealParams parameters) {
        Validator.validate(parameters);
        return service.update(id, parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DealsResponse>>>() {
                @Override
                public Observable<ServiceResponse<DealsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DealsResponse> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DealsResponse> updateDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<DealsResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DealsResponse>() { }.getType())
                .build(response);
    }

}
