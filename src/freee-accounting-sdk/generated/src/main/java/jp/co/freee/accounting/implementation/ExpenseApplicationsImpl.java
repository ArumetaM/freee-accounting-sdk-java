/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.implementation;

import retrofit2.Retrofit;
import jp.co.freee.accounting.ExpenseApplications;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import jp.co.freee.accounting.models.CreateExpenseApplicationParams;
import jp.co.freee.accounting.models.ExpenseApplicationsResponse;
import jp.co.freee.accounting.models.UpdateExpenseApplicationParams;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ExpenseApplications.
 */
public class ExpenseApplicationsImpl implements ExpenseApplications {
    /** The Retrofit service to perform REST calls. */
    private ExpenseApplicationsService service;
    /** The service client containing this operation class. */
    private AccountingClientImpl client;

    /**
     * Initializes an instance of ExpenseApplications.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ExpenseApplicationsImpl(Retrofit retrofit, AccountingClientImpl client) {
        this.service = retrofit.create(ExpenseApplicationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ExpenseApplications to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ExpenseApplicationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.ExpenseApplications create" })
        @POST("expense_applications")
        Observable<Response<ResponseBody>> create(@Body CreateExpenseApplicationParams parameters);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.ExpenseApplications update" })
        @PUT("expense_applications/{id}")
        Observable<Response<ResponseBody>> update(@Path("id") int id, @Body UpdateExpenseApplicationParams parameters);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.ExpenseApplications destroy" })
        @HTTP(path = "expense_applications/{id}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> destroy(@Path("id") int id, @Query("company_id") int companyId);

    }

    /**
     * 経費申請の作成.
     * 指定した事業所の経費申請を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExpenseApplicationsResponse object if successful.
     */
    public ExpenseApplicationsResponse create() {
        return createWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * 経費申請の作成.
     * 指定した事業所の経費申請を作成する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ExpenseApplicationsResponse> createAsync(final ServiceCallback<ExpenseApplicationsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * 経費申請の作成.
     * 指定した事業所の経費申請を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExpenseApplicationsResponse object
     */
    public Observable<ExpenseApplicationsResponse> createAsync() {
        return createWithServiceResponseAsync().map(new Func1<ServiceResponse<ExpenseApplicationsResponse>, ExpenseApplicationsResponse>() {
            @Override
            public ExpenseApplicationsResponse call(ServiceResponse<ExpenseApplicationsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 経費申請の作成.
     * 指定した事業所の経費申請を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExpenseApplicationsResponse object
     */
    public Observable<ServiceResponse<ExpenseApplicationsResponse>> createWithServiceResponseAsync() {
        final CreateExpenseApplicationParams parameters = null;
        return service.create(parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ExpenseApplicationsResponse>>>() {
                @Override
                public Observable<ServiceResponse<ExpenseApplicationsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ExpenseApplicationsResponse> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 経費申請の作成.
     * 指定した事業所の経費申請を作成する.
     *
     * @param parameters 経費申請の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExpenseApplicationsResponse object if successful.
     */
    public ExpenseApplicationsResponse create(CreateExpenseApplicationParams parameters) {
        return createWithServiceResponseAsync(parameters).toBlocking().single().body();
    }

    /**
     * 経費申請の作成.
     * 指定した事業所の経費申請を作成する.
     *
     * @param parameters 経費申請の作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ExpenseApplicationsResponse> createAsync(CreateExpenseApplicationParams parameters, final ServiceCallback<ExpenseApplicationsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(parameters), serviceCallback);
    }

    /**
     * 経費申請の作成.
     * 指定した事業所の経費申請を作成する.
     *
     * @param parameters 経費申請の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExpenseApplicationsResponse object
     */
    public Observable<ExpenseApplicationsResponse> createAsync(CreateExpenseApplicationParams parameters) {
        return createWithServiceResponseAsync(parameters).map(new Func1<ServiceResponse<ExpenseApplicationsResponse>, ExpenseApplicationsResponse>() {
            @Override
            public ExpenseApplicationsResponse call(ServiceResponse<ExpenseApplicationsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 経費申請の作成.
     * 指定した事業所の経費申請を作成する.
     *
     * @param parameters 経費申請の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExpenseApplicationsResponse object
     */
    public Observable<ServiceResponse<ExpenseApplicationsResponse>> createWithServiceResponseAsync(CreateExpenseApplicationParams parameters) {
        Validator.validate(parameters);
        return service.create(parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ExpenseApplicationsResponse>>>() {
                @Override
                public Observable<ServiceResponse<ExpenseApplicationsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ExpenseApplicationsResponse> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ExpenseApplicationsResponse> createDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<ExpenseApplicationsResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<ExpenseApplicationsResponse>() { }.getType())
                .build(response);
    }

    /**
     * 経費申請の更新.
     * 指定した事業所の経費申請を更新する.
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExpenseApplicationsResponse object if successful.
     */
    public ExpenseApplicationsResponse update(int id) {
        return updateWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * 経費申請の更新.
     * 指定した事業所の経費申請を更新する.
     *
     * @param id the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ExpenseApplicationsResponse> updateAsync(int id, final ServiceCallback<ExpenseApplicationsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * 経費申請の更新.
     * 指定した事業所の経費申請を更新する.
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExpenseApplicationsResponse object
     */
    public Observable<ExpenseApplicationsResponse> updateAsync(int id) {
        return updateWithServiceResponseAsync(id).map(new Func1<ServiceResponse<ExpenseApplicationsResponse>, ExpenseApplicationsResponse>() {
            @Override
            public ExpenseApplicationsResponse call(ServiceResponse<ExpenseApplicationsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 経費申請の更新.
     * 指定した事業所の経費申請を更新する.
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExpenseApplicationsResponse object
     */
    public Observable<ServiceResponse<ExpenseApplicationsResponse>> updateWithServiceResponseAsync(int id) {
        final UpdateExpenseApplicationParams parameters = null;
        return service.update(id, parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ExpenseApplicationsResponse>>>() {
                @Override
                public Observable<ServiceResponse<ExpenseApplicationsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ExpenseApplicationsResponse> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 経費申請の更新.
     * 指定した事業所の経費申請を更新する.
     *
     * @param id the int value
     * @param parameters 経費申請の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExpenseApplicationsResponse object if successful.
     */
    public ExpenseApplicationsResponse update(int id, UpdateExpenseApplicationParams parameters) {
        return updateWithServiceResponseAsync(id, parameters).toBlocking().single().body();
    }

    /**
     * 経費申請の更新.
     * 指定した事業所の経費申請を更新する.
     *
     * @param id the int value
     * @param parameters 経費申請の更新
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ExpenseApplicationsResponse> updateAsync(int id, UpdateExpenseApplicationParams parameters, final ServiceCallback<ExpenseApplicationsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(id, parameters), serviceCallback);
    }

    /**
     * 経費申請の更新.
     * 指定した事業所の経費申請を更新する.
     *
     * @param id the int value
     * @param parameters 経費申請の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExpenseApplicationsResponse object
     */
    public Observable<ExpenseApplicationsResponse> updateAsync(int id, UpdateExpenseApplicationParams parameters) {
        return updateWithServiceResponseAsync(id, parameters).map(new Func1<ServiceResponse<ExpenseApplicationsResponse>, ExpenseApplicationsResponse>() {
            @Override
            public ExpenseApplicationsResponse call(ServiceResponse<ExpenseApplicationsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 経費申請の更新.
     * 指定した事業所の経費申請を更新する.
     *
     * @param id the int value
     * @param parameters 経費申請の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExpenseApplicationsResponse object
     */
    public Observable<ServiceResponse<ExpenseApplicationsResponse>> updateWithServiceResponseAsync(int id, UpdateExpenseApplicationParams parameters) {
        Validator.validate(parameters);
        return service.update(id, parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ExpenseApplicationsResponse>>>() {
                @Override
                public Observable<ServiceResponse<ExpenseApplicationsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ExpenseApplicationsResponse> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ExpenseApplicationsResponse> updateDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<ExpenseApplicationsResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ExpenseApplicationsResponse>() { }.getType())
                .build(response);
    }

    /**
     * 経費申請の削除.
     * 指定した事業所の経費申請を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void destroy(int id, int companyId) {
        destroyWithServiceResponseAsync(id, companyId).toBlocking().single().body();
    }

    /**
     * 経費申請の削除.
     * 指定した事業所の経費申請を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> destroyAsync(int id, int companyId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(destroyWithServiceResponseAsync(id, companyId), serviceCallback);
    }

    /**
     * 経費申請の削除.
     * 指定した事業所の経費申請を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> destroyAsync(int id, int companyId) {
        return destroyWithServiceResponseAsync(id, companyId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * 経費申請の削除.
     * 指定した事業所の経費申請を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> destroyWithServiceResponseAsync(int id, int companyId) {
        return service.destroy(id, companyId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = destroyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> destroyDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .build(response);
    }

}
