/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.implementation;

import retrofit2.Retrofit;
import jp.co.freee.accounting.Items;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import jp.co.freee.accounting.models.CreateItemParams;
import jp.co.freee.accounting.models.ItemsCreateResponse;
import jp.co.freee.accounting.models.ItemsIndexResponse;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Items.
 */
public class ItemsImpl implements Items {
    /** The Retrofit service to perform REST calls. */
    private ItemsService service;
    /** The service client containing this operation class. */
    private AccountingClientImpl client;

    /**
     * Initializes an instance of Items.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ItemsImpl(Retrofit retrofit, AccountingClientImpl client) {
        this.service = retrofit.create(ItemsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Items to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ItemsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Items list" })
        @GET("items")
        Observable<Response<ResponseBody>> list(@Query("company_id") int companyId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Items create" })
        @POST("items")
        Observable<Response<ResponseBody>> create(@Body CreateItemParams parameters);

    }

    /**
     * 品目一覧の取得.
     * 指定した事業所の品目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ItemsIndexResponse object if successful.
     */
    public ItemsIndexResponse list(int companyId) {
        return listWithServiceResponseAsync(companyId).toBlocking().single().body();
    }

    /**
     * 品目一覧の取得.
     * 指定した事業所の品目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ItemsIndexResponse> listAsync(int companyId, final ServiceCallback<ItemsIndexResponse> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(companyId), serviceCallback);
    }

    /**
     * 品目一覧の取得.
     * 指定した事業所の品目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ItemsIndexResponse object
     */
    public Observable<ItemsIndexResponse> listAsync(int companyId) {
        return listWithServiceResponseAsync(companyId).map(new Func1<ServiceResponse<ItemsIndexResponse>, ItemsIndexResponse>() {
            @Override
            public ItemsIndexResponse call(ServiceResponse<ItemsIndexResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 品目一覧の取得.
     * 指定した事業所の品目一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ItemsIndexResponse object
     */
    public Observable<ServiceResponse<ItemsIndexResponse>> listWithServiceResponseAsync(int companyId) {
        return service.list(companyId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ItemsIndexResponse>>>() {
                @Override
                public Observable<ServiceResponse<ItemsIndexResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ItemsIndexResponse> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ItemsIndexResponse> listDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<ItemsIndexResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ItemsIndexResponse>() { }.getType())
                .build(response);
    }

    /**
     * 品目の作成.
     * 指定した事業所の品目を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ItemsCreateResponse object if successful.
     */
    public ItemsCreateResponse create() {
        return createWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * 品目の作成.
     * 指定した事業所の品目を作成する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ItemsCreateResponse> createAsync(final ServiceCallback<ItemsCreateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * 品目の作成.
     * 指定した事業所の品目を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ItemsCreateResponse object
     */
    public Observable<ItemsCreateResponse> createAsync() {
        return createWithServiceResponseAsync().map(new Func1<ServiceResponse<ItemsCreateResponse>, ItemsCreateResponse>() {
            @Override
            public ItemsCreateResponse call(ServiceResponse<ItemsCreateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 品目の作成.
     * 指定した事業所の品目を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ItemsCreateResponse object
     */
    public Observable<ServiceResponse<ItemsCreateResponse>> createWithServiceResponseAsync() {
        final CreateItemParams parameters = null;
        return service.create(parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ItemsCreateResponse>>>() {
                @Override
                public Observable<ServiceResponse<ItemsCreateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ItemsCreateResponse> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 品目の作成.
     * 指定した事業所の品目を作成する.
     *
     * @param parameters 品目の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ItemsCreateResponse object if successful.
     */
    public ItemsCreateResponse create(CreateItemParams parameters) {
        return createWithServiceResponseAsync(parameters).toBlocking().single().body();
    }

    /**
     * 品目の作成.
     * 指定した事業所の品目を作成する.
     *
     * @param parameters 品目の作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ItemsCreateResponse> createAsync(CreateItemParams parameters, final ServiceCallback<ItemsCreateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(parameters), serviceCallback);
    }

    /**
     * 品目の作成.
     * 指定した事業所の品目を作成する.
     *
     * @param parameters 品目の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ItemsCreateResponse object
     */
    public Observable<ItemsCreateResponse> createAsync(CreateItemParams parameters) {
        return createWithServiceResponseAsync(parameters).map(new Func1<ServiceResponse<ItemsCreateResponse>, ItemsCreateResponse>() {
            @Override
            public ItemsCreateResponse call(ServiceResponse<ItemsCreateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 品目の作成.
     * 指定した事業所の品目を作成する.
     *
     * @param parameters 品目の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ItemsCreateResponse object
     */
    public Observable<ServiceResponse<ItemsCreateResponse>> createWithServiceResponseAsync(CreateItemParams parameters) {
        Validator.validate(parameters);
        return service.create(parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ItemsCreateResponse>>>() {
                @Override
                public Observable<ServiceResponse<ItemsCreateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ItemsCreateResponse> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ItemsCreateResponse> createDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<ItemsCreateResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<ItemsCreateResponse>() { }.getType())
                .build(response);
    }

}
