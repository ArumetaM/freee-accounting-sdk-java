/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.implementation;

import retrofit2.Retrofit;
import jp.co.freee.accounting.Journals;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.CollectionFormat;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import jp.co.freee.accounting.models.JournalsEnqueueJournalsResponse;
import jp.co.freee.accounting.models.JournalsStatusResponse;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Journals.
 */
public class JournalsImpl implements Journals {
    /** The Retrofit service to perform REST calls. */
    private JournalsService service;
    /** The service client containing this operation class. */
    private AccountingClientImpl client;

    /**
     * Initializes an instance of Journals.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public JournalsImpl(Retrofit retrofit, AccountingClientImpl client) {
        this.service = retrofit.create(JournalsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Journals to be
     * used by Retrofit to perform actually REST calls.
     */
    interface JournalsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Journals get" })
        @GET("journals")
        Observable<Response<ResponseBody>> get(@Query("download_type") String downloadType, @Query("company_id") int companyId, @Query("visible_tags") String visibleTags, @Query("start_date") String startDate, @Query("end_date") String endDate);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Journals getStatus" })
        @GET("journals/reports/{id}/status")
        Observable<Response<ResponseBody>> getStatus(@Path("id") int id, @Query("company_id") int companyId, @Query("visible_tags") String visibleTags, @Query("start_date") String startDate, @Query("end_date") String endDate);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Journals download" })
        @GET("journals/reports/{id}/download")
        Observable<Response<ResponseBody>> download(@Path("id") int id, @Query("company_id") int companyId);

    }

    /**
     * ダウンロード要求.
     * ユーザが所属する事業所の仕訳帳のダウンロードをリクエストします 生成されるファイルに関しては、&lt;a href="https://support.freee.co.jp/hc/ja/articles/204599604#2"&gt;ヘルプページ&lt;/a&gt;をご参照ください.
     *
     * @param downloadType ダウンロード形式. Possible values include: 'csv', 'pdf', 'yayoi', 'generic'
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JournalsEnqueueJournalsResponse object if successful.
     */
    public JournalsEnqueueJournalsResponse get(String downloadType, int companyId) {
        return getWithServiceResponseAsync(downloadType, companyId).toBlocking().single().body();
    }

    /**
     * ダウンロード要求.
     * ユーザが所属する事業所の仕訳帳のダウンロードをリクエストします 生成されるファイルに関しては、&lt;a href="https://support.freee.co.jp/hc/ja/articles/204599604#2"&gt;ヘルプページ&lt;/a&gt;をご参照ください.
     *
     * @param downloadType ダウンロード形式. Possible values include: 'csv', 'pdf', 'yayoi', 'generic'
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JournalsEnqueueJournalsResponse> getAsync(String downloadType, int companyId, final ServiceCallback<JournalsEnqueueJournalsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(downloadType, companyId), serviceCallback);
    }

    /**
     * ダウンロード要求.
     * ユーザが所属する事業所の仕訳帳のダウンロードをリクエストします 生成されるファイルに関しては、&lt;a href="https://support.freee.co.jp/hc/ja/articles/204599604#2"&gt;ヘルプページ&lt;/a&gt;をご参照ください.
     *
     * @param downloadType ダウンロード形式. Possible values include: 'csv', 'pdf', 'yayoi', 'generic'
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JournalsEnqueueJournalsResponse object
     */
    public Observable<JournalsEnqueueJournalsResponse> getAsync(String downloadType, int companyId) {
        return getWithServiceResponseAsync(downloadType, companyId).map(new Func1<ServiceResponse<JournalsEnqueueJournalsResponse>, JournalsEnqueueJournalsResponse>() {
            @Override
            public JournalsEnqueueJournalsResponse call(ServiceResponse<JournalsEnqueueJournalsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * ダウンロード要求.
     * ユーザが所属する事業所の仕訳帳のダウンロードをリクエストします 生成されるファイルに関しては、&lt;a href="https://support.freee.co.jp/hc/ja/articles/204599604#2"&gt;ヘルプページ&lt;/a&gt;をご参照ください.
     *
     * @param downloadType ダウンロード形式. Possible values include: 'csv', 'pdf', 'yayoi', 'generic'
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JournalsEnqueueJournalsResponse object
     */
    public Observable<ServiceResponse<JournalsEnqueueJournalsResponse>> getWithServiceResponseAsync(String downloadType, int companyId) {
        if (downloadType == null) {
            throw new IllegalArgumentException("Parameter downloadType is required and cannot be null.");
        }
        final List<String> visibleTags = null;
        final String startDate = null;
        final String endDate = null;
        String visibleTagsConverted = this.client.serializerAdapter().serializeList(visibleTags, CollectionFormat.CSV);
        return service.get(downloadType, companyId, visibleTagsConverted, startDate, endDate)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JournalsEnqueueJournalsResponse>>>() {
                @Override
                public Observable<ServiceResponse<JournalsEnqueueJournalsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JournalsEnqueueJournalsResponse> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * ダウンロード要求.
     * ユーザが所属する事業所の仕訳帳のダウンロードをリクエストします 生成されるファイルに関しては、&lt;a href="https://support.freee.co.jp/hc/ja/articles/204599604#2"&gt;ヘルプページ&lt;/a&gt;をご参照ください.
     *
     * @param downloadType ダウンロード形式. Possible values include: 'csv', 'pdf', 'yayoi', 'generic'
     * @param companyId 事業所ID
     * @param visibleTags 補助科目やコメントとして出力する項目
     * @param startDate 取得開始日 (yyyy-mm-dd)
     * @param endDate 取得終了日 (yyyy-mm-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JournalsEnqueueJournalsResponse object if successful.
     */
    public JournalsEnqueueJournalsResponse get(String downloadType, int companyId, List<String> visibleTags, String startDate, String endDate) {
        return getWithServiceResponseAsync(downloadType, companyId, visibleTags, startDate, endDate).toBlocking().single().body();
    }

    /**
     * ダウンロード要求.
     * ユーザが所属する事業所の仕訳帳のダウンロードをリクエストします 生成されるファイルに関しては、&lt;a href="https://support.freee.co.jp/hc/ja/articles/204599604#2"&gt;ヘルプページ&lt;/a&gt;をご参照ください.
     *
     * @param downloadType ダウンロード形式. Possible values include: 'csv', 'pdf', 'yayoi', 'generic'
     * @param companyId 事業所ID
     * @param visibleTags 補助科目やコメントとして出力する項目
     * @param startDate 取得開始日 (yyyy-mm-dd)
     * @param endDate 取得終了日 (yyyy-mm-dd)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JournalsEnqueueJournalsResponse> getAsync(String downloadType, int companyId, List<String> visibleTags, String startDate, String endDate, final ServiceCallback<JournalsEnqueueJournalsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(downloadType, companyId, visibleTags, startDate, endDate), serviceCallback);
    }

    /**
     * ダウンロード要求.
     * ユーザが所属する事業所の仕訳帳のダウンロードをリクエストします 生成されるファイルに関しては、&lt;a href="https://support.freee.co.jp/hc/ja/articles/204599604#2"&gt;ヘルプページ&lt;/a&gt;をご参照ください.
     *
     * @param downloadType ダウンロード形式. Possible values include: 'csv', 'pdf', 'yayoi', 'generic'
     * @param companyId 事業所ID
     * @param visibleTags 補助科目やコメントとして出力する項目
     * @param startDate 取得開始日 (yyyy-mm-dd)
     * @param endDate 取得終了日 (yyyy-mm-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JournalsEnqueueJournalsResponse object
     */
    public Observable<JournalsEnqueueJournalsResponse> getAsync(String downloadType, int companyId, List<String> visibleTags, String startDate, String endDate) {
        return getWithServiceResponseAsync(downloadType, companyId, visibleTags, startDate, endDate).map(new Func1<ServiceResponse<JournalsEnqueueJournalsResponse>, JournalsEnqueueJournalsResponse>() {
            @Override
            public JournalsEnqueueJournalsResponse call(ServiceResponse<JournalsEnqueueJournalsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * ダウンロード要求.
     * ユーザが所属する事業所の仕訳帳のダウンロードをリクエストします 生成されるファイルに関しては、&lt;a href="https://support.freee.co.jp/hc/ja/articles/204599604#2"&gt;ヘルプページ&lt;/a&gt;をご参照ください.
     *
     * @param downloadType ダウンロード形式. Possible values include: 'csv', 'pdf', 'yayoi', 'generic'
     * @param companyId 事業所ID
     * @param visibleTags 補助科目やコメントとして出力する項目
     * @param startDate 取得開始日 (yyyy-mm-dd)
     * @param endDate 取得終了日 (yyyy-mm-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JournalsEnqueueJournalsResponse object
     */
    public Observable<ServiceResponse<JournalsEnqueueJournalsResponse>> getWithServiceResponseAsync(String downloadType, int companyId, List<String> visibleTags, String startDate, String endDate) {
        if (downloadType == null) {
            throw new IllegalArgumentException("Parameter downloadType is required and cannot be null.");
        }
        Validator.validate(visibleTags);
        String visibleTagsConverted = this.client.serializerAdapter().serializeList(visibleTags, CollectionFormat.CSV);
        return service.get(downloadType, companyId, visibleTagsConverted, startDate, endDate)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JournalsEnqueueJournalsResponse>>>() {
                @Override
                public Observable<ServiceResponse<JournalsEnqueueJournalsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JournalsEnqueueJournalsResponse> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JournalsEnqueueJournalsResponse> getDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JournalsEnqueueJournalsResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<JournalsEnqueueJournalsResponse>() { }.getType())
                .build(response);
    }

    /**
     * ステータス確認.
     * ダウンロードリクエストのステータスを確認する.
     *
     * @param companyId 事業所ID
     * @param id 受け付けID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JournalsStatusResponse object if successful.
     */
    public JournalsStatusResponse getStatus(int companyId, int id) {
        return getStatusWithServiceResponseAsync(companyId, id).toBlocking().single().body();
    }

    /**
     * ステータス確認.
     * ダウンロードリクエストのステータスを確認する.
     *
     * @param companyId 事業所ID
     * @param id 受け付けID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JournalsStatusResponse> getStatusAsync(int companyId, int id, final ServiceCallback<JournalsStatusResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getStatusWithServiceResponseAsync(companyId, id), serviceCallback);
    }

    /**
     * ステータス確認.
     * ダウンロードリクエストのステータスを確認する.
     *
     * @param companyId 事業所ID
     * @param id 受け付けID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JournalsStatusResponse object
     */
    public Observable<JournalsStatusResponse> getStatusAsync(int companyId, int id) {
        return getStatusWithServiceResponseAsync(companyId, id).map(new Func1<ServiceResponse<JournalsStatusResponse>, JournalsStatusResponse>() {
            @Override
            public JournalsStatusResponse call(ServiceResponse<JournalsStatusResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * ステータス確認.
     * ダウンロードリクエストのステータスを確認する.
     *
     * @param companyId 事業所ID
     * @param id 受け付けID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JournalsStatusResponse object
     */
    public Observable<ServiceResponse<JournalsStatusResponse>> getStatusWithServiceResponseAsync(int companyId, int id) {
        final List<String> visibleTags = null;
        final String startDate = null;
        final String endDate = null;
        String visibleTagsConverted = this.client.serializerAdapter().serializeList(visibleTags, CollectionFormat.CSV);
        return service.getStatus(id, companyId, visibleTagsConverted, startDate, endDate)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JournalsStatusResponse>>>() {
                @Override
                public Observable<ServiceResponse<JournalsStatusResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JournalsStatusResponse> clientResponse = getStatusDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * ステータス確認.
     * ダウンロードリクエストのステータスを確認する.
     *
     * @param companyId 事業所ID
     * @param id 受け付けID
     * @param visibleTags 補助科目やコメントとして出力する項目
     * @param startDate 取得開始日 (yyyy-mm-dd)
     * @param endDate 取得終了日 (yyyy-mm-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JournalsStatusResponse object if successful.
     */
    public JournalsStatusResponse getStatus(int companyId, int id, List<String> visibleTags, String startDate, String endDate) {
        return getStatusWithServiceResponseAsync(companyId, id, visibleTags, startDate, endDate).toBlocking().single().body();
    }

    /**
     * ステータス確認.
     * ダウンロードリクエストのステータスを確認する.
     *
     * @param companyId 事業所ID
     * @param id 受け付けID
     * @param visibleTags 補助科目やコメントとして出力する項目
     * @param startDate 取得開始日 (yyyy-mm-dd)
     * @param endDate 取得終了日 (yyyy-mm-dd)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JournalsStatusResponse> getStatusAsync(int companyId, int id, List<String> visibleTags, String startDate, String endDate, final ServiceCallback<JournalsStatusResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getStatusWithServiceResponseAsync(companyId, id, visibleTags, startDate, endDate), serviceCallback);
    }

    /**
     * ステータス確認.
     * ダウンロードリクエストのステータスを確認する.
     *
     * @param companyId 事業所ID
     * @param id 受け付けID
     * @param visibleTags 補助科目やコメントとして出力する項目
     * @param startDate 取得開始日 (yyyy-mm-dd)
     * @param endDate 取得終了日 (yyyy-mm-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JournalsStatusResponse object
     */
    public Observable<JournalsStatusResponse> getStatusAsync(int companyId, int id, List<String> visibleTags, String startDate, String endDate) {
        return getStatusWithServiceResponseAsync(companyId, id, visibleTags, startDate, endDate).map(new Func1<ServiceResponse<JournalsStatusResponse>, JournalsStatusResponse>() {
            @Override
            public JournalsStatusResponse call(ServiceResponse<JournalsStatusResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * ステータス確認.
     * ダウンロードリクエストのステータスを確認する.
     *
     * @param companyId 事業所ID
     * @param id 受け付けID
     * @param visibleTags 補助科目やコメントとして出力する項目
     * @param startDate 取得開始日 (yyyy-mm-dd)
     * @param endDate 取得終了日 (yyyy-mm-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JournalsStatusResponse object
     */
    public Observable<ServiceResponse<JournalsStatusResponse>> getStatusWithServiceResponseAsync(int companyId, int id, List<String> visibleTags, String startDate, String endDate) {
        Validator.validate(visibleTags);
        String visibleTagsConverted = this.client.serializerAdapter().serializeList(visibleTags, CollectionFormat.CSV);
        return service.getStatus(id, companyId, visibleTagsConverted, startDate, endDate)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JournalsStatusResponse>>>() {
                @Override
                public Observable<ServiceResponse<JournalsStatusResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JournalsStatusResponse> clientResponse = getStatusDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JournalsStatusResponse> getStatusDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<JournalsStatusResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JournalsStatusResponse>() { }.getType())
                .build(response);
    }

    /**
     * ダウンロード実行.
     * ダウンロードを実行する.
     *
     * @param id 受け付けID
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void download(int id, int companyId) {
        downloadWithServiceResponseAsync(id, companyId).toBlocking().single().body();
    }

    /**
     * ダウンロード実行.
     * ダウンロードを実行する.
     *
     * @param id 受け付けID
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> downloadAsync(int id, int companyId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(downloadWithServiceResponseAsync(id, companyId), serviceCallback);
    }

    /**
     * ダウンロード実行.
     * ダウンロードを実行する.
     *
     * @param id 受け付けID
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> downloadAsync(int id, int companyId) {
        return downloadWithServiceResponseAsync(id, companyId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * ダウンロード実行.
     * ダウンロードを実行する.
     *
     * @param id 受け付けID
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> downloadWithServiceResponseAsync(int id, int companyId) {
        return service.download(id, companyId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = downloadDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> downloadDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .build(response);
    }

}
