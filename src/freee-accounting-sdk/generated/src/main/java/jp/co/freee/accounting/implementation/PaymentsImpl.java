/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.implementation;

import retrofit2.Retrofit;
import jp.co.freee.accounting.Payments;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import jp.co.freee.accounting.models.DealPaymentParams;
import jp.co.freee.accounting.models.DealsResponse;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Payments.
 */
public class PaymentsImpl implements Payments {
    /** The Retrofit service to perform REST calls. */
    private PaymentsService service;
    /** The service client containing this operation class. */
    private AccountingClientImpl client;

    /**
     * Initializes an instance of Payments.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PaymentsImpl(Retrofit retrofit, AccountingClientImpl client) {
        this.service = retrofit.create(PaymentsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Payments to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PaymentsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Payments createDeal" })
        @POST("deals/{id}/payments")
        Observable<Response<ResponseBody>> createDeal(@Path("id") int id, @Body DealPaymentParams parameters);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Payments updateDeal" })
        @PUT("deals/{id}/payments/{payment_id}")
        Observable<Response<ResponseBody>> updateDeal(@Path("id") int id, @Path("payment_id") int paymentId, @Body DealPaymentParams parameters);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Payments destroyDeal" })
        @HTTP(path = "deals/{id}/payments/{payment_id}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> destroyDeal(@Path("id") int id, @Path("payment_id") int paymentId, @Query("company_id") int companyId);

    }

    /**
     * 取引（収入／支出）の支払行作成.
     * 指定した事業所の取引（収入／支出）の支払行を作成する.
     *
     * @param id 取引ID
     * @param parameters 取引（収入／支出）の支払行作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsResponse object if successful.
     */
    public DealsResponse createDeal(int id, DealPaymentParams parameters) {
        return createDealWithServiceResponseAsync(id, parameters).toBlocking().single().body();
    }

    /**
     * 取引（収入／支出）の支払行作成.
     * 指定した事業所の取引（収入／支出）の支払行を作成する.
     *
     * @param id 取引ID
     * @param parameters 取引（収入／支出）の支払行作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DealsResponse> createDealAsync(int id, DealPaymentParams parameters, final ServiceCallback<DealsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(createDealWithServiceResponseAsync(id, parameters), serviceCallback);
    }

    /**
     * 取引（収入／支出）の支払行作成.
     * 指定した事業所の取引（収入／支出）の支払行を作成する.
     *
     * @param id 取引ID
     * @param parameters 取引（収入／支出）の支払行作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    public Observable<DealsResponse> createDealAsync(int id, DealPaymentParams parameters) {
        return createDealWithServiceResponseAsync(id, parameters).map(new Func1<ServiceResponse<DealsResponse>, DealsResponse>() {
            @Override
            public DealsResponse call(ServiceResponse<DealsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 取引（収入／支出）の支払行作成.
     * 指定した事業所の取引（収入／支出）の支払行を作成する.
     *
     * @param id 取引ID
     * @param parameters 取引（収入／支出）の支払行作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    public Observable<ServiceResponse<DealsResponse>> createDealWithServiceResponseAsync(int id, DealPaymentParams parameters) {
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createDeal(id, parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DealsResponse>>>() {
                @Override
                public Observable<ServiceResponse<DealsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DealsResponse> clientResponse = createDealDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DealsResponse> createDealDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DealsResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<DealsResponse>() { }.getType())
                .build(response);
    }

    /**
     * 取引（収入／支出）の支払行更新.
     * 指定した事業所の取引（収入／支出）の支払行を更新する.
     *
     * @param id 取引ID
     * @param paymentId 決済ID
     * @param parameters 取引（収入／支出）の支払行更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DealsResponse object if successful.
     */
    public DealsResponse updateDeal(int id, int paymentId, DealPaymentParams parameters) {
        return updateDealWithServiceResponseAsync(id, paymentId, parameters).toBlocking().single().body();
    }

    /**
     * 取引（収入／支出）の支払行更新.
     * 指定した事業所の取引（収入／支出）の支払行を更新する.
     *
     * @param id 取引ID
     * @param paymentId 決済ID
     * @param parameters 取引（収入／支出）の支払行更新
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DealsResponse> updateDealAsync(int id, int paymentId, DealPaymentParams parameters, final ServiceCallback<DealsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(updateDealWithServiceResponseAsync(id, paymentId, parameters), serviceCallback);
    }

    /**
     * 取引（収入／支出）の支払行更新.
     * 指定した事業所の取引（収入／支出）の支払行を更新する.
     *
     * @param id 取引ID
     * @param paymentId 決済ID
     * @param parameters 取引（収入／支出）の支払行更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    public Observable<DealsResponse> updateDealAsync(int id, int paymentId, DealPaymentParams parameters) {
        return updateDealWithServiceResponseAsync(id, paymentId, parameters).map(new Func1<ServiceResponse<DealsResponse>, DealsResponse>() {
            @Override
            public DealsResponse call(ServiceResponse<DealsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 取引（収入／支出）の支払行更新.
     * 指定した事業所の取引（収入／支出）の支払行を更新する.
     *
     * @param id 取引ID
     * @param paymentId 決済ID
     * @param parameters 取引（収入／支出）の支払行更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DealsResponse object
     */
    public Observable<ServiceResponse<DealsResponse>> updateDealWithServiceResponseAsync(int id, int paymentId, DealPaymentParams parameters) {
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.updateDeal(id, paymentId, parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DealsResponse>>>() {
                @Override
                public Observable<ServiceResponse<DealsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DealsResponse> clientResponse = updateDealDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DealsResponse> updateDealDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DealsResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DealsResponse>() { }.getType())
                .build(response);
    }

    /**
     * 取引（収入／支出）の支払行削除.
     * 指定した事業所の取引（収入／支出）の支払行を削除する.
     *
     * @param id 取引ID
     * @param paymentId 決済ID
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void destroyDeal(int id, int paymentId, int companyId) {
        destroyDealWithServiceResponseAsync(id, paymentId, companyId).toBlocking().single().body();
    }

    /**
     * 取引（収入／支出）の支払行削除.
     * 指定した事業所の取引（収入／支出）の支払行を削除する.
     *
     * @param id 取引ID
     * @param paymentId 決済ID
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> destroyDealAsync(int id, int paymentId, int companyId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(destroyDealWithServiceResponseAsync(id, paymentId, companyId), serviceCallback);
    }

    /**
     * 取引（収入／支出）の支払行削除.
     * 指定した事業所の取引（収入／支出）の支払行を削除する.
     *
     * @param id 取引ID
     * @param paymentId 決済ID
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> destroyDealAsync(int id, int paymentId, int companyId) {
        return destroyDealWithServiceResponseAsync(id, paymentId, companyId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * 取引（収入／支出）の支払行削除.
     * 指定した事業所の取引（収入／支出）の支払行を削除する.
     *
     * @param id 取引ID
     * @param paymentId 決済ID
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> destroyDealWithServiceResponseAsync(int id, int paymentId, int companyId) {
        return service.destroyDeal(id, paymentId, companyId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = destroyDealDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> destroyDealDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .build(response);
    }

}
