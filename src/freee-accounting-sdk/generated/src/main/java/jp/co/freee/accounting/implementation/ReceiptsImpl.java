/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.implementation;

import retrofit2.Retrofit;
import jp.co.freee.accounting.Receipts;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.InputStream;
import java.io.IOException;
import jp.co.freee.accounting.models.ReceiptCreateResponse;
import okhttp3.MediaType;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.http.Multipart;
import retrofit2.http.Part;
import retrofit2.http.POST;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Receipts.
 */
public class ReceiptsImpl implements Receipts {
    /** The Retrofit service to perform REST calls. */
    private ReceiptsService service;
    /** The service client containing this operation class. */
    private AccountingClientImpl client;

    /**
     * Initializes an instance of Receipts.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReceiptsImpl(Retrofit retrofit, AccountingClientImpl client) {
        this.service = retrofit.create(ReceiptsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Receipts to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReceiptsService {
        @Multipart
        @POST("receipts")
        Observable<Response<ResponseBody>> create(@Part("company_id") int companyId, @Part("description") String description, @Part("issue_date") String issueDate, @Part("receipt") RequestBody receipt);

    }

    /**
     * ファイルボックス 証憑ファイルアップロード.
     * ファイルボックスに証憑ファイルをアップロードする.
     *
     * @param companyId 事業所ID
     * @param receipt 証憑ファイル
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReceiptCreateResponse object if successful.
     */
    public ReceiptCreateResponse create(int companyId, byte[] receipt) {
        return createWithServiceResponseAsync(companyId, receipt).toBlocking().single().body();
    }

    /**
     * ファイルボックス 証憑ファイルアップロード.
     * ファイルボックスに証憑ファイルをアップロードする.
     *
     * @param companyId 事業所ID
     * @param receipt 証憑ファイル
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReceiptCreateResponse> createAsync(int companyId, byte[] receipt, final ServiceCallback<ReceiptCreateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(companyId, receipt), serviceCallback);
    }

    /**
     * ファイルボックス 証憑ファイルアップロード.
     * ファイルボックスに証憑ファイルをアップロードする.
     *
     * @param companyId 事業所ID
     * @param receipt 証憑ファイル
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReceiptCreateResponse object
     */
    public Observable<ReceiptCreateResponse> createAsync(int companyId, byte[] receipt) {
        return createWithServiceResponseAsync(companyId, receipt).map(new Func1<ServiceResponse<ReceiptCreateResponse>, ReceiptCreateResponse>() {
            @Override
            public ReceiptCreateResponse call(ServiceResponse<ReceiptCreateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * ファイルボックス 証憑ファイルアップロード.
     * ファイルボックスに証憑ファイルをアップロードする.
     *
     * @param companyId 事業所ID
     * @param receipt 証憑ファイル
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReceiptCreateResponse object
     */
    public Observable<ServiceResponse<ReceiptCreateResponse>> createWithServiceResponseAsync(int companyId, byte[] receipt) {
        if (receipt == null) {
            throw new IllegalArgumentException("Parameter receipt is required and cannot be null.");
        }
        final String description = null;
        final String issueDate = null;
        RequestBody receiptConverted = RequestBody.create(MediaType.parse("multipart/form-data"), receipt);
        return service.create(companyId, description, issueDate, receiptConverted)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReceiptCreateResponse>>>() {
                @Override
                public Observable<ServiceResponse<ReceiptCreateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReceiptCreateResponse> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * ファイルボックス 証憑ファイルアップロード.
     * ファイルボックスに証憑ファイルをアップロードする.
     *
     * @param companyId 事業所ID
     * @param receipt 証憑ファイル
     * @param description メモ (255文字以内)
     * @param issueDate 取引日 (yyyy-mm-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReceiptCreateResponse object if successful.
     */
    public ReceiptCreateResponse create(int companyId, byte[] receipt, String description, String issueDate) {
        return createWithServiceResponseAsync(companyId, receipt, description, issueDate).toBlocking().single().body();
    }

    /**
     * ファイルボックス 証憑ファイルアップロード.
     * ファイルボックスに証憑ファイルをアップロードする.
     *
     * @param companyId 事業所ID
     * @param receipt 証憑ファイル
     * @param description メモ (255文字以内)
     * @param issueDate 取引日 (yyyy-mm-dd)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ReceiptCreateResponse> createAsync(int companyId, byte[] receipt, String description, String issueDate, final ServiceCallback<ReceiptCreateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(companyId, receipt, description, issueDate), serviceCallback);
    }

    /**
     * ファイルボックス 証憑ファイルアップロード.
     * ファイルボックスに証憑ファイルをアップロードする.
     *
     * @param companyId 事業所ID
     * @param receipt 証憑ファイル
     * @param description メモ (255文字以内)
     * @param issueDate 取引日 (yyyy-mm-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReceiptCreateResponse object
     */
    public Observable<ReceiptCreateResponse> createAsync(int companyId, byte[] receipt, String description, String issueDate) {
        return createWithServiceResponseAsync(companyId, receipt, description, issueDate).map(new Func1<ServiceResponse<ReceiptCreateResponse>, ReceiptCreateResponse>() {
            @Override
            public ReceiptCreateResponse call(ServiceResponse<ReceiptCreateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * ファイルボックス 証憑ファイルアップロード.
     * ファイルボックスに証憑ファイルをアップロードする.
     *
     * @param companyId 事業所ID
     * @param receipt 証憑ファイル
     * @param description メモ (255文字以内)
     * @param issueDate 取引日 (yyyy-mm-dd)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReceiptCreateResponse object
     */
    public Observable<ServiceResponse<ReceiptCreateResponse>> createWithServiceResponseAsync(int companyId, byte[] receipt, String description, String issueDate) {
        if (receipt == null) {
            throw new IllegalArgumentException("Parameter receipt is required and cannot be null.");
        }
        RequestBody receiptConverted = RequestBody.create(MediaType.parse("multipart/form-data"), receipt);
        return service.create(companyId, description, issueDate, receiptConverted)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ReceiptCreateResponse>>>() {
                @Override
                public Observable<ServiceResponse<ReceiptCreateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ReceiptCreateResponse> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ReceiptCreateResponse> createDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ReceiptCreateResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<ReceiptCreateResponse>() { }.getType())
                .build(response);
    }

}
