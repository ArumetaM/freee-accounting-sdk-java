/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.implementation;

import retrofit2.Retrofit;
import jp.co.freee.accounting.Sections;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import jp.co.freee.accounting.models.SectionParams;
import jp.co.freee.accounting.models.SectionsCreateResponse;
import jp.co.freee.accounting.models.SectionsIndexResponse;
import jp.co.freee.accounting.models.SectionsUpdateResponse;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Sections.
 */
public class SectionsImpl implements Sections {
    /** The Retrofit service to perform REST calls. */
    private SectionsService service;
    /** The service client containing this operation class. */
    private AccountingClientImpl client;

    /**
     * Initializes an instance of Sections.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SectionsImpl(Retrofit retrofit, AccountingClientImpl client) {
        this.service = retrofit.create(SectionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Sections to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SectionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Sections list" })
        @GET("sections")
        Observable<Response<ResponseBody>> list(@Query("company_id") int companyId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Sections create" })
        @POST("sections")
        Observable<Response<ResponseBody>> create(@Body SectionParams parameters);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Sections update" })
        @PUT("sections/{id}")
        Observable<Response<ResponseBody>> update(@Path("id") int id, @Body SectionParams parameters);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Sections destroy" })
        @HTTP(path = "sections/{id}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> destroy(@Path("id") int id, @Query("company_id") int companyId);

    }

    /**
     * 部門一覧の取得.
     * 指定した事業所の部門一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SectionsIndexResponse object if successful.
     */
    public SectionsIndexResponse list(int companyId) {
        return listWithServiceResponseAsync(companyId).toBlocking().single().body();
    }

    /**
     * 部門一覧の取得.
     * 指定した事業所の部門一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SectionsIndexResponse> listAsync(int companyId, final ServiceCallback<SectionsIndexResponse> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(companyId), serviceCallback);
    }

    /**
     * 部門一覧の取得.
     * 指定した事業所の部門一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsIndexResponse object
     */
    public Observable<SectionsIndexResponse> listAsync(int companyId) {
        return listWithServiceResponseAsync(companyId).map(new Func1<ServiceResponse<SectionsIndexResponse>, SectionsIndexResponse>() {
            @Override
            public SectionsIndexResponse call(ServiceResponse<SectionsIndexResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 部門一覧の取得.
     * 指定した事業所の部門一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsIndexResponse object
     */
    public Observable<ServiceResponse<SectionsIndexResponse>> listWithServiceResponseAsync(int companyId) {
        return service.list(companyId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SectionsIndexResponse>>>() {
                @Override
                public Observable<ServiceResponse<SectionsIndexResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SectionsIndexResponse> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SectionsIndexResponse> listDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<SectionsIndexResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SectionsIndexResponse>() { }.getType())
                .build(response);
    }

    /**
     * 部門の作成.
     * 指定した事業所の部門を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SectionsCreateResponse object if successful.
     */
    public SectionsCreateResponse create() {
        return createWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * 部門の作成.
     * 指定した事業所の部門を作成する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SectionsCreateResponse> createAsync(final ServiceCallback<SectionsCreateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * 部門の作成.
     * 指定した事業所の部門を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsCreateResponse object
     */
    public Observable<SectionsCreateResponse> createAsync() {
        return createWithServiceResponseAsync().map(new Func1<ServiceResponse<SectionsCreateResponse>, SectionsCreateResponse>() {
            @Override
            public SectionsCreateResponse call(ServiceResponse<SectionsCreateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 部門の作成.
     * 指定した事業所の部門を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsCreateResponse object
     */
    public Observable<ServiceResponse<SectionsCreateResponse>> createWithServiceResponseAsync() {
        final SectionParams parameters = null;
        return service.create(parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SectionsCreateResponse>>>() {
                @Override
                public Observable<ServiceResponse<SectionsCreateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SectionsCreateResponse> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 部門の作成.
     * 指定した事業所の部門を作成する.
     *
     * @param parameters 部門の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SectionsCreateResponse object if successful.
     */
    public SectionsCreateResponse create(SectionParams parameters) {
        return createWithServiceResponseAsync(parameters).toBlocking().single().body();
    }

    /**
     * 部門の作成.
     * 指定した事業所の部門を作成する.
     *
     * @param parameters 部門の作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SectionsCreateResponse> createAsync(SectionParams parameters, final ServiceCallback<SectionsCreateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(parameters), serviceCallback);
    }

    /**
     * 部門の作成.
     * 指定した事業所の部門を作成する.
     *
     * @param parameters 部門の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsCreateResponse object
     */
    public Observable<SectionsCreateResponse> createAsync(SectionParams parameters) {
        return createWithServiceResponseAsync(parameters).map(new Func1<ServiceResponse<SectionsCreateResponse>, SectionsCreateResponse>() {
            @Override
            public SectionsCreateResponse call(ServiceResponse<SectionsCreateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 部門の作成.
     * 指定した事業所の部門を作成する.
     *
     * @param parameters 部門の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsCreateResponse object
     */
    public Observable<ServiceResponse<SectionsCreateResponse>> createWithServiceResponseAsync(SectionParams parameters) {
        Validator.validate(parameters);
        return service.create(parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SectionsCreateResponse>>>() {
                @Override
                public Observable<ServiceResponse<SectionsCreateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SectionsCreateResponse> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SectionsCreateResponse> createDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<SectionsCreateResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<SectionsCreateResponse>() { }.getType())
                .build(response);
    }

    /**
     * 部門の更新.
     * 指定した事業所の部門を更新する.
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SectionsUpdateResponse object if successful.
     */
    public SectionsUpdateResponse update(int id) {
        return updateWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * 部門の更新.
     * 指定した事業所の部門を更新する.
     *
     * @param id the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SectionsUpdateResponse> updateAsync(int id, final ServiceCallback<SectionsUpdateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * 部門の更新.
     * 指定した事業所の部門を更新する.
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsUpdateResponse object
     */
    public Observable<SectionsUpdateResponse> updateAsync(int id) {
        return updateWithServiceResponseAsync(id).map(new Func1<ServiceResponse<SectionsUpdateResponse>, SectionsUpdateResponse>() {
            @Override
            public SectionsUpdateResponse call(ServiceResponse<SectionsUpdateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 部門の更新.
     * 指定した事業所の部門を更新する.
     *
     * @param id the int value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsUpdateResponse object
     */
    public Observable<ServiceResponse<SectionsUpdateResponse>> updateWithServiceResponseAsync(int id) {
        final SectionParams parameters = null;
        return service.update(id, parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SectionsUpdateResponse>>>() {
                @Override
                public Observable<ServiceResponse<SectionsUpdateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SectionsUpdateResponse> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 部門の更新.
     * 指定した事業所の部門を更新する.
     *
     * @param id the int value
     * @param parameters 部門の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SectionsUpdateResponse object if successful.
     */
    public SectionsUpdateResponse update(int id, SectionParams parameters) {
        return updateWithServiceResponseAsync(id, parameters).toBlocking().single().body();
    }

    /**
     * 部門の更新.
     * 指定した事業所の部門を更新する.
     *
     * @param id the int value
     * @param parameters 部門の更新
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SectionsUpdateResponse> updateAsync(int id, SectionParams parameters, final ServiceCallback<SectionsUpdateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(id, parameters), serviceCallback);
    }

    /**
     * 部門の更新.
     * 指定した事業所の部門を更新する.
     *
     * @param id the int value
     * @param parameters 部門の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsUpdateResponse object
     */
    public Observable<SectionsUpdateResponse> updateAsync(int id, SectionParams parameters) {
        return updateWithServiceResponseAsync(id, parameters).map(new Func1<ServiceResponse<SectionsUpdateResponse>, SectionsUpdateResponse>() {
            @Override
            public SectionsUpdateResponse call(ServiceResponse<SectionsUpdateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 部門の更新.
     * 指定した事業所の部門を更新する.
     *
     * @param id the int value
     * @param parameters 部門の更新
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SectionsUpdateResponse object
     */
    public Observable<ServiceResponse<SectionsUpdateResponse>> updateWithServiceResponseAsync(int id, SectionParams parameters) {
        Validator.validate(parameters);
        return service.update(id, parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SectionsUpdateResponse>>>() {
                @Override
                public Observable<ServiceResponse<SectionsUpdateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SectionsUpdateResponse> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SectionsUpdateResponse> updateDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<SectionsUpdateResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SectionsUpdateResponse>() { }.getType())
                .build(response);
    }

    /**
     * 部門の削除.
     * 指定した事業所の部門を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void destroy(int id, int companyId) {
        destroyWithServiceResponseAsync(id, companyId).toBlocking().single().body();
    }

    /**
     * 部門の削除.
     * 指定した事業所の部門を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> destroyAsync(int id, int companyId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(destroyWithServiceResponseAsync(id, companyId), serviceCallback);
    }

    /**
     * 部門の削除.
     * 指定した事業所の部門を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> destroyAsync(int id, int companyId) {
        return destroyWithServiceResponseAsync(id, companyId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * 部門の削除.
     * 指定した事業所の部門を削除する.
     *
     * @param id the int value
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> destroyWithServiceResponseAsync(int id, int companyId) {
        return service.destroy(id, companyId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = destroyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> destroyDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .build(response);
    }

}
