/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.implementation;

import retrofit2.Retrofit;
import jp.co.freee.accounting.SegmentTags;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import jp.co.freee.accounting.models.SegmentTagParams;
import jp.co.freee.accounting.models.SegmentTagsIndexResponse;
import jp.co.freee.accounting.models.SegmentTagsResponse;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in SegmentTags.
 */
public class SegmentTagsImpl implements SegmentTags {
    /** The Retrofit service to perform REST calls. */
    private SegmentTagsService service;
    /** The service client containing this operation class. */
    private AccountingClientImpl client;

    /**
     * Initializes an instance of SegmentTags.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SegmentTagsImpl(Retrofit retrofit, AccountingClientImpl client) {
        this.service = retrofit.create(SegmentTagsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for SegmentTags to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SegmentTagsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.SegmentTags list" })
        @GET("segments/{segment_id}/tags")
        Observable<Response<ResponseBody>> list(@Path("segment_id") int segmentId, @Query("company_id") int companyId, @Query("offset") Integer offset, @Query("limit") Integer limit);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.SegmentTags create" })
        @POST("segments/{segment_id}/tags")
        Observable<Response<ResponseBody>> create(@Path("segment_id") int segmentId, @Body SegmentTagParams parameters);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.SegmentTags update" })
        @PUT("segments/{segment_id}/tags/{id}")
        Observable<Response<ResponseBody>> update(@Path("segment_id") int segmentId, @Path("id") int id, @Body SegmentTagParams parameters);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.SegmentTags destroySegmentsTag" })
        @HTTP(path = "segments/{segment_id}/tags/{id}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> destroySegmentsTag(@Path("segment_id") int segmentId, @Path("id") int id, @Query("company_id") int companyId);

    }

    /**
     * セグメントタグ一覧の取得.
     * 指定した事業所のセグメントタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param segmentId セグメントID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SegmentTagsIndexResponse object if successful.
     */
    public SegmentTagsIndexResponse list(int companyId, int segmentId) {
        return listWithServiceResponseAsync(companyId, segmentId).toBlocking().single().body();
    }

    /**
     * セグメントタグ一覧の取得.
     * 指定した事業所のセグメントタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param segmentId セグメントID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SegmentTagsIndexResponse> listAsync(int companyId, int segmentId, final ServiceCallback<SegmentTagsIndexResponse> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(companyId, segmentId), serviceCallback);
    }

    /**
     * セグメントタグ一覧の取得.
     * 指定した事業所のセグメントタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param segmentId セグメントID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SegmentTagsIndexResponse object
     */
    public Observable<SegmentTagsIndexResponse> listAsync(int companyId, int segmentId) {
        return listWithServiceResponseAsync(companyId, segmentId).map(new Func1<ServiceResponse<SegmentTagsIndexResponse>, SegmentTagsIndexResponse>() {
            @Override
            public SegmentTagsIndexResponse call(ServiceResponse<SegmentTagsIndexResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * セグメントタグ一覧の取得.
     * 指定した事業所のセグメントタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param segmentId セグメントID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SegmentTagsIndexResponse object
     */
    public Observable<ServiceResponse<SegmentTagsIndexResponse>> listWithServiceResponseAsync(int companyId, int segmentId) {
        final Integer offset = null;
        final Integer limit = null;
        return service.list(segmentId, companyId, offset, limit)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SegmentTagsIndexResponse>>>() {
                @Override
                public Observable<ServiceResponse<SegmentTagsIndexResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SegmentTagsIndexResponse> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * セグメントタグ一覧の取得.
     * 指定した事業所のセグメントタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param segmentId セグメントID
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 500)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SegmentTagsIndexResponse object if successful.
     */
    public SegmentTagsIndexResponse list(int companyId, int segmentId, Integer offset, Integer limit) {
        return listWithServiceResponseAsync(companyId, segmentId, offset, limit).toBlocking().single().body();
    }

    /**
     * セグメントタグ一覧の取得.
     * 指定した事業所のセグメントタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param segmentId セグメントID
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 500)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SegmentTagsIndexResponse> listAsync(int companyId, int segmentId, Integer offset, Integer limit, final ServiceCallback<SegmentTagsIndexResponse> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(companyId, segmentId, offset, limit), serviceCallback);
    }

    /**
     * セグメントタグ一覧の取得.
     * 指定した事業所のセグメントタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param segmentId セグメントID
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 500)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SegmentTagsIndexResponse object
     */
    public Observable<SegmentTagsIndexResponse> listAsync(int companyId, int segmentId, Integer offset, Integer limit) {
        return listWithServiceResponseAsync(companyId, segmentId, offset, limit).map(new Func1<ServiceResponse<SegmentTagsIndexResponse>, SegmentTagsIndexResponse>() {
            @Override
            public SegmentTagsIndexResponse call(ServiceResponse<SegmentTagsIndexResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * セグメントタグ一覧の取得.
     * 指定した事業所のセグメントタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param segmentId セグメントID
     * @param offset 取得レコードのオフセット (デフォルト: 0)
     * @param limit 取得レコードの件数 (デフォルト: 20, 最大: 500)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SegmentTagsIndexResponse object
     */
    public Observable<ServiceResponse<SegmentTagsIndexResponse>> listWithServiceResponseAsync(int companyId, int segmentId, Integer offset, Integer limit) {
        return service.list(segmentId, companyId, offset, limit)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SegmentTagsIndexResponse>>>() {
                @Override
                public Observable<ServiceResponse<SegmentTagsIndexResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SegmentTagsIndexResponse> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SegmentTagsIndexResponse> listDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<SegmentTagsIndexResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SegmentTagsIndexResponse>() { }.getType())
                .build(response);
    }

    /**
     * セグメントの作成.
     * 指定した事業所のセグメントタグを作成する.
     *
     * @param parameters セグメントタグの作成
     * @param segmentId セグメントID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SegmentTagsResponse object if successful.
     */
    public SegmentTagsResponse create(SegmentTagParams parameters, int segmentId) {
        return createWithServiceResponseAsync(parameters, segmentId).toBlocking().single().body();
    }

    /**
     * セグメントの作成.
     * 指定した事業所のセグメントタグを作成する.
     *
     * @param parameters セグメントタグの作成
     * @param segmentId セグメントID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SegmentTagsResponse> createAsync(SegmentTagParams parameters, int segmentId, final ServiceCallback<SegmentTagsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(parameters, segmentId), serviceCallback);
    }

    /**
     * セグメントの作成.
     * 指定した事業所のセグメントタグを作成する.
     *
     * @param parameters セグメントタグの作成
     * @param segmentId セグメントID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SegmentTagsResponse object
     */
    public Observable<SegmentTagsResponse> createAsync(SegmentTagParams parameters, int segmentId) {
        return createWithServiceResponseAsync(parameters, segmentId).map(new Func1<ServiceResponse<SegmentTagsResponse>, SegmentTagsResponse>() {
            @Override
            public SegmentTagsResponse call(ServiceResponse<SegmentTagsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * セグメントの作成.
     * 指定した事業所のセグメントタグを作成する.
     *
     * @param parameters セグメントタグの作成
     * @param segmentId セグメントID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SegmentTagsResponse object
     */
    public Observable<ServiceResponse<SegmentTagsResponse>> createWithServiceResponseAsync(SegmentTagParams parameters, int segmentId) {
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.create(segmentId, parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SegmentTagsResponse>>>() {
                @Override
                public Observable<ServiceResponse<SegmentTagsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SegmentTagsResponse> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SegmentTagsResponse> createDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SegmentTagsResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<SegmentTagsResponse>() { }.getType())
                .build(response);
    }

    /**
     * セグメントタグの更新.
     * 指定した事業所のセグメントタグを更新する.
     *
     * @param parameters セグメントタグの作成
     * @param segmentId セグメントID
     * @param id セグメントタグID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SegmentTagsResponse object if successful.
     */
    public SegmentTagsResponse update(SegmentTagParams parameters, int segmentId, int id) {
        return updateWithServiceResponseAsync(parameters, segmentId, id).toBlocking().single().body();
    }

    /**
     * セグメントタグの更新.
     * 指定した事業所のセグメントタグを更新する.
     *
     * @param parameters セグメントタグの作成
     * @param segmentId セグメントID
     * @param id セグメントタグID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SegmentTagsResponse> updateAsync(SegmentTagParams parameters, int segmentId, int id, final ServiceCallback<SegmentTagsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(parameters, segmentId, id), serviceCallback);
    }

    /**
     * セグメントタグの更新.
     * 指定した事業所のセグメントタグを更新する.
     *
     * @param parameters セグメントタグの作成
     * @param segmentId セグメントID
     * @param id セグメントタグID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SegmentTagsResponse object
     */
    public Observable<SegmentTagsResponse> updateAsync(SegmentTagParams parameters, int segmentId, int id) {
        return updateWithServiceResponseAsync(parameters, segmentId, id).map(new Func1<ServiceResponse<SegmentTagsResponse>, SegmentTagsResponse>() {
            @Override
            public SegmentTagsResponse call(ServiceResponse<SegmentTagsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * セグメントタグの更新.
     * 指定した事業所のセグメントタグを更新する.
     *
     * @param parameters セグメントタグの作成
     * @param segmentId セグメントID
     * @param id セグメントタグID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SegmentTagsResponse object
     */
    public Observable<ServiceResponse<SegmentTagsResponse>> updateWithServiceResponseAsync(SegmentTagParams parameters, int segmentId, int id) {
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.update(segmentId, id, parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SegmentTagsResponse>>>() {
                @Override
                public Observable<ServiceResponse<SegmentTagsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SegmentTagsResponse> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SegmentTagsResponse> updateDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SegmentTagsResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SegmentTagsResponse>() { }.getType())
                .build(response);
    }

    /**
     * セグメントタグの削除.
     * 指定した事業所のセグメントタグを削除する.
     *
     * @param segmentId セグメントID
     * @param id セグメントタグID
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void destroySegmentsTag(int segmentId, int id, int companyId) {
        destroySegmentsTagWithServiceResponseAsync(segmentId, id, companyId).toBlocking().single().body();
    }

    /**
     * セグメントタグの削除.
     * 指定した事業所のセグメントタグを削除する.
     *
     * @param segmentId セグメントID
     * @param id セグメントタグID
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> destroySegmentsTagAsync(int segmentId, int id, int companyId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(destroySegmentsTagWithServiceResponseAsync(segmentId, id, companyId), serviceCallback);
    }

    /**
     * セグメントタグの削除.
     * 指定した事業所のセグメントタグを削除する.
     *
     * @param segmentId セグメントID
     * @param id セグメントタグID
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> destroySegmentsTagAsync(int segmentId, int id, int companyId) {
        return destroySegmentsTagWithServiceResponseAsync(segmentId, id, companyId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * セグメントタグの削除.
     * 指定した事業所のセグメントタグを削除する.
     *
     * @param segmentId セグメントID
     * @param id セグメントタグID
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> destroySegmentsTagWithServiceResponseAsync(int segmentId, int id, int companyId) {
        return service.destroySegmentsTag(segmentId, id, companyId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = destroySegmentsTagDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> destroySegmentsTagDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .build(response);
    }

}
