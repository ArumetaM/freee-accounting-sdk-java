/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.implementation;

import retrofit2.Retrofit;
import jp.co.freee.accounting.Selectables;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.SelectablesIndexResponse;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Selectables.
 */
public class SelectablesImpl implements Selectables {
    /** The Retrofit service to perform REST calls. */
    private SelectablesService service;
    /** The service client containing this operation class. */
    private AccountingClientImpl client;

    /**
     * Initializes an instance of Selectables.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SelectablesImpl(Retrofit retrofit, AccountingClientImpl client) {
        this.service = retrofit.create(SelectablesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Selectables to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SelectablesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Selectables getForms" })
        @GET("forms/selectables")
        Observable<Response<ResponseBody>> getForms(@Query("company_id") int companyId, @Query("includes") String includes);

    }

    /**
     * フォーム用選択項目情報の取得.
     * 指定した事業所のフォーム用選択項目情報を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SelectablesIndexResponse object if successful.
     */
    public SelectablesIndexResponse getForms(int companyId) {
        return getFormsWithServiceResponseAsync(companyId).toBlocking().single().body();
    }

    /**
     * フォーム用選択項目情報の取得.
     * 指定した事業所のフォーム用選択項目情報を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SelectablesIndexResponse> getFormsAsync(int companyId, final ServiceCallback<SelectablesIndexResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getFormsWithServiceResponseAsync(companyId), serviceCallback);
    }

    /**
     * フォーム用選択項目情報の取得.
     * 指定した事業所のフォーム用選択項目情報を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SelectablesIndexResponse object
     */
    public Observable<SelectablesIndexResponse> getFormsAsync(int companyId) {
        return getFormsWithServiceResponseAsync(companyId).map(new Func1<ServiceResponse<SelectablesIndexResponse>, SelectablesIndexResponse>() {
            @Override
            public SelectablesIndexResponse call(ServiceResponse<SelectablesIndexResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * フォーム用選択項目情報の取得.
     * 指定した事業所のフォーム用選択項目情報を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SelectablesIndexResponse object
     */
    public Observable<ServiceResponse<SelectablesIndexResponse>> getFormsWithServiceResponseAsync(int companyId) {
        final String includes = null;
        return service.getForms(companyId, includes)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SelectablesIndexResponse>>>() {
                @Override
                public Observable<ServiceResponse<SelectablesIndexResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SelectablesIndexResponse> clientResponse = getFormsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * フォーム用選択項目情報の取得.
     * 指定した事業所のフォーム用選択項目情報を取得する.
     *
     * @param companyId 事業所ID
     * @param includes 取得する項目(項目: account_item). Possible values include: 'account_item'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SelectablesIndexResponse object if successful.
     */
    public SelectablesIndexResponse getForms(int companyId, String includes) {
        return getFormsWithServiceResponseAsync(companyId, includes).toBlocking().single().body();
    }

    /**
     * フォーム用選択項目情報の取得.
     * 指定した事業所のフォーム用選択項目情報を取得する.
     *
     * @param companyId 事業所ID
     * @param includes 取得する項目(項目: account_item). Possible values include: 'account_item'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SelectablesIndexResponse> getFormsAsync(int companyId, String includes, final ServiceCallback<SelectablesIndexResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getFormsWithServiceResponseAsync(companyId, includes), serviceCallback);
    }

    /**
     * フォーム用選択項目情報の取得.
     * 指定した事業所のフォーム用選択項目情報を取得する.
     *
     * @param companyId 事業所ID
     * @param includes 取得する項目(項目: account_item). Possible values include: 'account_item'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SelectablesIndexResponse object
     */
    public Observable<SelectablesIndexResponse> getFormsAsync(int companyId, String includes) {
        return getFormsWithServiceResponseAsync(companyId, includes).map(new Func1<ServiceResponse<SelectablesIndexResponse>, SelectablesIndexResponse>() {
            @Override
            public SelectablesIndexResponse call(ServiceResponse<SelectablesIndexResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * フォーム用選択項目情報の取得.
     * 指定した事業所のフォーム用選択項目情報を取得する.
     *
     * @param companyId 事業所ID
     * @param includes 取得する項目(項目: account_item). Possible values include: 'account_item'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SelectablesIndexResponse object
     */
    public Observable<ServiceResponse<SelectablesIndexResponse>> getFormsWithServiceResponseAsync(int companyId, String includes) {
        return service.getForms(companyId, includes)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SelectablesIndexResponse>>>() {
                @Override
                public Observable<ServiceResponse<SelectablesIndexResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SelectablesIndexResponse> clientResponse = getFormsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SelectablesIndexResponse> getFormsDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<SelectablesIndexResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SelectablesIndexResponse>() { }.getType())
                .build(response);
    }

}
