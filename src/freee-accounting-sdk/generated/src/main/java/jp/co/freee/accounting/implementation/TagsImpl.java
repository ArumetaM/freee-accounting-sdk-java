/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.implementation;

import retrofit2.Retrofit;
import jp.co.freee.accounting.Tags;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import jp.co.freee.accounting.models.Parameters;
import jp.co.freee.accounting.models.TagsCreateResponse;
import jp.co.freee.accounting.models.TagsIndexResponse;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Tags.
 */
public class TagsImpl implements Tags {
    /** The Retrofit service to perform REST calls. */
    private TagsService service;
    /** The service client containing this operation class. */
    private AccountingClientImpl client;

    /**
     * Initializes an instance of Tags.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public TagsImpl(Retrofit retrofit, AccountingClientImpl client) {
        this.service = retrofit.create(TagsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Tags to be
     * used by Retrofit to perform actually REST calls.
     */
    interface TagsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Tags list" })
        @GET("tags")
        Observable<Response<ResponseBody>> list(@Query("company_id") int companyId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Tags create" })
        @POST("tags")
        Observable<Response<ResponseBody>> create(@Body Parameters parameters);

    }

    /**
     * メモタグ一覧の取得.
     * 指定した事業所のメモタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TagsIndexResponse object if successful.
     */
    public TagsIndexResponse list(int companyId) {
        return listWithServiceResponseAsync(companyId).toBlocking().single().body();
    }

    /**
     * メモタグ一覧の取得.
     * 指定した事業所のメモタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TagsIndexResponse> listAsync(int companyId, final ServiceCallback<TagsIndexResponse> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(companyId), serviceCallback);
    }

    /**
     * メモタグ一覧の取得.
     * 指定した事業所のメモタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagsIndexResponse object
     */
    public Observable<TagsIndexResponse> listAsync(int companyId) {
        return listWithServiceResponseAsync(companyId).map(new Func1<ServiceResponse<TagsIndexResponse>, TagsIndexResponse>() {
            @Override
            public TagsIndexResponse call(ServiceResponse<TagsIndexResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * メモタグ一覧の取得.
     * 指定した事業所のメモタグ一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagsIndexResponse object
     */
    public Observable<ServiceResponse<TagsIndexResponse>> listWithServiceResponseAsync(int companyId) {
        return service.list(companyId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TagsIndexResponse>>>() {
                @Override
                public Observable<ServiceResponse<TagsIndexResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TagsIndexResponse> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TagsIndexResponse> listDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<TagsIndexResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TagsIndexResponse>() { }.getType())
                .build(response);
    }

    /**
     * メモタグの作成.
     * 指定した事業所のメモタグを作成する.
     *
     * @param parameters メモタグの作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TagsCreateResponse object if successful.
     */
    public TagsCreateResponse create(Parameters parameters) {
        return createWithServiceResponseAsync(parameters).toBlocking().single().body();
    }

    /**
     * メモタグの作成.
     * 指定した事業所のメモタグを作成する.
     *
     * @param parameters メモタグの作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TagsCreateResponse> createAsync(Parameters parameters, final ServiceCallback<TagsCreateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(parameters), serviceCallback);
    }

    /**
     * メモタグの作成.
     * 指定した事業所のメモタグを作成する.
     *
     * @param parameters メモタグの作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagsCreateResponse object
     */
    public Observable<TagsCreateResponse> createAsync(Parameters parameters) {
        return createWithServiceResponseAsync(parameters).map(new Func1<ServiceResponse<TagsCreateResponse>, TagsCreateResponse>() {
            @Override
            public TagsCreateResponse call(ServiceResponse<TagsCreateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * メモタグの作成.
     * 指定した事業所のメモタグを作成する.
     *
     * @param parameters メモタグの作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagsCreateResponse object
     */
    public Observable<ServiceResponse<TagsCreateResponse>> createWithServiceResponseAsync(Parameters parameters) {
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.create(parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TagsCreateResponse>>>() {
                @Override
                public Observable<ServiceResponse<TagsCreateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TagsCreateResponse> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TagsCreateResponse> createDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TagsCreateResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<TagsCreateResponse>() { }.getType())
                .build(response);
    }

}
