/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.implementation;

import retrofit2.Retrofit;
import jp.co.freee.accounting.TrialBalances;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.TrialBsResponse;
import jp.co.freee.accounting.models.TrialBsThreeYearsResponse;
import jp.co.freee.accounting.models.TrialBsTwoYearsResponse;
import jp.co.freee.accounting.models.TrialPlResponse;
import jp.co.freee.accounting.models.TrialPlSectionsResponse;
import jp.co.freee.accounting.models.TrialPlThreeYearsResponse;
import jp.co.freee.accounting.models.TrialPlTwoYearsResponse;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in TrialBalances.
 */
public class TrialBalancesImpl implements TrialBalances {
    /** The Retrofit service to perform REST calls. */
    private TrialBalancesService service;
    /** The service client containing this operation class. */
    private AccountingClientImpl client;

    /**
     * Initializes an instance of TrialBalances.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public TrialBalancesImpl(Retrofit retrofit, AccountingClientImpl client) {
        this.service = retrofit.create(TrialBalancesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for TrialBalances to be
     * used by Retrofit to perform actually REST calls.
     */
    interface TrialBalancesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.TrialBalances getTrialBs" })
        @GET("reports/trial_bs")
        Observable<Response<ResponseBody>> getTrialBs(@Query("company_id") int companyId, @Query("fiscal_year") Integer fiscalYear, @Query("start_month") Integer startMonth, @Query("end_month") Integer endMonth, @Query("start_date") String startDate, @Query("end_date") String endDate, @Query("account_item_display_type") String accountItemDisplayType, @Query("breakdown_display_type") String breakdownDisplayType, @Query("partner_id") Integer partnerId, @Query("partner_code") String partnerCode, @Query("item_id") Integer itemId, @Query("adjustment") String adjustment);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.TrialBalances getTrialBsTwoYears" })
        @GET("reports/trial_bs_two_years")
        Observable<Response<ResponseBody>> getTrialBsTwoYears(@Query("company_id") int companyId, @Query("fiscal_year") Integer fiscalYear, @Query("start_month") Integer startMonth, @Query("end_month") Integer endMonth, @Query("start_date") String startDate, @Query("end_date") String endDate, @Query("account_item_display_type") String accountItemDisplayType, @Query("breakdown_display_type") String breakdownDisplayType, @Query("partner_id") Integer partnerId, @Query("partner_code") String partnerCode, @Query("item_id") Integer itemId, @Query("adjustment") String adjustment);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.TrialBalances getTrialBsThreeYears" })
        @GET("reports/trial_bs_three_years")
        Observable<Response<ResponseBody>> getTrialBsThreeYears(@Query("company_id") int companyId, @Query("fiscal_year") Integer fiscalYear, @Query("start_month") Integer startMonth, @Query("end_month") Integer endMonth, @Query("start_date") String startDate, @Query("end_date") String endDate, @Query("account_item_display_type") String accountItemDisplayType, @Query("breakdown_display_type") String breakdownDisplayType, @Query("partner_id") Integer partnerId, @Query("partner_code") String partnerCode, @Query("item_id") Integer itemId, @Query("adjustment") String adjustment);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.TrialBalances getTrialPl" })
        @GET("reports/trial_pl")
        Observable<Response<ResponseBody>> getTrialPl(@Query("company_id") int companyId, @Query("fiscal_year") Integer fiscalYear, @Query("start_month") Integer startMonth, @Query("end_month") Integer endMonth, @Query("start_date") String startDate, @Query("end_date") String endDate, @Query("account_item_display_type") String accountItemDisplayType, @Query("breakdown_display_type") String breakdownDisplayType, @Query("partner_id") Integer partnerId, @Query("partner_code") String partnerCode, @Query("item_id") Integer itemId, @Query("section_id") Integer sectionId, @Query("adjustment") String adjustment, @Query("cost_allocation") String costAllocation);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.TrialBalances getTrialPlTwoYears" })
        @GET("reports/trial_pl_two_years")
        Observable<Response<ResponseBody>> getTrialPlTwoYears(@Query("company_id") int companyId, @Query("fiscal_year") Integer fiscalYear, @Query("start_month") Integer startMonth, @Query("end_month") Integer endMonth, @Query("start_date") String startDate, @Query("end_date") String endDate, @Query("account_item_display_type") String accountItemDisplayType, @Query("breakdown_display_type") String breakdownDisplayType, @Query("partner_id") Integer partnerId, @Query("partner_code") String partnerCode, @Query("item_id") Integer itemId, @Query("section_id") Integer sectionId, @Query("adjustment") String adjustment, @Query("cost_allocation") String costAllocation);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.TrialBalances getTrialPlThreeYears" })
        @GET("reports/trial_pl_three_years")
        Observable<Response<ResponseBody>> getTrialPlThreeYears(@Query("company_id") int companyId, @Query("fiscal_year") Integer fiscalYear, @Query("start_month") Integer startMonth, @Query("end_month") Integer endMonth, @Query("start_date") String startDate, @Query("end_date") String endDate, @Query("account_item_display_type") String accountItemDisplayType, @Query("breakdown_display_type") String breakdownDisplayType, @Query("partner_id") Integer partnerId, @Query("partner_code") String partnerCode, @Query("item_id") Integer itemId, @Query("section_id") Integer sectionId, @Query("adjustment") String adjustment, @Query("cost_allocation") String costAllocation);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.TrialBalances getTrialPlSections" })
        @GET("reports/trial_pl_sections")
        Observable<Response<ResponseBody>> getTrialPlSections(@Query("company_id") int companyId, @Query("section_ids") String sectionIds, @Query("fiscal_year") Integer fiscalYear, @Query("start_month") Integer startMonth, @Query("end_month") Integer endMonth, @Query("start_date") String startDate, @Query("end_date") String endDate, @Query("account_item_display_type") String accountItemDisplayType, @Query("breakdown_display_type") String breakdownDisplayType, @Query("partner_id") Integer partnerId, @Query("partner_code") String partnerCode, @Query("item_id") Integer itemId, @Query("adjustment") String adjustment, @Query("cost_allocation") String costAllocation);

    }

    /**
     * 貸借対照表の取得.
     * 指定した事業所の貸借対照表を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialBsResponse object if successful.
     */
    public TrialBsResponse getTrialBs(int companyId) {
        return getTrialBsWithServiceResponseAsync(companyId).toBlocking().single().body();
    }

    /**
     * 貸借対照表の取得.
     * 指定した事業所の貸借対照表を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrialBsResponse> getTrialBsAsync(int companyId, final ServiceCallback<TrialBsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getTrialBsWithServiceResponseAsync(companyId), serviceCallback);
    }

    /**
     * 貸借対照表の取得.
     * 指定した事業所の貸借対照表を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsResponse object
     */
    public Observable<TrialBsResponse> getTrialBsAsync(int companyId) {
        return getTrialBsWithServiceResponseAsync(companyId).map(new Func1<ServiceResponse<TrialBsResponse>, TrialBsResponse>() {
            @Override
            public TrialBsResponse call(ServiceResponse<TrialBsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 貸借対照表の取得.
     * 指定した事業所の貸借対照表を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsResponse object
     */
    public Observable<ServiceResponse<TrialBsResponse>> getTrialBsWithServiceResponseAsync(int companyId) {
        final Integer fiscalYear = null;
        final Integer startMonth = null;
        final Integer endMonth = null;
        final String startDate = null;
        final String endDate = null;
        final String accountItemDisplayType = null;
        final String breakdownDisplayType = null;
        final Integer partnerId = null;
        final String partnerCode = null;
        final Integer itemId = null;
        final String adjustment = null;
        return service.getTrialBs(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrialBsResponse>>>() {
                @Override
                public Observable<ServiceResponse<TrialBsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrialBsResponse> clientResponse = getTrialBsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 貸借対照表の取得.
     * 指定した事業所の貸借対照表を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialBsResponse object if successful.
     */
    public TrialBsResponse getTrialBs(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment) {
        return getTrialBsWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment).toBlocking().single().body();
    }

    /**
     * 貸借対照表の取得.
     * 指定した事業所の貸借対照表を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrialBsResponse> getTrialBsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment, final ServiceCallback<TrialBsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getTrialBsWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment), serviceCallback);
    }

    /**
     * 貸借対照表の取得.
     * 指定した事業所の貸借対照表を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsResponse object
     */
    public Observable<TrialBsResponse> getTrialBsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment) {
        return getTrialBsWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment).map(new Func1<ServiceResponse<TrialBsResponse>, TrialBsResponse>() {
            @Override
            public TrialBsResponse call(ServiceResponse<TrialBsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 貸借対照表の取得.
     * 指定した事業所の貸借対照表を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsResponse object
     */
    public Observable<ServiceResponse<TrialBsResponse>> getTrialBsWithServiceResponseAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment) {
        return service.getTrialBs(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrialBsResponse>>>() {
                @Override
                public Observable<ServiceResponse<TrialBsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrialBsResponse> clientResponse = getTrialBsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TrialBsResponse> getTrialBsDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<TrialBsResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TrialBsResponse>() { }.getType())
                .build(response);
    }

    /**
     * 貸借対照表(前年比較)の取得.
     * 指定した事業所の貸借対照表(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialBsTwoYearsResponse object if successful.
     */
    public TrialBsTwoYearsResponse getTrialBsTwoYears(int companyId) {
        return getTrialBsTwoYearsWithServiceResponseAsync(companyId).toBlocking().single().body();
    }

    /**
     * 貸借対照表(前年比較)の取得.
     * 指定した事業所の貸借対照表(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrialBsTwoYearsResponse> getTrialBsTwoYearsAsync(int companyId, final ServiceCallback<TrialBsTwoYearsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getTrialBsTwoYearsWithServiceResponseAsync(companyId), serviceCallback);
    }

    /**
     * 貸借対照表(前年比較)の取得.
     * 指定した事業所の貸借対照表(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsTwoYearsResponse object
     */
    public Observable<TrialBsTwoYearsResponse> getTrialBsTwoYearsAsync(int companyId) {
        return getTrialBsTwoYearsWithServiceResponseAsync(companyId).map(new Func1<ServiceResponse<TrialBsTwoYearsResponse>, TrialBsTwoYearsResponse>() {
            @Override
            public TrialBsTwoYearsResponse call(ServiceResponse<TrialBsTwoYearsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 貸借対照表(前年比較)の取得.
     * 指定した事業所の貸借対照表(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsTwoYearsResponse object
     */
    public Observable<ServiceResponse<TrialBsTwoYearsResponse>> getTrialBsTwoYearsWithServiceResponseAsync(int companyId) {
        final Integer fiscalYear = null;
        final Integer startMonth = null;
        final Integer endMonth = null;
        final String startDate = null;
        final String endDate = null;
        final String accountItemDisplayType = null;
        final String breakdownDisplayType = null;
        final Integer partnerId = null;
        final String partnerCode = null;
        final Integer itemId = null;
        final String adjustment = null;
        return service.getTrialBsTwoYears(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrialBsTwoYearsResponse>>>() {
                @Override
                public Observable<ServiceResponse<TrialBsTwoYearsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrialBsTwoYearsResponse> clientResponse = getTrialBsTwoYearsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 貸借対照表(前年比較)の取得.
     * 指定した事業所の貸借対照表(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialBsTwoYearsResponse object if successful.
     */
    public TrialBsTwoYearsResponse getTrialBsTwoYears(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment) {
        return getTrialBsTwoYearsWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment).toBlocking().single().body();
    }

    /**
     * 貸借対照表(前年比較)の取得.
     * 指定した事業所の貸借対照表(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrialBsTwoYearsResponse> getTrialBsTwoYearsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment, final ServiceCallback<TrialBsTwoYearsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getTrialBsTwoYearsWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment), serviceCallback);
    }

    /**
     * 貸借対照表(前年比較)の取得.
     * 指定した事業所の貸借対照表(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsTwoYearsResponse object
     */
    public Observable<TrialBsTwoYearsResponse> getTrialBsTwoYearsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment) {
        return getTrialBsTwoYearsWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment).map(new Func1<ServiceResponse<TrialBsTwoYearsResponse>, TrialBsTwoYearsResponse>() {
            @Override
            public TrialBsTwoYearsResponse call(ServiceResponse<TrialBsTwoYearsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 貸借対照表(前年比較)の取得.
     * 指定した事業所の貸借対照表(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsTwoYearsResponse object
     */
    public Observable<ServiceResponse<TrialBsTwoYearsResponse>> getTrialBsTwoYearsWithServiceResponseAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment) {
        return service.getTrialBsTwoYears(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrialBsTwoYearsResponse>>>() {
                @Override
                public Observable<ServiceResponse<TrialBsTwoYearsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrialBsTwoYearsResponse> clientResponse = getTrialBsTwoYearsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TrialBsTwoYearsResponse> getTrialBsTwoYearsDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<TrialBsTwoYearsResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TrialBsTwoYearsResponse>() { }.getType())
                .build(response);
    }

    /**
     * 貸借対照表(３期間比較)の取得.
     * 指定した事業所の貸借対照表(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialBsThreeYearsResponse object if successful.
     */
    public TrialBsThreeYearsResponse getTrialBsThreeYears(int companyId) {
        return getTrialBsThreeYearsWithServiceResponseAsync(companyId).toBlocking().single().body();
    }

    /**
     * 貸借対照表(３期間比較)の取得.
     * 指定した事業所の貸借対照表(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrialBsThreeYearsResponse> getTrialBsThreeYearsAsync(int companyId, final ServiceCallback<TrialBsThreeYearsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getTrialBsThreeYearsWithServiceResponseAsync(companyId), serviceCallback);
    }

    /**
     * 貸借対照表(３期間比較)の取得.
     * 指定した事業所の貸借対照表(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsThreeYearsResponse object
     */
    public Observable<TrialBsThreeYearsResponse> getTrialBsThreeYearsAsync(int companyId) {
        return getTrialBsThreeYearsWithServiceResponseAsync(companyId).map(new Func1<ServiceResponse<TrialBsThreeYearsResponse>, TrialBsThreeYearsResponse>() {
            @Override
            public TrialBsThreeYearsResponse call(ServiceResponse<TrialBsThreeYearsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 貸借対照表(３期間比較)の取得.
     * 指定した事業所の貸借対照表(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsThreeYearsResponse object
     */
    public Observable<ServiceResponse<TrialBsThreeYearsResponse>> getTrialBsThreeYearsWithServiceResponseAsync(int companyId) {
        final Integer fiscalYear = null;
        final Integer startMonth = null;
        final Integer endMonth = null;
        final String startDate = null;
        final String endDate = null;
        final String accountItemDisplayType = null;
        final String breakdownDisplayType = null;
        final Integer partnerId = null;
        final String partnerCode = null;
        final Integer itemId = null;
        final String adjustment = null;
        return service.getTrialBsThreeYears(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrialBsThreeYearsResponse>>>() {
                @Override
                public Observable<ServiceResponse<TrialBsThreeYearsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrialBsThreeYearsResponse> clientResponse = getTrialBsThreeYearsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 貸借対照表(３期間比較)の取得.
     * 指定した事業所の貸借対照表(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialBsThreeYearsResponse object if successful.
     */
    public TrialBsThreeYearsResponse getTrialBsThreeYears(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment) {
        return getTrialBsThreeYearsWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment).toBlocking().single().body();
    }

    /**
     * 貸借対照表(３期間比較)の取得.
     * 指定した事業所の貸借対照表(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrialBsThreeYearsResponse> getTrialBsThreeYearsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment, final ServiceCallback<TrialBsThreeYearsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getTrialBsThreeYearsWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment), serviceCallback);
    }

    /**
     * 貸借対照表(３期間比較)の取得.
     * 指定した事業所の貸借対照表(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsThreeYearsResponse object
     */
    public Observable<TrialBsThreeYearsResponse> getTrialBsThreeYearsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment) {
        return getTrialBsThreeYearsWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment).map(new Func1<ServiceResponse<TrialBsThreeYearsResponse>, TrialBsThreeYearsResponse>() {
            @Override
            public TrialBsThreeYearsResponse call(ServiceResponse<TrialBsThreeYearsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 貸借対照表(３期間比較)の取得.
     * 指定した事業所の貸借対照表(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialBsThreeYearsResponse object
     */
    public Observable<ServiceResponse<TrialBsThreeYearsResponse>> getTrialBsThreeYearsWithServiceResponseAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment) {
        return service.getTrialBsThreeYears(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrialBsThreeYearsResponse>>>() {
                @Override
                public Observable<ServiceResponse<TrialBsThreeYearsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrialBsThreeYearsResponse> clientResponse = getTrialBsThreeYearsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TrialBsThreeYearsResponse> getTrialBsThreeYearsDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<TrialBsThreeYearsResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TrialBsThreeYearsResponse>() { }.getType())
                .build(response);
    }

    /**
     * 損益計算書の取得.
     * 指定した事業所の損益計算書を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialPlResponse object if successful.
     */
    public TrialPlResponse getTrialPl(int companyId) {
        return getTrialPlWithServiceResponseAsync(companyId).toBlocking().single().body();
    }

    /**
     * 損益計算書の取得.
     * 指定した事業所の損益計算書を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrialPlResponse> getTrialPlAsync(int companyId, final ServiceCallback<TrialPlResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getTrialPlWithServiceResponseAsync(companyId), serviceCallback);
    }

    /**
     * 損益計算書の取得.
     * 指定した事業所の損益計算書を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlResponse object
     */
    public Observable<TrialPlResponse> getTrialPlAsync(int companyId) {
        return getTrialPlWithServiceResponseAsync(companyId).map(new Func1<ServiceResponse<TrialPlResponse>, TrialPlResponse>() {
            @Override
            public TrialPlResponse call(ServiceResponse<TrialPlResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 損益計算書の取得.
     * 指定した事業所の損益計算書を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlResponse object
     */
    public Observable<ServiceResponse<TrialPlResponse>> getTrialPlWithServiceResponseAsync(int companyId) {
        final Integer fiscalYear = null;
        final Integer startMonth = null;
        final Integer endMonth = null;
        final String startDate = null;
        final String endDate = null;
        final String accountItemDisplayType = null;
        final String breakdownDisplayType = null;
        final Integer partnerId = null;
        final String partnerCode = null;
        final Integer itemId = null;
        final Integer sectionId = null;
        final String adjustment = null;
        final String costAllocation = null;
        return service.getTrialPl(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, sectionId, adjustment, costAllocation)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrialPlResponse>>>() {
                @Override
                public Observable<ServiceResponse<TrialPlResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrialPlResponse> clientResponse = getTrialPlDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 損益計算書の取得.
     * 指定した事業所の損益計算書を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialPlResponse object if successful.
     */
    public TrialPlResponse getTrialPl(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation) {
        return getTrialPlWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, sectionId, adjustment, costAllocation).toBlocking().single().body();
    }

    /**
     * 損益計算書の取得.
     * 指定した事業所の損益計算書を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrialPlResponse> getTrialPlAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation, final ServiceCallback<TrialPlResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getTrialPlWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, sectionId, adjustment, costAllocation), serviceCallback);
    }

    /**
     * 損益計算書の取得.
     * 指定した事業所の損益計算書を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlResponse object
     */
    public Observable<TrialPlResponse> getTrialPlAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation) {
        return getTrialPlWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, sectionId, adjustment, costAllocation).map(new Func1<ServiceResponse<TrialPlResponse>, TrialPlResponse>() {
            @Override
            public TrialPlResponse call(ServiceResponse<TrialPlResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 損益計算書の取得.
     * 指定した事業所の損益計算書を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlResponse object
     */
    public Observable<ServiceResponse<TrialPlResponse>> getTrialPlWithServiceResponseAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation) {
        return service.getTrialPl(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, sectionId, adjustment, costAllocation)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrialPlResponse>>>() {
                @Override
                public Observable<ServiceResponse<TrialPlResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrialPlResponse> clientResponse = getTrialPlDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TrialPlResponse> getTrialPlDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<TrialPlResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TrialPlResponse>() { }.getType())
                .build(response);
    }

    /**
     * 損益計算書(前年比較)の取得.
     * 指定した事業所の損益計算書(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialPlTwoYearsResponse object if successful.
     */
    public TrialPlTwoYearsResponse getTrialPlTwoYears(int companyId) {
        return getTrialPlTwoYearsWithServiceResponseAsync(companyId).toBlocking().single().body();
    }

    /**
     * 損益計算書(前年比較)の取得.
     * 指定した事業所の損益計算書(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrialPlTwoYearsResponse> getTrialPlTwoYearsAsync(int companyId, final ServiceCallback<TrialPlTwoYearsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getTrialPlTwoYearsWithServiceResponseAsync(companyId), serviceCallback);
    }

    /**
     * 損益計算書(前年比較)の取得.
     * 指定した事業所の損益計算書(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlTwoYearsResponse object
     */
    public Observable<TrialPlTwoYearsResponse> getTrialPlTwoYearsAsync(int companyId) {
        return getTrialPlTwoYearsWithServiceResponseAsync(companyId).map(new Func1<ServiceResponse<TrialPlTwoYearsResponse>, TrialPlTwoYearsResponse>() {
            @Override
            public TrialPlTwoYearsResponse call(ServiceResponse<TrialPlTwoYearsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 損益計算書(前年比較)の取得.
     * 指定した事業所の損益計算書(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlTwoYearsResponse object
     */
    public Observable<ServiceResponse<TrialPlTwoYearsResponse>> getTrialPlTwoYearsWithServiceResponseAsync(int companyId) {
        final Integer fiscalYear = null;
        final Integer startMonth = null;
        final Integer endMonth = null;
        final String startDate = null;
        final String endDate = null;
        final String accountItemDisplayType = null;
        final String breakdownDisplayType = null;
        final Integer partnerId = null;
        final String partnerCode = null;
        final Integer itemId = null;
        final Integer sectionId = null;
        final String adjustment = null;
        final String costAllocation = null;
        return service.getTrialPlTwoYears(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, sectionId, adjustment, costAllocation)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrialPlTwoYearsResponse>>>() {
                @Override
                public Observable<ServiceResponse<TrialPlTwoYearsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrialPlTwoYearsResponse> clientResponse = getTrialPlTwoYearsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 損益計算書(前年比較)の取得.
     * 指定した事業所の損益計算書(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialPlTwoYearsResponse object if successful.
     */
    public TrialPlTwoYearsResponse getTrialPlTwoYears(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation) {
        return getTrialPlTwoYearsWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, sectionId, adjustment, costAllocation).toBlocking().single().body();
    }

    /**
     * 損益計算書(前年比較)の取得.
     * 指定した事業所の損益計算書(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrialPlTwoYearsResponse> getTrialPlTwoYearsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation, final ServiceCallback<TrialPlTwoYearsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getTrialPlTwoYearsWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, sectionId, adjustment, costAllocation), serviceCallback);
    }

    /**
     * 損益計算書(前年比較)の取得.
     * 指定した事業所の損益計算書(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlTwoYearsResponse object
     */
    public Observable<TrialPlTwoYearsResponse> getTrialPlTwoYearsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation) {
        return getTrialPlTwoYearsWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, sectionId, adjustment, costAllocation).map(new Func1<ServiceResponse<TrialPlTwoYearsResponse>, TrialPlTwoYearsResponse>() {
            @Override
            public TrialPlTwoYearsResponse call(ServiceResponse<TrialPlTwoYearsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 損益計算書(前年比較)の取得.
     * 指定した事業所の損益計算書(前年比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlTwoYearsResponse object
     */
    public Observable<ServiceResponse<TrialPlTwoYearsResponse>> getTrialPlTwoYearsWithServiceResponseAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation) {
        return service.getTrialPlTwoYears(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, sectionId, adjustment, costAllocation)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrialPlTwoYearsResponse>>>() {
                @Override
                public Observable<ServiceResponse<TrialPlTwoYearsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrialPlTwoYearsResponse> clientResponse = getTrialPlTwoYearsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TrialPlTwoYearsResponse> getTrialPlTwoYearsDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<TrialPlTwoYearsResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TrialPlTwoYearsResponse>() { }.getType())
                .build(response);
    }

    /**
     * 損益計算書(３期間比較)の取得.
     * 指定した事業所の損益計算書(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialPlThreeYearsResponse object if successful.
     */
    public TrialPlThreeYearsResponse getTrialPlThreeYears(int companyId) {
        return getTrialPlThreeYearsWithServiceResponseAsync(companyId).toBlocking().single().body();
    }

    /**
     * 損益計算書(３期間比較)の取得.
     * 指定した事業所の損益計算書(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrialPlThreeYearsResponse> getTrialPlThreeYearsAsync(int companyId, final ServiceCallback<TrialPlThreeYearsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getTrialPlThreeYearsWithServiceResponseAsync(companyId), serviceCallback);
    }

    /**
     * 損益計算書(３期間比較)の取得.
     * 指定した事業所の損益計算書(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlThreeYearsResponse object
     */
    public Observable<TrialPlThreeYearsResponse> getTrialPlThreeYearsAsync(int companyId) {
        return getTrialPlThreeYearsWithServiceResponseAsync(companyId).map(new Func1<ServiceResponse<TrialPlThreeYearsResponse>, TrialPlThreeYearsResponse>() {
            @Override
            public TrialPlThreeYearsResponse call(ServiceResponse<TrialPlThreeYearsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 損益計算書(３期間比較)の取得.
     * 指定した事業所の損益計算書(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlThreeYearsResponse object
     */
    public Observable<ServiceResponse<TrialPlThreeYearsResponse>> getTrialPlThreeYearsWithServiceResponseAsync(int companyId) {
        final Integer fiscalYear = null;
        final Integer startMonth = null;
        final Integer endMonth = null;
        final String startDate = null;
        final String endDate = null;
        final String accountItemDisplayType = null;
        final String breakdownDisplayType = null;
        final Integer partnerId = null;
        final String partnerCode = null;
        final Integer itemId = null;
        final Integer sectionId = null;
        final String adjustment = null;
        final String costAllocation = null;
        return service.getTrialPlThreeYears(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, sectionId, adjustment, costAllocation)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrialPlThreeYearsResponse>>>() {
                @Override
                public Observable<ServiceResponse<TrialPlThreeYearsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrialPlThreeYearsResponse> clientResponse = getTrialPlThreeYearsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 損益計算書(３期間比較)の取得.
     * 指定した事業所の損益計算書(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialPlThreeYearsResponse object if successful.
     */
    public TrialPlThreeYearsResponse getTrialPlThreeYears(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation) {
        return getTrialPlThreeYearsWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, sectionId, adjustment, costAllocation).toBlocking().single().body();
    }

    /**
     * 損益計算書(３期間比較)の取得.
     * 指定した事業所の損益計算書(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrialPlThreeYearsResponse> getTrialPlThreeYearsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation, final ServiceCallback<TrialPlThreeYearsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getTrialPlThreeYearsWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, sectionId, adjustment, costAllocation), serviceCallback);
    }

    /**
     * 損益計算書(３期間比較)の取得.
     * 指定した事業所の損益計算書(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlThreeYearsResponse object
     */
    public Observable<TrialPlThreeYearsResponse> getTrialPlThreeYearsAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation) {
        return getTrialPlThreeYearsWithServiceResponseAsync(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, sectionId, adjustment, costAllocation).map(new Func1<ServiceResponse<TrialPlThreeYearsResponse>, TrialPlThreeYearsResponse>() {
            @Override
            public TrialPlThreeYearsResponse call(ServiceResponse<TrialPlThreeYearsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 損益計算書(３期間比較)の取得.
     * 指定した事業所の損益計算書(３期間比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param sectionId 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlThreeYearsResponse object
     */
    public Observable<ServiceResponse<TrialPlThreeYearsResponse>> getTrialPlThreeYearsWithServiceResponseAsync(int companyId, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, Integer sectionId, String adjustment, String costAllocation) {
        return service.getTrialPlThreeYears(companyId, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, sectionId, adjustment, costAllocation)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrialPlThreeYearsResponse>>>() {
                @Override
                public Observable<ServiceResponse<TrialPlThreeYearsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrialPlThreeYearsResponse> clientResponse = getTrialPlThreeYearsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TrialPlThreeYearsResponse> getTrialPlThreeYearsDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<TrialPlThreeYearsResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TrialPlThreeYearsResponse>() { }.getType())
                .build(response);
    }

    /**
     * 損益計算書(部門比較)の取得.
     * 指定した事業所の損益計算書(部門比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialPlSectionsResponse object if successful.
     */
    public TrialPlSectionsResponse getTrialPlSections(int companyId, String sectionIds) {
        return getTrialPlSectionsWithServiceResponseAsync(companyId, sectionIds).toBlocking().single().body();
    }

    /**
     * 損益計算書(部門比較)の取得.
     * 指定した事業所の損益計算書(部門比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrialPlSectionsResponse> getTrialPlSectionsAsync(int companyId, String sectionIds, final ServiceCallback<TrialPlSectionsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getTrialPlSectionsWithServiceResponseAsync(companyId, sectionIds), serviceCallback);
    }

    /**
     * 損益計算書(部門比較)の取得.
     * 指定した事業所の損益計算書(部門比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlSectionsResponse object
     */
    public Observable<TrialPlSectionsResponse> getTrialPlSectionsAsync(int companyId, String sectionIds) {
        return getTrialPlSectionsWithServiceResponseAsync(companyId, sectionIds).map(new Func1<ServiceResponse<TrialPlSectionsResponse>, TrialPlSectionsResponse>() {
            @Override
            public TrialPlSectionsResponse call(ServiceResponse<TrialPlSectionsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 損益計算書(部門比較)の取得.
     * 指定した事業所の損益計算書(部門比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlSectionsResponse object
     */
    public Observable<ServiceResponse<TrialPlSectionsResponse>> getTrialPlSectionsWithServiceResponseAsync(int companyId, String sectionIds) {
        if (sectionIds == null) {
            throw new IllegalArgumentException("Parameter sectionIds is required and cannot be null.");
        }
        final Integer fiscalYear = null;
        final Integer startMonth = null;
        final Integer endMonth = null;
        final String startDate = null;
        final String endDate = null;
        final String accountItemDisplayType = null;
        final String breakdownDisplayType = null;
        final Integer partnerId = null;
        final String partnerCode = null;
        final Integer itemId = null;
        final String adjustment = null;
        final String costAllocation = null;
        return service.getTrialPlSections(companyId, sectionIds, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment, costAllocation)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrialPlSectionsResponse>>>() {
                @Override
                public Observable<ServiceResponse<TrialPlSectionsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrialPlSectionsResponse> clientResponse = getTrialPlSectionsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 損益計算書(部門比較)の取得.
     * 指定した事業所の損益計算書(部門比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrialPlSectionsResponse object if successful.
     */
    public TrialPlSectionsResponse getTrialPlSections(int companyId, String sectionIds, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment, String costAllocation) {
        return getTrialPlSectionsWithServiceResponseAsync(companyId, sectionIds, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment, costAllocation).toBlocking().single().body();
    }

    /**
     * 損益計算書(部門比較)の取得.
     * 指定した事業所の損益計算書(部門比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrialPlSectionsResponse> getTrialPlSectionsAsync(int companyId, String sectionIds, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment, String costAllocation, final ServiceCallback<TrialPlSectionsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getTrialPlSectionsWithServiceResponseAsync(companyId, sectionIds, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment, costAllocation), serviceCallback);
    }

    /**
     * 損益計算書(部門比較)の取得.
     * 指定した事業所の損益計算書(部門比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlSectionsResponse object
     */
    public Observable<TrialPlSectionsResponse> getTrialPlSectionsAsync(int companyId, String sectionIds, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment, String costAllocation) {
        return getTrialPlSectionsWithServiceResponseAsync(companyId, sectionIds, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment, costAllocation).map(new Func1<ServiceResponse<TrialPlSectionsResponse>, TrialPlSectionsResponse>() {
            @Override
            public TrialPlSectionsResponse call(ServiceResponse<TrialPlSectionsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 損益計算書(部門比較)の取得.
     * 指定した事業所の損益計算書(部門比較)を取得する.
     *
     * @param companyId 事業所ID
     * @param sectionIds 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください）
     * @param fiscalYear 会計年度
     * @param startMonth 発生月で絞込：開始会計月(mm)
     * @param endMonth 発生月で絞込：終了会計月(mm)
     * @param startDate 発生日で絞込：開始日(yyyy-mm-dd)
     * @param endDate 発生日で絞込：終了日(yyyy-mm-dd)
     * @param accountItemDisplayType 勘定科目の表示（勘定科目: account_item, 決算書表示:group）. Possible values include: 'account_item', 'group'
     * @param breakdownDisplayType 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます. Possible values include: 'partner', 'item', 'section', 'account_item'
     * @param partnerId 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます）
     * @param partnerCode 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です）
     * @param itemId 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます）
     * @param adjustment 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without）. Possible values include: 'only', 'without'
     * @param costAllocation 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without）. Possible values include: 'only', 'not_include'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrialPlSectionsResponse object
     */
    public Observable<ServiceResponse<TrialPlSectionsResponse>> getTrialPlSectionsWithServiceResponseAsync(int companyId, String sectionIds, Integer fiscalYear, Integer startMonth, Integer endMonth, String startDate, String endDate, String accountItemDisplayType, String breakdownDisplayType, Integer partnerId, String partnerCode, Integer itemId, String adjustment, String costAllocation) {
        if (sectionIds == null) {
            throw new IllegalArgumentException("Parameter sectionIds is required and cannot be null.");
        }
        return service.getTrialPlSections(companyId, sectionIds, fiscalYear, startMonth, endMonth, startDate, endDate, accountItemDisplayType, breakdownDisplayType, partnerId, partnerCode, itemId, adjustment, costAllocation)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrialPlSectionsResponse>>>() {
                @Override
                public Observable<ServiceResponse<TrialPlSectionsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrialPlSectionsResponse> clientResponse = getTrialPlSectionsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TrialPlSectionsResponse> getTrialPlSectionsDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TrialPlSectionsResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TrialPlSectionsResponse>() { }.getType())
                .build(response);
    }

}
