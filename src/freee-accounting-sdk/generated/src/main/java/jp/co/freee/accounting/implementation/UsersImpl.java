/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.implementation;

import retrofit2.Retrofit;
import jp.co.freee.accounting.Users;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import jp.co.freee.accounting.models.UsersCapabilitiesResponse;
import jp.co.freee.accounting.models.UsersMeResponse;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Users.
 */
public class UsersImpl implements Users {
    /** The Retrofit service to perform REST calls. */
    private UsersService service;
    /** The service client containing this operation class. */
    private AccountingClientImpl client;

    /**
     * Initializes an instance of Users.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public UsersImpl(Retrofit retrofit, AccountingClientImpl client) {
        this.service = retrofit.create(UsersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Users to be
     * used by Retrofit to perform actually REST calls.
     */
    interface UsersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Users getMe" })
        @GET("users/me")
        Observable<Response<ResponseBody>> getMe(@Query("companies") Boolean companies);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Users getCapabilities" })
        @GET("users/capabilities")
        Observable<Response<ResponseBody>> getCapabilities(@Query("company_id") int companyId);

    }

    /**
     * ログインユーザ情報の取得.
     * ユーザの情報を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UsersMeResponse object if successful.
     */
    public UsersMeResponse getMe() {
        return getMeWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * ログインユーザ情報の取得.
     * ユーザの情報を取得する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UsersMeResponse> getMeAsync(final ServiceCallback<UsersMeResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getMeWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * ログインユーザ情報の取得.
     * ユーザの情報を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UsersMeResponse object
     */
    public Observable<UsersMeResponse> getMeAsync() {
        return getMeWithServiceResponseAsync().map(new Func1<ServiceResponse<UsersMeResponse>, UsersMeResponse>() {
            @Override
            public UsersMeResponse call(ServiceResponse<UsersMeResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * ログインユーザ情報の取得.
     * ユーザの情報を取得する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UsersMeResponse object
     */
    public Observable<ServiceResponse<UsersMeResponse>> getMeWithServiceResponseAsync() {
        final Boolean companies = null;
        return service.getMe(companies)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UsersMeResponse>>>() {
                @Override
                public Observable<ServiceResponse<UsersMeResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UsersMeResponse> clientResponse = getMeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * ログインユーザ情報の取得.
     * ユーザの情報を取得する.
     *
     * @param companies 取得情報にユーザが所属する事業所一覧を含める
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UsersMeResponse object if successful.
     */
    public UsersMeResponse getMe(Boolean companies) {
        return getMeWithServiceResponseAsync(companies).toBlocking().single().body();
    }

    /**
     * ログインユーザ情報の取得.
     * ユーザの情報を取得する.
     *
     * @param companies 取得情報にユーザが所属する事業所一覧を含める
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UsersMeResponse> getMeAsync(Boolean companies, final ServiceCallback<UsersMeResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getMeWithServiceResponseAsync(companies), serviceCallback);
    }

    /**
     * ログインユーザ情報の取得.
     * ユーザの情報を取得する.
     *
     * @param companies 取得情報にユーザが所属する事業所一覧を含める
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UsersMeResponse object
     */
    public Observable<UsersMeResponse> getMeAsync(Boolean companies) {
        return getMeWithServiceResponseAsync(companies).map(new Func1<ServiceResponse<UsersMeResponse>, UsersMeResponse>() {
            @Override
            public UsersMeResponse call(ServiceResponse<UsersMeResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * ログインユーザ情報の取得.
     * ユーザの情報を取得する.
     *
     * @param companies 取得情報にユーザが所属する事業所一覧を含める
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UsersMeResponse object
     */
    public Observable<ServiceResponse<UsersMeResponse>> getMeWithServiceResponseAsync(Boolean companies) {
        return service.getMe(companies)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UsersMeResponse>>>() {
                @Override
                public Observable<ServiceResponse<UsersMeResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UsersMeResponse> clientResponse = getMeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UsersMeResponse> getMeDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<UsersMeResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<UsersMeResponse>() { }.getType())
                .build(response);
    }

    /**
     * ログインユーザの権限の取得.
     * ユーザの権限情報を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UsersCapabilitiesResponse object if successful.
     */
    public UsersCapabilitiesResponse getCapabilities(int companyId) {
        return getCapabilitiesWithServiceResponseAsync(companyId).toBlocking().single().body();
    }

    /**
     * ログインユーザの権限の取得.
     * ユーザの権限情報を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UsersCapabilitiesResponse> getCapabilitiesAsync(int companyId, final ServiceCallback<UsersCapabilitiesResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getCapabilitiesWithServiceResponseAsync(companyId), serviceCallback);
    }

    /**
     * ログインユーザの権限の取得.
     * ユーザの権限情報を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UsersCapabilitiesResponse object
     */
    public Observable<UsersCapabilitiesResponse> getCapabilitiesAsync(int companyId) {
        return getCapabilitiesWithServiceResponseAsync(companyId).map(new Func1<ServiceResponse<UsersCapabilitiesResponse>, UsersCapabilitiesResponse>() {
            @Override
            public UsersCapabilitiesResponse call(ServiceResponse<UsersCapabilitiesResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * ログインユーザの権限の取得.
     * ユーザの権限情報を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UsersCapabilitiesResponse object
     */
    public Observable<ServiceResponse<UsersCapabilitiesResponse>> getCapabilitiesWithServiceResponseAsync(int companyId) {
        return service.getCapabilities(companyId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UsersCapabilitiesResponse>>>() {
                @Override
                public Observable<ServiceResponse<UsersCapabilitiesResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UsersCapabilitiesResponse> clientResponse = getCapabilitiesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UsersCapabilitiesResponse> getCapabilitiesDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<UsersCapabilitiesResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<UsersCapabilitiesResponse>() { }.getType())
                .build(response);
    }

}
