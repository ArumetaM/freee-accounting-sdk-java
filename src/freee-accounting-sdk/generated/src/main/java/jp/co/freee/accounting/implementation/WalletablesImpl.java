/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.implementation;

import retrofit2.Retrofit;
import jp.co.freee.accounting.Walletables;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import jp.co.freee.accounting.models.CreateWalletableParams;
import jp.co.freee.accounting.models.WalletablesCreateResponse;
import jp.co.freee.accounting.models.WalletablesIndexResponse;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Walletables.
 */
public class WalletablesImpl implements Walletables {
    /** The Retrofit service to perform REST calls. */
    private WalletablesService service;
    /** The service client containing this operation class. */
    private AccountingClientImpl client;

    /**
     * Initializes an instance of Walletables.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public WalletablesImpl(Retrofit retrofit, AccountingClientImpl client) {
        this.service = retrofit.create(WalletablesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Walletables to be
     * used by Retrofit to perform actually REST calls.
     */
    interface WalletablesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Walletables list" })
        @GET("walletables")
        Observable<Response<ResponseBody>> list(@Query("company_id") int companyId, @Query("with_balance") Boolean withBalance);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: jp.co.freee.accounting.Walletables create" })
        @POST("walletables")
        Observable<Response<ResponseBody>> create(@Body CreateWalletableParams parameters);

    }

    /**
     * 口座一覧の取得.
     * 指定した事業所の口座一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WalletablesIndexResponse object if successful.
     */
    public WalletablesIndexResponse list(int companyId) {
        return listWithServiceResponseAsync(companyId).toBlocking().single().body();
    }

    /**
     * 口座一覧の取得.
     * 指定した事業所の口座一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WalletablesIndexResponse> listAsync(int companyId, final ServiceCallback<WalletablesIndexResponse> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(companyId), serviceCallback);
    }

    /**
     * 口座一覧の取得.
     * 指定した事業所の口座一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletablesIndexResponse object
     */
    public Observable<WalletablesIndexResponse> listAsync(int companyId) {
        return listWithServiceResponseAsync(companyId).map(new Func1<ServiceResponse<WalletablesIndexResponse>, WalletablesIndexResponse>() {
            @Override
            public WalletablesIndexResponse call(ServiceResponse<WalletablesIndexResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 口座一覧の取得.
     * 指定した事業所の口座一覧を取得する.
     *
     * @param companyId 事業所ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletablesIndexResponse object
     */
    public Observable<ServiceResponse<WalletablesIndexResponse>> listWithServiceResponseAsync(int companyId) {
        final Boolean withBalance = null;
        return service.list(companyId, withBalance)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WalletablesIndexResponse>>>() {
                @Override
                public Observable<ServiceResponse<WalletablesIndexResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WalletablesIndexResponse> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 口座一覧の取得.
     * 指定した事業所の口座一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param withBalance 残高情報を含める
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WalletablesIndexResponse object if successful.
     */
    public WalletablesIndexResponse list(int companyId, Boolean withBalance) {
        return listWithServiceResponseAsync(companyId, withBalance).toBlocking().single().body();
    }

    /**
     * 口座一覧の取得.
     * 指定した事業所の口座一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param withBalance 残高情報を含める
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WalletablesIndexResponse> listAsync(int companyId, Boolean withBalance, final ServiceCallback<WalletablesIndexResponse> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(companyId, withBalance), serviceCallback);
    }

    /**
     * 口座一覧の取得.
     * 指定した事業所の口座一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param withBalance 残高情報を含める
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletablesIndexResponse object
     */
    public Observable<WalletablesIndexResponse> listAsync(int companyId, Boolean withBalance) {
        return listWithServiceResponseAsync(companyId, withBalance).map(new Func1<ServiceResponse<WalletablesIndexResponse>, WalletablesIndexResponse>() {
            @Override
            public WalletablesIndexResponse call(ServiceResponse<WalletablesIndexResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 口座一覧の取得.
     * 指定した事業所の口座一覧を取得する.
     *
     * @param companyId 事業所ID
     * @param withBalance 残高情報を含める
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletablesIndexResponse object
     */
    public Observable<ServiceResponse<WalletablesIndexResponse>> listWithServiceResponseAsync(int companyId, Boolean withBalance) {
        return service.list(companyId, withBalance)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WalletablesIndexResponse>>>() {
                @Override
                public Observable<ServiceResponse<WalletablesIndexResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WalletablesIndexResponse> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WalletablesIndexResponse> listDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<WalletablesIndexResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WalletablesIndexResponse>() { }.getType())
                .build(response);
    }

    /**
     * 口座の作成.
     * 指定した事業所に口座を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WalletablesCreateResponse object if successful.
     */
    public WalletablesCreateResponse create() {
        return createWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * 口座の作成.
     * 指定した事業所に口座を作成する.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WalletablesCreateResponse> createAsync(final ServiceCallback<WalletablesCreateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * 口座の作成.
     * 指定した事業所に口座を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletablesCreateResponse object
     */
    public Observable<WalletablesCreateResponse> createAsync() {
        return createWithServiceResponseAsync().map(new Func1<ServiceResponse<WalletablesCreateResponse>, WalletablesCreateResponse>() {
            @Override
            public WalletablesCreateResponse call(ServiceResponse<WalletablesCreateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 口座の作成.
     * 指定した事業所に口座を作成する.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletablesCreateResponse object
     */
    public Observable<ServiceResponse<WalletablesCreateResponse>> createWithServiceResponseAsync() {
        final CreateWalletableParams parameters = null;
        return service.create(parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WalletablesCreateResponse>>>() {
                @Override
                public Observable<ServiceResponse<WalletablesCreateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WalletablesCreateResponse> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * 口座の作成.
     * 指定した事業所に口座を作成する.
     *
     * @param parameters 口座の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WalletablesCreateResponse object if successful.
     */
    public WalletablesCreateResponse create(CreateWalletableParams parameters) {
        return createWithServiceResponseAsync(parameters).toBlocking().single().body();
    }

    /**
     * 口座の作成.
     * 指定した事業所に口座を作成する.
     *
     * @param parameters 口座の作成
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WalletablesCreateResponse> createAsync(CreateWalletableParams parameters, final ServiceCallback<WalletablesCreateResponse> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(parameters), serviceCallback);
    }

    /**
     * 口座の作成.
     * 指定した事業所に口座を作成する.
     *
     * @param parameters 口座の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletablesCreateResponse object
     */
    public Observable<WalletablesCreateResponse> createAsync(CreateWalletableParams parameters) {
        return createWithServiceResponseAsync(parameters).map(new Func1<ServiceResponse<WalletablesCreateResponse>, WalletablesCreateResponse>() {
            @Override
            public WalletablesCreateResponse call(ServiceResponse<WalletablesCreateResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * 口座の作成.
     * 指定した事業所に口座を作成する.
     *
     * @param parameters 口座の作成
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletablesCreateResponse object
     */
    public Observable<ServiceResponse<WalletablesCreateResponse>> createWithServiceResponseAsync(CreateWalletableParams parameters) {
        Validator.validate(parameters);
        return service.create(parameters)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WalletablesCreateResponse>>>() {
                @Override
                public Observable<ServiceResponse<WalletablesCreateResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WalletablesCreateResponse> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WalletablesCreateResponse> createDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<WalletablesCreateResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<WalletablesCreateResponse>() { }.getType())
                .build(response);
    }

}
