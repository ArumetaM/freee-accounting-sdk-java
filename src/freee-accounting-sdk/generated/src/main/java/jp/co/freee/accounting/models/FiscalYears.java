/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.models;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The FiscalYears model.
 */
public class FiscalYears {
    /**
     * 製造業向け機能（true: 使用する、false: 使用しない）.
     */
    @JsonProperty(value = "use_industry_template", required = true)
    private boolean useIndustryTemplate;

    /**
     * 固定資産の控除法(false: 減価償却累計額でまとめる、true: 独立間接控除方式).
     */
    @JsonProperty(value = "indirect_write_off_method", required = true)
    private boolean indirectWriteOffMethod;

    /**
     * 期首日.
     */
    @JsonProperty(value = "start_date")
    private String startDate;

    /**
     * 期末日.
     */
    @JsonProperty(value = "end_date")
    private String endDate;

    /**
     * 月次償却（0: しない、1: する）.
     */
    @JsonProperty(value = "depreciation_record_method", required = true)
    private int depreciationRecordMethod;

    /**
     * 課税区分（0: 免税、1: 簡易課税、2: 本則課税（個別対応方式）、3: 本則課税（一括比例配分方式）、4: 本則課税（全額控除））.
     */
    @JsonProperty(value = "tax_method", required = true)
    private int taxMethod;

    /**
     * 簡易課税用事業区分（0: 第一種：卸売業、1: 第二種：小売業、2: 第三種：農林水産業、工業、建設業、製造業など、3:
     * 第四種：飲食店業など、4: 第五種：金融・保険業、運輸通信業、サービス業など、5: 第六種：不動産業など.
     */
    @JsonProperty(value = "sales_tax_business_code", required = true)
    private int salesTaxBusinessCode;

    /**
     * 消費税端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入）.
     */
    @JsonProperty(value = "tax_fraction", required = true)
    private int taxFraction;

    /**
     * 消費税経理処理方法（0: 税込経理、1: 旧税抜経理、2: 税抜経理）.
     */
    @JsonProperty(value = "tax_account_method", required = true)
    private int taxAccountMethod;

    /**
     * 不動産所得使用区分（0: 一般、1: 一般/不動産） ※個人事業主のみ設定可能.
     */
    @JsonProperty(value = "return_code", required = true)
    private int returnCode;

    /**
     * Get 製造業向け機能（true: 使用する、false: 使用しない）.
     *
     * @return the useIndustryTemplate value
     */
    public boolean useIndustryTemplate() {
        return this.useIndustryTemplate;
    }

    /**
     * Set 製造業向け機能（true: 使用する、false: 使用しない）.
     *
     * @param useIndustryTemplate the useIndustryTemplate value to set
     * @return the FiscalYears object itself.
     */
    public FiscalYears withUseIndustryTemplate(boolean useIndustryTemplate) {
        this.useIndustryTemplate = useIndustryTemplate;
        return this;
    }

    /**
     * Get 固定資産の控除法(false: 減価償却累計額でまとめる、true: 独立間接控除方式).
     *
     * @return the indirectWriteOffMethod value
     */
    public boolean indirectWriteOffMethod() {
        return this.indirectWriteOffMethod;
    }

    /**
     * Set 固定資産の控除法(false: 減価償却累計額でまとめる、true: 独立間接控除方式).
     *
     * @param indirectWriteOffMethod the indirectWriteOffMethod value to set
     * @return the FiscalYears object itself.
     */
    public FiscalYears withIndirectWriteOffMethod(boolean indirectWriteOffMethod) {
        this.indirectWriteOffMethod = indirectWriteOffMethod;
        return this;
    }

    /**
     * Get 期首日.
     *
     * @return the startDate value
     */
    public String startDate() {
        return this.startDate;
    }

    /**
     * Set 期首日.
     *
     * @param startDate the startDate value to set
     * @return the FiscalYears object itself.
     */
    public FiscalYears withStartDate(String startDate) {
        this.startDate = startDate;
        return this;
    }

    /**
     * Get 期末日.
     *
     * @return the endDate value
     */
    public String endDate() {
        return this.endDate;
    }

    /**
     * Set 期末日.
     *
     * @param endDate the endDate value to set
     * @return the FiscalYears object itself.
     */
    public FiscalYears withEndDate(String endDate) {
        this.endDate = endDate;
        return this;
    }

    /**
     * Get 月次償却（0: しない、1: する）.
     *
     * @return the depreciationRecordMethod value
     */
    public int depreciationRecordMethod() {
        return this.depreciationRecordMethod;
    }

    /**
     * Set 月次償却（0: しない、1: する）.
     *
     * @param depreciationRecordMethod the depreciationRecordMethod value to set
     * @return the FiscalYears object itself.
     */
    public FiscalYears withDepreciationRecordMethod(int depreciationRecordMethod) {
        this.depreciationRecordMethod = depreciationRecordMethod;
        return this;
    }

    /**
     * Get 課税区分（0: 免税、1: 簡易課税、2: 本則課税（個別対応方式）、3: 本則課税（一括比例配分方式）、4: 本則課税（全額控除））.
     *
     * @return the taxMethod value
     */
    public int taxMethod() {
        return this.taxMethod;
    }

    /**
     * Set 課税区分（0: 免税、1: 簡易課税、2: 本則課税（個別対応方式）、3: 本則課税（一括比例配分方式）、4: 本則課税（全額控除））.
     *
     * @param taxMethod the taxMethod value to set
     * @return the FiscalYears object itself.
     */
    public FiscalYears withTaxMethod(int taxMethod) {
        this.taxMethod = taxMethod;
        return this;
    }

    /**
     * Get 簡易課税用事業区分（0: 第一種：卸売業、1: 第二種：小売業、2: 第三種：農林水産業、工業、建設業、製造業など、3: 第四種：飲食店業など、4: 第五種：金融・保険業、運輸通信業、サービス業など、5: 第六種：不動産業など.
     *
     * @return the salesTaxBusinessCode value
     */
    public int salesTaxBusinessCode() {
        return this.salesTaxBusinessCode;
    }

    /**
     * Set 簡易課税用事業区分（0: 第一種：卸売業、1: 第二種：小売業、2: 第三種：農林水産業、工業、建設業、製造業など、3: 第四種：飲食店業など、4: 第五種：金融・保険業、運輸通信業、サービス業など、5: 第六種：不動産業など.
     *
     * @param salesTaxBusinessCode the salesTaxBusinessCode value to set
     * @return the FiscalYears object itself.
     */
    public FiscalYears withSalesTaxBusinessCode(int salesTaxBusinessCode) {
        this.salesTaxBusinessCode = salesTaxBusinessCode;
        return this;
    }

    /**
     * Get 消費税端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入）.
     *
     * @return the taxFraction value
     */
    public int taxFraction() {
        return this.taxFraction;
    }

    /**
     * Set 消費税端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入）.
     *
     * @param taxFraction the taxFraction value to set
     * @return the FiscalYears object itself.
     */
    public FiscalYears withTaxFraction(int taxFraction) {
        this.taxFraction = taxFraction;
        return this;
    }

    /**
     * Get 消費税経理処理方法（0: 税込経理、1: 旧税抜経理、2: 税抜経理）.
     *
     * @return the taxAccountMethod value
     */
    public int taxAccountMethod() {
        return this.taxAccountMethod;
    }

    /**
     * Set 消費税経理処理方法（0: 税込経理、1: 旧税抜経理、2: 税抜経理）.
     *
     * @param taxAccountMethod the taxAccountMethod value to set
     * @return the FiscalYears object itself.
     */
    public FiscalYears withTaxAccountMethod(int taxAccountMethod) {
        this.taxAccountMethod = taxAccountMethod;
        return this;
    }

    /**
     * Get 不動産所得使用区分（0: 一般、1: 一般/不動産） ※個人事業主のみ設定可能.
     *
     * @return the returnCode value
     */
    public int returnCode() {
        return this.returnCode;
    }

    /**
     * Set 不動産所得使用区分（0: 一般、1: 一般/不動産） ※個人事業主のみ設定可能.
     *
     * @param returnCode the returnCode value to set
     * @return the FiscalYears object itself.
     */
    public FiscalYears withReturnCode(int returnCode) {
        this.returnCode = returnCode;
        return this;
    }

}
