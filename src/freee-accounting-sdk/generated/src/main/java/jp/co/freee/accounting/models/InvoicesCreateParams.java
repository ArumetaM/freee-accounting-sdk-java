/**
 * Copyright (c) freee K.K. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package jp.co.freee.accounting.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The InvoicesCreateParams model.
 */
public class InvoicesCreateParams {
    /**
     * 事業所ID.
     */
    @JsonProperty(value = "company_id", required = true)
    private int companyId;

    /**
     * 請求日 (yyyy-mm-dd).
     */
    @JsonProperty(value = "issue_date")
    private String issueDate;

    /**
     * 取引先ID.
     */
    @JsonProperty(value = "partner_id")
    private Integer partnerId;

    /**
     * 取引先コード.
     */
    @JsonProperty(value = "partner_code")
    private String partnerCode;

    /**
     * 請求書番号 (デフォルト: 自動採番されます).
     */
    @JsonProperty(value = "invoice_number")
    private String invoiceNumber;

    /**
     * タイトル (デフォルト: 請求書).
     */
    @JsonProperty(value = "title")
    private String title;

    /**
     * 期日 (yyyy-mm-dd).
     */
    @JsonProperty(value = "due_date")
    private String dueDate;

    /**
     * 売上計上日.
     */
    @JsonProperty(value = "booking_date")
    private String bookingDate;

    /**
     * 概要.
     */
    @JsonProperty(value = "description")
    private String description;

    /**
     * 請求書ステータス  (draft: 下書き (デフォルト), issue: 発行(請求先ワークフローを利用している場合は指定できません)).
     * Possible values include: 'draft', 'issue'.
     */
    @JsonProperty(value = "invoice_status")
    private String invoiceStatus;

    /**
     * 取引先名.
     */
    @JsonProperty(value = "partner_name")
    private String partnerName;

    /**
     * 敬称（御中、様、(空白)の3つから選択）. Possible values include: '御中', '様', '(空白)'.
     */
    @JsonProperty(value = "partner_title")
    private String partnerTitle;

    /**
     * 取引先担当者名.
     */
    @JsonProperty(value = "partner_contact_info")
    private String partnerContactInfo;

    /**
     * 事業所名 (デフォルトは事業所設定情報が補完されます).
     */
    @JsonProperty(value = "company_name")
    private String companyName;

    /**
     * 郵便番号 (デフォルトは事業所設定情報が補完されます).
     */
    @JsonProperty(value = "company_zipcode")
    private String companyZipcode;

    /**
     * 都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄
     * ) (デフォルトは事業所設定情報が補完されます).
     */
    @JsonProperty(value = "company_prefecture_code")
    private Integer companyPrefectureCode;

    /**
     * 市区町村・番地 (デフォルトは事業所設定情報が補完されます).
     */
    @JsonProperty(value = "company_address1")
    private String companyAddress1;

    /**
     * 建物名・部屋番号など (デフォルトは事業所設定情報が補完されます).
     */
    @JsonProperty(value = "company_address2")
    private String companyAddress2;

    /**
     * 事業所担当者名 (デフォルトは事業所設定情報が補完されます).
     */
    @JsonProperty(value = "company_contact_info")
    private String companyContactInfo;

    /**
     * 支払方法 (振込: transfer, 引き落とし: direct_debit). Possible values include:
     * 'transfer', 'direct_debit'.
     */
    @JsonProperty(value = "payment_type")
    private String paymentType;

    /**
     * 支払口座.
     */
    @JsonProperty(value = "payment_bank_info")
    private String paymentBankInfo;

    /**
     * 振込専用口座の利用(利用しない: not_use(デフォルト), 利用する: use). Possible values include:
     * 'not_use', 'use'.
     */
    @JsonProperty(value = "use_virtual_transfer_account")
    private String useVirtualTransferAccount;

    /**
     * メッセージ (デフォルト: 下記の通りご請求申し上げます。).
     */
    @JsonProperty(value = "message")
    private String message;

    /**
     * 備考.
     */
    @JsonProperty(value = "notes")
    private String notes;

    /**
     * レイアウト(default_classic: レイアウト１/クラシック (デフォルト), standard_classic:
     * レイアウト２/クラシック, envelope_classic: 封筒１/クラシック,
     * carried_forward_standard_classic: レイアウト３（繰越金額欄あり）/クラシック,
     * carried_forward_envelope_classic: 封筒２（繰越金額欄あり）/クラシック, default_modern:
     * レイアウト１/モダン, standard_modern: レイアウト２/モダン, envelope_modern: 封筒/モダン).
     * Possible values include: 'default_classic', 'standard_classic',
     * 'envelope_classic', 'carried_forward_standard_classic',
     * 'carried_forward_envelope_classic', 'default_modern', 'standard_modern',
     * 'envelope_modern'.
     */
    @JsonProperty(value = "invoice_layout")
    private String invoiceLayout;

    /**
     * 請求書の消費税計算方法(inclusive: 内税表示, exclusive: 外税表示 (デフォルト)). Possible values
     * include: 'inclusive', 'exclusive'.
     */
    @JsonProperty(value = "tax_entry_method")
    private String taxEntryMethod;

    /**
     * 請求内容.
     */
    @JsonProperty(value = "invoice_contents")
    private List<InvoicesCreateParamsInvoiceContentsItem> invoiceContents;

    /**
     * Get 事業所ID.
     *
     * @return the companyId value
     */
    public int companyId() {
        return this.companyId;
    }

    /**
     * Set 事業所ID.
     *
     * @param companyId the companyId value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withCompanyId(int companyId) {
        this.companyId = companyId;
        return this;
    }

    /**
     * Get 請求日 (yyyy-mm-dd).
     *
     * @return the issueDate value
     */
    public String issueDate() {
        return this.issueDate;
    }

    /**
     * Set 請求日 (yyyy-mm-dd).
     *
     * @param issueDate the issueDate value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withIssueDate(String issueDate) {
        this.issueDate = issueDate;
        return this;
    }

    /**
     * Get 取引先ID.
     *
     * @return the partnerId value
     */
    public Integer partnerId() {
        return this.partnerId;
    }

    /**
     * Set 取引先ID.
     *
     * @param partnerId the partnerId value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withPartnerId(Integer partnerId) {
        this.partnerId = partnerId;
        return this;
    }

    /**
     * Get 取引先コード.
     *
     * @return the partnerCode value
     */
    public String partnerCode() {
        return this.partnerCode;
    }

    /**
     * Set 取引先コード.
     *
     * @param partnerCode the partnerCode value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withPartnerCode(String partnerCode) {
        this.partnerCode = partnerCode;
        return this;
    }

    /**
     * Get 請求書番号 (デフォルト: 自動採番されます).
     *
     * @return the invoiceNumber value
     */
    public String invoiceNumber() {
        return this.invoiceNumber;
    }

    /**
     * Set 請求書番号 (デフォルト: 自動採番されます).
     *
     * @param invoiceNumber the invoiceNumber value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = invoiceNumber;
        return this;
    }

    /**
     * Get タイトル (デフォルト: 請求書).
     *
     * @return the title value
     */
    public String title() {
        return this.title;
    }

    /**
     * Set タイトル (デフォルト: 請求書).
     *
     * @param title the title value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get 期日 (yyyy-mm-dd).
     *
     * @return the dueDate value
     */
    public String dueDate() {
        return this.dueDate;
    }

    /**
     * Set 期日 (yyyy-mm-dd).
     *
     * @param dueDate the dueDate value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withDueDate(String dueDate) {
        this.dueDate = dueDate;
        return this;
    }

    /**
     * Get 売上計上日.
     *
     * @return the bookingDate value
     */
    public String bookingDate() {
        return this.bookingDate;
    }

    /**
     * Set 売上計上日.
     *
     * @param bookingDate the bookingDate value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withBookingDate(String bookingDate) {
        this.bookingDate = bookingDate;
        return this;
    }

    /**
     * Get 概要.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Set 概要.
     *
     * @param description the description value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get 請求書ステータス  (draft: 下書き (デフォルト), issue: 発行(請求先ワークフローを利用している場合は指定できません)). Possible values include: 'draft', 'issue'.
     *
     * @return the invoiceStatus value
     */
    public String invoiceStatus() {
        return this.invoiceStatus;
    }

    /**
     * Set 請求書ステータス  (draft: 下書き (デフォルト), issue: 発行(請求先ワークフローを利用している場合は指定できません)). Possible values include: 'draft', 'issue'.
     *
     * @param invoiceStatus the invoiceStatus value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withInvoiceStatus(String invoiceStatus) {
        this.invoiceStatus = invoiceStatus;
        return this;
    }

    /**
     * Get 取引先名.
     *
     * @return the partnerName value
     */
    public String partnerName() {
        return this.partnerName;
    }

    /**
     * Set 取引先名.
     *
     * @param partnerName the partnerName value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withPartnerName(String partnerName) {
        this.partnerName = partnerName;
        return this;
    }

    /**
     * Get 敬称（御中、様、(空白)の3つから選択）. Possible values include: '御中', '様', '(空白)'.
     *
     * @return the partnerTitle value
     */
    public String partnerTitle() {
        return this.partnerTitle;
    }

    /**
     * Set 敬称（御中、様、(空白)の3つから選択）. Possible values include: '御中', '様', '(空白)'.
     *
     * @param partnerTitle the partnerTitle value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withPartnerTitle(String partnerTitle) {
        this.partnerTitle = partnerTitle;
        return this;
    }

    /**
     * Get 取引先担当者名.
     *
     * @return the partnerContactInfo value
     */
    public String partnerContactInfo() {
        return this.partnerContactInfo;
    }

    /**
     * Set 取引先担当者名.
     *
     * @param partnerContactInfo the partnerContactInfo value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withPartnerContactInfo(String partnerContactInfo) {
        this.partnerContactInfo = partnerContactInfo;
        return this;
    }

    /**
     * Get 事業所名 (デフォルトは事業所設定情報が補完されます).
     *
     * @return the companyName value
     */
    public String companyName() {
        return this.companyName;
    }

    /**
     * Set 事業所名 (デフォルトは事業所設定情報が補完されます).
     *
     * @param companyName the companyName value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }

    /**
     * Get 郵便番号 (デフォルトは事業所設定情報が補完されます).
     *
     * @return the companyZipcode value
     */
    public String companyZipcode() {
        return this.companyZipcode;
    }

    /**
     * Set 郵便番号 (デフォルトは事業所設定情報が補完されます).
     *
     * @param companyZipcode the companyZipcode value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withCompanyZipcode(String companyZipcode) {
        this.companyZipcode = companyZipcode;
        return this;
    }

    /**
     * Get 都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄 ) (デフォルトは事業所設定情報が補完されます).
     *
     * @return the companyPrefectureCode value
     */
    public Integer companyPrefectureCode() {
        return this.companyPrefectureCode;
    }

    /**
     * Set 都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄 ) (デフォルトは事業所設定情報が補完されます).
     *
     * @param companyPrefectureCode the companyPrefectureCode value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withCompanyPrefectureCode(Integer companyPrefectureCode) {
        this.companyPrefectureCode = companyPrefectureCode;
        return this;
    }

    /**
     * Get 市区町村・番地 (デフォルトは事業所設定情報が補完されます).
     *
     * @return the companyAddress1 value
     */
    public String companyAddress1() {
        return this.companyAddress1;
    }

    /**
     * Set 市区町村・番地 (デフォルトは事業所設定情報が補完されます).
     *
     * @param companyAddress1 the companyAddress1 value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withCompanyAddress1(String companyAddress1) {
        this.companyAddress1 = companyAddress1;
        return this;
    }

    /**
     * Get 建物名・部屋番号など (デフォルトは事業所設定情報が補完されます).
     *
     * @return the companyAddress2 value
     */
    public String companyAddress2() {
        return this.companyAddress2;
    }

    /**
     * Set 建物名・部屋番号など (デフォルトは事業所設定情報が補完されます).
     *
     * @param companyAddress2 the companyAddress2 value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withCompanyAddress2(String companyAddress2) {
        this.companyAddress2 = companyAddress2;
        return this;
    }

    /**
     * Get 事業所担当者名 (デフォルトは事業所設定情報が補完されます).
     *
     * @return the companyContactInfo value
     */
    public String companyContactInfo() {
        return this.companyContactInfo;
    }

    /**
     * Set 事業所担当者名 (デフォルトは事業所設定情報が補完されます).
     *
     * @param companyContactInfo the companyContactInfo value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withCompanyContactInfo(String companyContactInfo) {
        this.companyContactInfo = companyContactInfo;
        return this;
    }

    /**
     * Get 支払方法 (振込: transfer, 引き落とし: direct_debit). Possible values include: 'transfer', 'direct_debit'.
     *
     * @return the paymentType value
     */
    public String paymentType() {
        return this.paymentType;
    }

    /**
     * Set 支払方法 (振込: transfer, 引き落とし: direct_debit). Possible values include: 'transfer', 'direct_debit'.
     *
     * @param paymentType the paymentType value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withPaymentType(String paymentType) {
        this.paymentType = paymentType;
        return this;
    }

    /**
     * Get 支払口座.
     *
     * @return the paymentBankInfo value
     */
    public String paymentBankInfo() {
        return this.paymentBankInfo;
    }

    /**
     * Set 支払口座.
     *
     * @param paymentBankInfo the paymentBankInfo value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withPaymentBankInfo(String paymentBankInfo) {
        this.paymentBankInfo = paymentBankInfo;
        return this;
    }

    /**
     * Get 振込専用口座の利用(利用しない: not_use(デフォルト), 利用する: use). Possible values include: 'not_use', 'use'.
     *
     * @return the useVirtualTransferAccount value
     */
    public String useVirtualTransferAccount() {
        return this.useVirtualTransferAccount;
    }

    /**
     * Set 振込専用口座の利用(利用しない: not_use(デフォルト), 利用する: use). Possible values include: 'not_use', 'use'.
     *
     * @param useVirtualTransferAccount the useVirtualTransferAccount value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withUseVirtualTransferAccount(String useVirtualTransferAccount) {
        this.useVirtualTransferAccount = useVirtualTransferAccount;
        return this;
    }

    /**
     * Get メッセージ (デフォルト: 下記の通りご請求申し上げます。).
     *
     * @return the message value
     */
    public String message() {
        return this.message;
    }

    /**
     * Set メッセージ (デフォルト: 下記の通りご請求申し上げます。).
     *
     * @param message the message value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get 備考.
     *
     * @return the notes value
     */
    public String notes() {
        return this.notes;
    }

    /**
     * Set 備考.
     *
     * @param notes the notes value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withNotes(String notes) {
        this.notes = notes;
        return this;
    }

    /**
     * Get レイアウト(default_classic: レイアウト１/クラシック (デフォルト), standard_classic: レイアウト２/クラシック, envelope_classic: 封筒１/クラシック, carried_forward_standard_classic: レイアウト３（繰越金額欄あり）/クラシック, carried_forward_envelope_classic: 封筒２（繰越金額欄あり）/クラシック, default_modern: レイアウト１/モダン, standard_modern: レイアウト２/モダン, envelope_modern: 封筒/モダン). Possible values include: 'default_classic', 'standard_classic', 'envelope_classic', 'carried_forward_standard_classic', 'carried_forward_envelope_classic', 'default_modern', 'standard_modern', 'envelope_modern'.
     *
     * @return the invoiceLayout value
     */
    public String invoiceLayout() {
        return this.invoiceLayout;
    }

    /**
     * Set レイアウト(default_classic: レイアウト１/クラシック (デフォルト), standard_classic: レイアウト２/クラシック, envelope_classic: 封筒１/クラシック, carried_forward_standard_classic: レイアウト３（繰越金額欄あり）/クラシック, carried_forward_envelope_classic: 封筒２（繰越金額欄あり）/クラシック, default_modern: レイアウト１/モダン, standard_modern: レイアウト２/モダン, envelope_modern: 封筒/モダン). Possible values include: 'default_classic', 'standard_classic', 'envelope_classic', 'carried_forward_standard_classic', 'carried_forward_envelope_classic', 'default_modern', 'standard_modern', 'envelope_modern'.
     *
     * @param invoiceLayout the invoiceLayout value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withInvoiceLayout(String invoiceLayout) {
        this.invoiceLayout = invoiceLayout;
        return this;
    }

    /**
     * Get 請求書の消費税計算方法(inclusive: 内税表示, exclusive: 外税表示 (デフォルト)). Possible values include: 'inclusive', 'exclusive'.
     *
     * @return the taxEntryMethod value
     */
    public String taxEntryMethod() {
        return this.taxEntryMethod;
    }

    /**
     * Set 請求書の消費税計算方法(inclusive: 内税表示, exclusive: 外税表示 (デフォルト)). Possible values include: 'inclusive', 'exclusive'.
     *
     * @param taxEntryMethod the taxEntryMethod value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withTaxEntryMethod(String taxEntryMethod) {
        this.taxEntryMethod = taxEntryMethod;
        return this;
    }

    /**
     * Get 請求内容.
     *
     * @return the invoiceContents value
     */
    public List<InvoicesCreateParamsInvoiceContentsItem> invoiceContents() {
        return this.invoiceContents;
    }

    /**
     * Set 請求内容.
     *
     * @param invoiceContents the invoiceContents value to set
     * @return the InvoicesCreateParams object itself.
     */
    public InvoicesCreateParams withInvoiceContents(List<InvoicesCreateParamsInvoiceContentsItem> invoiceContents) {
        this.invoiceContents = invoiceContents;
        return this;
    }

}
